{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"MCPROTO"},{"location":"#what-is-mcproto","title":"What is Mcproto","text":"<p>Mcproto is a python library that provides various low level interactions with the Minecraft protocol. It attempts to be a full wrapper around the Minecraft protocol, which means it could be used as a basis for Minecraft bots written in python, or even full python server implementations.</p> <p>Warning</p> <p>This library is still heavily Work-In-Progress, which means a lot of things can still change and some features may be missing or incomplete. Using the library for production applications at it's current state isn't recommended.</p>"},{"location":"attribution/","title":"Attribution","text":"<p>This document serves as a way to explicitly give credit to projects which made mcproto possible.</p> <p>Note that as with any other project, if there was some code that was directly utilized from these projects, it will be mentioned in <code>LICENSE-THIRD-PARTY.txt</code>, not in here. This file isn't meant to serve as a place to disclose used code and it's licenses, but rather to give proper credit where it is due, and to shout out a few amazing projects that allowed mcproto to exist in the first place.</p> <ul> <li>wiki.vg (https://wiki.vg): An absolutely amazing community driven wiki that documents how the minecraft protocol is   structured and the changes that occur between the protocol versions.</li> <li>PyMine-Net: The project that was the main inspiration to this project, being a separation of the minecraft   networking tooling used in PyMine-Server, which is an attempt at implementing a fully working minecraft server purely   in python. However, this project is no longer maintained, and so mcproto was created to be it's replacement.</li> <li>Mcstatus: A library that allows for easy fetching of status/query data from minecraft servers, including parsers and   structures that meaningfully represent the obtained data, but also the logic on how it's actually obtained, some of   which this project took heavy inspiration from.</li> <li>pyCraft: A long abandoned project similar to mcproto, which served as an inspiration for various functionalities in   the library.</li> <li>quarry: A library providing support for basic interactions with the minecraft protocol, though only up to packet reading.   Implementation for reading data from specific packets is not included.</li> </ul> <p>To all of these projects, they deserve a massive thank you, for keeping their code/information open-sourced and available as a source of information, and inspiration freely to anyone.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>Major and minor releases also include the changes specified in prior development releases.</p> <p>Missing unreleased changes</p> <p>This changelog doesn't contain any unreleased (pending) changes, even if they are present in this version of the project documentation already. If you are interested in knowing what these changes are, you can take a look at the <code>changes/</code> directory of the project.</p> <p>In the future, we want to display these changes properly in this documentation, however, doing so requires running a command dynamically, and showing it's output here, which we currently don't support.</p>"},{"location":"changelog/#version-050-2023-08-10","title":"Version 0.5.0 (2023-08-10)","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li> <p>#130: Renamed \"shared_key\" field to \"shared_secret\" in <code>LoginEncryptionPacket</code>, following the official terminology.</p> </li> <li> <p>This is a breaking change, <code>LoginEncryptionPacket</code>'s <code>__init__</code> method now uses \"shared_secret\" keyword only argument, not \"shared_key\".</p> </li> <li>#130: The <code>LoginStart</code> packet now contains a (required) UUID field (which can be explicitly set to <code>None</code>).</li> <li>For some reason, this field was not added when the login packets were introduced initially, and while the UUID field can indeed be omitted in some cases (it is an optional filed), in vast majority of cases, it will be present, and we should absolutely support it.</li> <li>As this is a new required field, the <code>__init__</code> function of <code>LoginStart</code> now also expects this <code>uuid</code> keyword argument to be present, making this a breaking change.</li> <li>#159: Fix packet compression handling in the interaction methods.</li> </ul> <p>This fixes a bug that didn't allow for specifying an exact compression threshold that the server specified in <code>LoginSetCompression</code> packet, and instead only allowing to toggle between compression on/off, which doesn't really work as server doesn't expect compression for packets below that threshold.</p> <ul> <li><code>sync_write_packet</code>, <code>async_write_pakcet</code>, <code>sync_read_packet</code> and <code>async_read_packet</code> functions now take <code>compression_threshold</code> instead of <code>compressed</code> bool flag</li> <li>#161: <code>LoginEncryptionRequest</code> now uses <code>cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey</code> to hold the public key, instead of just pure <code>bytes</code>. Encoding and decoding of this key happens automatically during serialize/deserialize. This is a breaking change for anyone relying on the <code>public_key</code> field from this packet being <code>bytes</code>, and for anyone initializing this packet directly with <code>__init__</code>, which now expects <code>RSAPublicKey</code> instance instead.</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>#129: Added a system for handling Minecraft authentication</li> <li>Yggdrasil system for unmigrated i.e. non-Microsoft accounts (supportng Minecraft accounts, and the really old Mojang accounts)</li> <li>Microsoft OAuth2 system (Xbox live) for migrated i.e. Microsoft accounts</li> <li>#160: Re-export the packet classes (or any other objects) from the gamestate modules (<code>mcproto.packets.handshaking</code>/<code>mcproto.packets.login</code>/...) directly. Allowing simpler imports (<code>from mcproto.packets.login import LoginStart</code> instead of <code>from mcproto.packets.login.login import LoginStart</code>)</li> <li>#161: Add support for encryption. Connection classes now have <code>enable_encryption</code> method, and some encryption related functions were added into a new <code>mcproto.encryption</code> module.</li> <li>#168: Add multiplayer related functionalities for requesting and checking joins for original (bought) minecraft accounts. This allows us to join online servers.</li> <li>#171: Add <code>Account.check</code> function, to verify that the access token in use is valid, and the data the Account instance has matches the data minecraft API has.</li> </ul>"},{"location":"changelog/#bugfixes","title":"Bugfixes","text":"<ul> <li>#130: <code>LoginEncryptionResponse</code> now includes the <code>server_id</code> field. This field was previously hard-coded to 20 spaces (blank value), which is what all minecraft clients on minecraft 1.7.x or higher do, however with older versions, this field is set to 20 random characters, which we should respect.</li> <li>This is not a breaking change, as <code>server_id</code> will default to <code>None</code> in <code>LoginEncryptionResponse</code>'s <code>__init__</code>, meaning any existing code utilizing this packet will still work. It is purely an additional option.</li> <li>#167: Fix packet reading/writing when compression is enabled (use zlib as expected, instead of gzip which we were using before)</li> <li>#170: Preserve the call parameters and overloads in the typing signature of <code>mcproto.packets.packet_map.generate_packet_map</code> function. (This wasn't the case before, since <code>functools.lru_cache</code> doesn't preserve this data). Note that this loses on the typing information about the cache itself, as now it will appear to be a regular uncached function to the type-checker. We deemed this approach better to the alternative of no typing info for call arguments or overloads, but preserving cache info.</li> </ul>"},{"location":"changelog/#documentation-improvements","title":"Documentation Improvements","text":"<ul> <li>#129: Mention lack of synchronous alternatives for certain functions (see issue #128)</li> <li>#139: Add a warning in version guarantees page, explaining pre-release guarantees (breaking changes in minor versions allowed)</li> <li>#141: Move installation instructions from README to Installation docs page</li> <li> <p>#144: Add attributetable internal sphinx extension for showing all attributes and methods for specified classes.</p> </li> <li> <p>This adds <code>attributetable</code> sphinx directive, which can be used before autodoc directive. This will create the attribute table, which will get dynamically moved right below the class definition from autodoc (using javascript).</p> </li> <li>This extension was implemented by discord.py, this is just re-using that code, with some modifications to fit our code style and to fit the documentation design (furo theme).</li> <li>Updated contributing guidelines (restructure and rewrite some categories, to make it more readable)</li> </ul>"},{"location":"changelog/#internal-changes","title":"Internal Changes","text":"<ul> <li>#133: Enable enforcement of some optional pyright rules</li> <li>#153: Replace flake8 linter with ruff (mostly equivalent, but much faster and configurable from pyproject.toml)</li> <li> <p>#154: Enforce various new ruff linter rules:</p> </li> <li> <p>PGH: pygrep-hooks (replaces pre-commit version)</p> </li> <li>PL: pylint (bunch of typing related linter rules)</li> <li>UP: pyupgrade (forces use of the newest possible standards, depending on target version)</li> <li>RET: flake8-return (various linter rules related to function returns)</li> <li>Q: flake8-quotes (always use double quotes)</li> <li>ASYNC: flake8-async (report blocking operations in async functions)</li> <li>INT: flake-gettext (gettext related linting rules)</li> <li>PTH: flake8-use-pathlib (always prefer pathlib alternatives to the os ones)</li> <li>RUF: ruff custom rules (various additional rules created by the ruff linter team)</li> </ul>"},{"location":"changelog/#version-040-2023-06-11","title":"Version 0.4.0 (2023-06-11)","text":""},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>#41: Rename <code>mcproto.packets.abc</code> to <code>mcproto.packets.packet</code></li> <li>#116: Restructure the project, moving to a single protocol version model</li> <li>This change does NOT have a deprecation period, and will very likely break most existing code-bases. However this change is necessary, as multi-version support was unsustainable (see issue #45 for more details)</li> <li>Any packets and types will no longer be present in versioned folders (mcproto.packets.v757.xxx), but rather be directly in the parent directory (mcproto.packets.xxx).</li> <li>This change doesn't affect manual communication with the server, connection, and basic IO writers/readers remain the same.</li> </ul>"},{"location":"changelog/#version-030-2023-06-08","title":"Version 0.3.0 (2023-06-08)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>#54: Add support for LOGIN state packets</li> <li><code>LoginStart</code></li> <li><code>LoginEncryptionRequest</code></li> <li><code>LoginEncryptionResponse</code></li> <li><code>LoginSuccess</code></li> <li><code>LoginDisconnect</code></li> <li><code>LoginPluginRequest</code></li> <li><code>LoginPluginResponse</code></li> <li><code>LoginSetCompression</code></li> </ul>"},{"location":"changelog/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>#75: Increase the stack level of warnings shown on protocol version fallbacks</li> <li>#113: TCP connections now properly shut down the connection gracefully (TCP FIN)</li> </ul>"},{"location":"changelog/#documentation-improvements_1","title":"Documentation Improvements","text":"<ul> <li>#2: Add Sphinx and basic docs layout</li> <li>#18: Rewrite all docstrings into proper Sphinx format, instead of using markdown.</li> <li>#27: Add changelog page to docs, linking <code>CHANGELOG.md</code>, including unreleased changes from fragments.</li> <li>#28: Use furo theme for the documentation</li> <li>#34: Add version guarantees page</li> <li>#40: Move code of conduct to the docs.</li> <li>Improve readability of the changelog readme (changes/README.md)</li> <li>Mention taskipy <code>changelog-preview</code> shorthand command</li> <li>Add category headers splitting things up, for better readability</li> <li>Explain how to express multiple changes related to a single goal in a changelog fragment.</li> <li>Include <code>CHANGELOG.md</code> file in project's distribution files.</li> </ul>"},{"location":"changelog/#internal-changes_1","title":"Internal Changes","text":"<ul> <li>#12: Replace HassanAbouelela setup-python action with ItsDrike/setup-python in CI workflows</li> <li>#17: Start using codeclimate to monitor code coverage and it's changes</li> <li>#35: Add more tests</li> <li>#38: Replace our implementation of <code>SemanticVersion</code> with a community-maintained <code>semantic-version</code> package.</li> <li>#53: Mark all packet classes as <code>typing.final</code>, making the type-checker enforce existence of concrete implementations for all abstract methods.</li> <li>#112: Removed <code>codespell</code> linter. This proved too annoying, especially when we already have a lot of linters here. Spelling mistakes can simply be caught in the review process.</li> <li>#114: Use latest poetry version in CI workflows (remove version lock - at 1.3.1)</li> <li>The <code>documentation</code> category of changelog was renamed to shorter <code>docs</code></li> </ul>"},{"location":"changelog/#version-020-2022-12-30","title":"Version 0.2.0 (2022-12-30)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>#14: Add <code>__slots__</code> to most classes in the project</li> <li>All connection classes are now slotted</li> <li>Classes in <code>mcproto.utils.abc</code> are now slotted</li> <li>Separate packet interaction functions into <code>mcproto.packets.interactions</code>, (though they're reexported in   <code>mcproto.packets</code>, so no breaking changes)</li> </ul>"},{"location":"changelog/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>#14: Add missing <code>__slots__</code> to <code>ServerBoundPacket</code> and <code>ClientBoundPacket</code> subclasses, which inherited from slotted   <code>Packet</code>, but didn't themselves define <code>__slots__</code>, causing <code>__dict__</code> to be needlessly created.</li> <li>The error message produced by <code>RequiredParamsABCMixin</code> class when a required no MRO class variable isn't present now   includes a previously missing space, making it more readable.</li> </ul>"},{"location":"changelog/#documentation-improvements_2","title":"Documentation Improvements","text":"<ul> <li>#7: Add and start keeping a changelog, managed by towncrier.</li> <li>#13: Add a security policy.</li> </ul>"},{"location":"changelog/#internal-changes_2","title":"Internal Changes","text":"<ul> <li>#6: Rework deprecation system</li> <li>Drop support for date-based deprecations, versions work better</li> <li>Provide <code>deprecation_warn</code> function, which emits warnings directly, no need for a decorator</li> <li>Add a <code>SemanticVersion</code> class, supporting version comparisons</li> <li>If the project's version is already higher than the specified deprecation removal version, raise a DeprecationWarning     as a full exception (rather than just a warning).</li> <li>#7: Add towncrier for managing changelog</li> <li>#14: Add slotscheck, ensuring <code>__slots__</code> are defined properly everywhere.</li> <li>#14: Make <code>typing-extensions</code> a runtime dependency and use it directly, don't rely on <code>if typing.TYPE_CHECKING</code> blocks.</li> <li>#15: Add codespell tool, to automatically find spelling mistakes.</li> <li>Add README file into the <code>tests/</code> folder, explaining how we use unit-tests and some basics of testing.</li> <li>Add <code>CustomMockMixin</code> internal class, inheriting from <code>UnpropagatingMockMixin</code>, but also allowing to use <code>spec_set</code> as   class variable, as it will automatically pass it into <code>__init__</code> of the mock class.</li> <li>Add several new flake8 extensions, and rework flake8 config file</li> <li>Add support for specifying what child mock type to propagate in <code>UnpropagatingMockMixin</code> class (for unit-tests).</li> </ul> <p>The changelog was added during development of 0.2.0, so nothing prior is documented here. Try checking the GitHub releases, or git commit history directly.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":"<p>This code of conduct outlines our expectations for the people involved with this project. We, as members, contributors and leaders are committed to providing a welcoming and inspiring project that anyone can easily join, expecting a harassment-free experience, as described in this code of conduct.</p> <p>This code of conduct is here to ensure we provide a welcoming and inspiring project that anyone can easily join, expecting a harassment-free experience, as described in this code of conduct.</p> <p>The goal of this document is to set the overall tone for our community. It is here to outline some of the things you can and can't do if you wish to participate in our community. However it is not here to serve as a rule-book with a complete set of things you can't do, social conduct differs from situation to situation, and person to person, but we should do our best to try and provide a good experience to everyone, in every situation.</p> <p>We value many things beyond just technical expertise, including collaboration and supporting others within our community. Providing a positive experience for others can have a much more significant impact than simply providing the correct answer.</p>"},{"location":"code_of_conduct/#harassment","title":"Harassment","text":"<p>We share a common understanding of what constitutes harassment as it applies to a professional setting. Although this list cannot be exhaustive, we explicitly honor diversity in age, gender, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, disability and personal appearance. We will not tolerate discrimination based on any of the protected characteristics above, including some that may not have been explicitly mentioned here. We consider discrimination of any kind to be unacceptable and immoral.</p> <p>Harassment includes, but is not limited to:</p> <ul> <li>Offensive comments (or \"jokes\") related to any of the above mentioned attributes.</li> <li>Deliberate \"outing\"/\"doxing\" of any aspect of a person's identity, such as physical or electronic address, without   their explicit consent, except as necessary to protect others from intentional abuse.</li> <li>Unwelcome comments regarding a person's lifestyle choices and practices, including those related to food, health,   parenting, drugs and employment.</li> <li>Deliberate misgendering. This includes deadnaming or persistently using a pronoun that does not correctly reflect a   person's gender identity. You must address people by the name they give you when not addressing them by their   username or handle.</li> <li>Threats of violence, both physical and psychological.</li> <li>Incitement of violence towards any individual, including encouraging a person to engage in self-harm.</li> <li>Publication of non-harassing private communication.</li> <li>Pattern of inappropriate social conduct, such as requesting/assuming inappropriate levels of intimacy with others, or   excessive teasing after a request to stop.</li> <li>Continued one-on-one communication after requests to cease.</li> <li>Sabotage of someone else's work or intentionally hindering someone else's performance.</li> </ul>"},{"location":"code_of_conduct/#plagiarism","title":"Plagiarism","text":"<p>Plagiarism is the re-use of someone else's work (eg: binary content such as images, textual content such as an article, but also source code, or any other copyrightable resources) without the permission or a license right from the author. Claiming someone else's work as your own is not just immoral and disrespectful to the author, but also illegal in most countries. You should always follow the authors wishes, and give credit where credit is due.</p> <p>If we found that you've intentionally attempted to add plagiarized content to our code-base, you will likely end up being permanently banned from any future contributions to this project's repository. We will of course also do our best to remove, or properly attribute this plagiarized content as quickly as possible.</p> <p>An unintentional attempt at plagiarism will not be punished as harshly, but nevertheless, it is your responsibility as a contributor to check where the code you're submitting comes from, and so repeated submission of such content, even after you were warned might still get you banned.</p> <p>Please note that an online repository that has no license is presumed to only be source-available, NOT open-source. Meaning that this work is protected by author's copyright, automatically imposed over it, and without any license extending that copyright, you have no rights to use such code. So know that you can't simply take some source-code, even though it's published publicly. This code may be available to be seen by anyone, but that does not mean it's also available to be used by anyone in other projects.</p> <p>Another important note to keep in mind is that even if some project has an open-source license, that license may have conditions which are incompatible with our codebase (such as requiring all of the code that links to this new part to also be licensed under the same license, which our code-base is not currently under). That is why it's necessary to understand a license before using code available under it. Simple attribution often isn't everything that the license requires.</p> Learn more about software licensing <p>If you are new to software licensing, you can check out this article, which does a good job at explaining the basics.</p>"},{"location":"code_of_conduct/#generally-inappropriate-behavior","title":"Generally inappropriate behavior","text":"<p>Outside of just harassment and plagiarism, there are countless other behaviors which we consider unacceptable, as they may be offensive, and discourage people from engaging with our community.</p> <p>Examples of generally inappropriate behavior:</p> <ul> <li>The use of sexualized language or imagery of any kind</li> <li>The use of inappropriate images, including in an account's avatar</li> <li>The use of inappropriate language, including in an account's nickname</li> <li>Any spamming, flamming, baiting or other attention-stealing behavior</li> <li>Discussing topics that are overly polarizing, sensitive, or incite arguments.</li> <li>Responding with \"RTFM\", \"just google it\" or similar response to help requests</li> <li>Other conduct which could be reasonably considered inappropriate</li> </ul> <p>Examples of generally appropriate behavior:</p> <ul> <li>Being kind and courteous to others</li> <li>Collaborating with other community members</li> <li>Gracefully accepting constructive criticism</li> <li>Using welcoming and inclusive language</li> <li>Showing empathy towards other community members</li> </ul>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, including this repository itself, conversations on any platforms officially connected to this project (such as in GitHub issues, emails or platforms like discord). It also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official social media account, or acting as an appointed representative at an online or offline event.</p> <p>All members involved with the project are expected to follow this Code of Conduct, no matter their position in the project's hierarchy, this Code of Conduct applies equally to contributors, maintainers and people seeking help/reporting bugs, etc.</p>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Whenever a participant has made a mistake, we expect them to take responsibility for their actions. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and to do our best to right the wrong.</p> <p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, harmful, or otherwise undesirable.</p> <p>Community leaders have the right and responsibility to remove, edit or reject comments, commits, code, wiki edits, issues and other contributions within the enforcement scope that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p> <p>If you have experienced or witnessed unacceptable behavior constituting a code of conduct violation or have any other code of conduct concerns, please let us know and we will do our best to resolve this issue.</p>"},{"location":"code_of_conduct/#reporting-a-code-of-conduct-violation","title":"Reporting a Code of Conduct violation","text":"<p>If you think that someone is violating the Code of Conduct, you can report it to any repository maintainer, either by email or through a Discord DM. You should avoid using public channels for reporting these violations, and instead do so in private discussion with a maintainer.</p>"},{"location":"code_of_conduct/#sources","title":"Sources","text":"<p>The open-source community has an incredible amount of resources that people have freely provided to others and we all depend on these projects in many ways. This code of conduct article is no exception and there were many open source projects that has helped bring this code of conduct to existence. For that reason, we'd like to thank all of these communities and projects for keeping their content open and available to everyone, but most notably we'd like to thank the projects with established codes of conduct and diversity statements that we used as our inspiration. Below is the list these projects:</p> <ul> <li>Python: https://www.python.org/community/diversity/</li> <li>Contributor Covenant: https://www.contributor-covenant.org/</li> <li>Rust-lang: https://www.rust-lang.org/policies/code-of-conduct</li> <li>Code Fellows: https://github.com/codefellows/code-of-conduct</li> <li>Python Discord: https://www.pythondiscord.com/pages/code-of-conduct/</li> </ul>"},{"location":"code_of_conduct/#license","title":"License","text":"<p>All content of this page is licensed under a Creative Commons Attributions license.</p> <p>For more information about this license, see: https://creativecommons.org/licenses/by/3.0/</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#pypi-stable-version","title":"PyPI (stable) version","text":"<p>Mcproto is available on PyPI and can be installed like any other python library with:</p> pippoetryrye <pre><code>pip install mcproto\n</code></pre> <pre><code>poetry add mcproto\n</code></pre> <pre><code>rye add mcproto\n</code></pre>"},{"location":"installation/#latest-git-version","title":"Latest (git) version","text":"<p>Alternatively, you may want to install the latest available version, which is what you currently see in the <code>main</code> git branch. Although this method will actually work for any branch with a pretty straightforward change.</p> <p>This kind of installation should only be done if you wish to test some new unreleased features and it's likely that you will encounter bugs.</p> <p>That said, since mcproto is still in development, changes can often be made quickly and it can sometimes take a while for these changes to carry over to PyPI. So if you really want to try out that latest feature, this is the method you'll want.</p> <p>To install the latest mcproto version directly from the <code>main</code> git branch, use:</p> pippoetryrye <pre><code>pip install 'mcproto@git+https://github.com/py-mine/mcproto@main'\n</code></pre> <pre><code>poetry add 'git+https://github.com/py-mine/mcproto#main'\n</code></pre> <pre><code>rye add mcproto --git='https://github.com/py-mine/mcproto' --branch main\n</code></pre>"},{"location":"license/","title":"License","text":"<p>This project is licensed under the GNU Lesser General Public License (LGPL) version 3.</p> <p>The LGPL license allows you to use mcproto as a library pretty much in any code-base, including in proprietary code-bases. However, if you wish to make a derivative project to mcproto itself, such a project will need to be licensed under LGPL as well.</p> Full LICENSE text LICENSE.txt<pre><code>                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n</code></pre> <p>Some parts of the project follow a different license. See the <code>LICENSE-THIRD-PARTY.txt</code> file, which lists all of these parts and their respective licenses</p> Full LICENSE-THIRD-PARTY text LICENSE-THIRD-PARTY.txt<pre><code>---------------------------------------------------------------------------------------------------\n                                            MIT License\nApplies to:\n    - Copyright (c) 2021 Python Discord\n      Copyright (C) 2022 Hassan Abouelela &lt;hassan@hassanamr.com&gt;\n      Copyright (C) 2022 Chris Lovering &lt;chris.lovering.95@gmail.com&gt;\n      Copyright (C) 2022 mbaruh &lt;mbaruh@hotmail.com&gt;\n      All rights reserved.\n        - mcproto/utils/version_map.py: portions of VersionMap._walk_submodules function\n    - Copyright (c) 2020 Nekokatt\n      Copyright (c) 2021-present davfsa\n      All rights reserved.\n        - .github/ISSUE_TEMPLATE/bug_report.yml: Template heavily inspired by original\n        - .github/ISSUE_TEMPLATE/feature_request.yml: Template heavily inspired by original\n        - .github/workflows/fragment-check.yml: Entire file\n        - .github/workflows/prepare-release.yml: Workflow heavily inspired by original\n        - .github/scripts/normalize_coverage.py: Entire file\n        - docs/_static/extra.css: Entire file\n    - Copyright (c) 2015-present Rapptz\n      All rights reserved.\n        - docs/pages/version_guarantees.rst: Entire file\n        - docs/_static/extra.css: Attribute table related config\n        - docs/_static/extra.js: Attribute table related functionality\n        - docs/extensions/attributetable.py: Entire file\n---------------------------------------------------------------------------------------------------\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n---------------------------------------------------------------------------------------------------\n                                 GNU LESSER GENERAL PUBLIC LICENSE\nApplies to:\n    - Copyright (c) 2022, Milo Weinberg &lt;iapetus011@gmail.com&gt;\n      All rights reserved.\n        - mcproto/packets/packet.py: GameState and PacketDirection enum classes\n---------------------------------------------------------------------------------------------------\nFulltext of the license can be seen in the LICENSE.txt file, as it matches the current license of\nthis project, this file just disclaims the copyrighted sections used in our codebase.\n\n---------------------------------------------------------------------------------------------------\n                                    Apache License version 2.0\nApplies to:\n    - Copyright (c) 2012 Ammar Askar\n      All rights reserved.\n        - mcproto/connection.py: write, read methods in all classes (not _write and _read though)\n        - mcproto/encryption.py: encrypt_token_and_secret, generate_shared_secret functions\n---------------------------------------------------------------------------------------------------\n\n\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"version_guarantees/","title":"Version Guarantees","text":"<p>Pre-release phase</p> <p>Mcproto is currently in the pre-release phase (pre v1.0.0). During this phase, these guarantees will NOT be followed! This means that breaking changes can occur in minor version bumps. That said, micro version bumps are still strictly for bugfixes, and will not include any features or breaking changes.</p> <p>This library follows semantic versioning model, which means the major version is updated every time there is an incompatible (breaking) change made to the public API. However due to the fairly dynamic nature of Python, it can be hard to discern what can be considered a breaking change, and what isn't.</p> <p>First thing to keep in mind is that breaking changes only apply to publicly documented functions and classes. If it's not listed in the documentation here, it's an internal feature, that isn't considered a part of the public API, and thus is bound to change. This includes documented attributes that start with an underscore and documented API that is explicitly marked as internal.</p> <p>Note</p> <p>The examples below are non-exhaustive.</p>"},{"location":"version_guarantees/#examples-of-breaking-changes","title":"Examples of Breaking Changes","text":"<ul> <li>Changing the default parameter value of a function to something else.</li> <li>Renaming (or removing) a function without an alias to the old function.</li> <li>Adding or removing parameters of a function.</li> <li>Removing deprecated alias to a renamed function.</li> </ul>"},{"location":"version_guarantees/#examples-of-non-breaking-changes","title":"Examples of Non-Breaking Changes","text":"<ul> <li>Changing function's name, while providing a deprecated alias.</li> <li>Renaming (or removing) private underscored attributes.</li> <li>Adding an element into <code>__slots__</code> of a data class.</li> <li>Changing the behavior of a function to fix a bug.</li> <li>Changes in the typing definitions of the public API.</li> <li>Changes in the documentation.</li> <li>Modifying the internal protocol connection handling.</li> <li>Updating the dependencies to a newer version, major or otherwise.</li> </ul>"},{"location":"contributing/making_a_pr/","title":"Pull Requests","text":"<p>Welcome! If you're interested in contributing to mcproto, you've come to the right place. mcproto is an open-source project, and we welcome contributions from anyone eager to help out.</p> <p>To contribute, you can create a pull request on our GitHub repository. Your pull request will then be reviewed by our maintainers, and once approved, it will be merged into the main repository. Contributions can include bug fixes, documentation updates, or new features.</p> <p>Code quality requirements</p> <p>While we encourage and appreciate contributions, maintaining high code quality is crucial to us. That means you will need to adhere to our code quality standards. Contributions may be rejected if they do not meet these guidelines.</p>"},{"location":"contributing/making_a_pr/#get-assigned-to-the-issue","title":"Get assigned to the issue","text":"<p>The very first thing you will need to do is deciding what you actually want to work on. In all likelihood, you already have something in mind if you're reading this, however, if you don't, you're always free to check the opened GitHub issues. If you find anything interesting there that you'd wish to work on, leave a comment on that issue with something like: \"I'd like to work on this\".</p> <p>Even if you do have an idea already, we heavily recommend (though not require) that you first make an issue, this can be a bug report, but also a feature request, or something else. Once you made the issue, leave a: \"I'd like to work on this\" comment on it.</p> <p>Eventually, a maintainer will get back to you and you will be assigned to the issue. By getting assigned, you reserve the right to work on that given issue and it also prevents us (or someone else) from potentially working on the same thing that you're already addressing. This is also the reason why we recommend creating an issue first. Being assigned is a soft approval from us, giving you the green light to start coding.</p> <p>Of course, you are welcome to start working on the issue even before being officially assigned. However, please be aware that sometimes, we may choose not to pursue a certain feature / bugfix. In such cases, your work might not end up being used, which would be a shame.</p>"},{"location":"contributing/making_a_pr/#work-in-progress-prs","title":"Work in Progress PRs","text":"<p>Whenever you open a pull request that isn't yet ready to be reviewed and merged, you can mark it as a draft. This provides both visual and functional indicator that the PR isn't yet ready to be merged.</p> <p>Methods of marking PR as a draft:</p> When creating it After creation <p>Once your work is done and you think the PR is ready to be merged, mark it as Ready for review</p> <p></p>"},{"location":"contributing/making_a_pr/#contributing-guidelines","title":"Contributing guidelines","text":"<p>In order to make a successful contribution, it is required that you get familiar with our contributing guidelines.</p>"},{"location":"contributing/reporting_a_bug/","title":"Bug reports","text":"<p>Mcproto is an actively maintained project that we constantly strive to improve. With a project of this siez and complexity, bugs may occur. If you think you have discovered a bug, you can help us by submitting an issue to our public issue tracker, following this guide.</p>"},{"location":"contributing/reporting_a_bug/#before-creating-an-issue","title":"Before creating an issue","text":"<p>Before opening a new issue with your bug report, please do the following things:</p>"},{"location":"contributing/reporting_a_bug/#upgrade-to-latest-version","title":"Upgrade to latest version","text":"<p>Chances are that the bug you discovered was already fixed in a subsequent version. Thus, before reporting an issue, ensure that you're running the latest version of mcproto.</p> <p>Bug fixes are not backported</p> <p>Please understand that only bugs that occur in the latest version of mcproto will be addressed. Also, to reduce duplicate efforts, fixes cannot be backported to earlier versions.</p>"},{"location":"contributing/reporting_a_bug/#search-for-existing-issues","title":"Search for existing issues","text":"<p>It's possible that the issue you're having was already reported. Please take some time and search the existing issues in the GitHub repository for your problem. If you do find an existing issue that matches the problem you're having, simply leave a  reaction instead (avoid commenting \"I have this issue too\" or similar, as that ultimately just clutters the discussion in that issue, but if you do think that you have something meaningful to add, please do).</p> <p>Note</p> <p>Make sure to also check the closed issues. By default, github issue search will start with: <code>is:issue is:open</code>, remove the <code>is:open</code> part to search all issues, not just the opened ones. It's possible that we seen this issue before, but closed the issue as something that we're unable to fix.</p>"},{"location":"contributing/reporting_a_bug/#creating-a-new-issue","title":"Creating a new issue","text":"<p>At this point, when you still haven't found a solution to your problem, we encourage you to create an issue. To do so, you can click here.</p>"},{"location":"contributing/reporting_a_bug/#writing-good-bug-reports","title":"Writing good bug reports","text":"<p>We have a GitHub issue template set up, which will guide you towards telling us everything that we need to know. However, for the best results, keep reading through this section. In here, we'll explain how a well formatted issue should look like in general and what it should contain.</p>"},{"location":"contributing/reporting_a_bug/#issue-title","title":"Issue Title","text":"<p>A good title is short and descriptive. It should be a one-sentence executive summary of the issue, so the impact and severity of the bug you want to report can be inferred right from the title.</p> Example Clear Ping packet has incorrect ID Wordy The Ping packet has an incorrect packet ID of 0, when it should be 1 Unclear Ping packet is incorrect Non-english El paquete ping tiene una identificaci\u00f3n incorrecta Useless Help"},{"location":"contributing/reporting_a_bug/#bug-description","title":"Bug description","text":"<p>Now, to the bug you want to report. Provide a clear, focused, specific and concise summary of the bug you encountered. Explain why you think this is a bug that should be reported to us. Adhere to the following principles:</p> <ol> <li>Explain the what, not the how \u2013 don't explain how to reproduce the bug here,    we're getting there. Focus on articulating the problem and its impact as clearly as possible.</li> <li>Keep it short and concise - if the bug can be precisely explained in one or two sentences, perfect. Don't    inflate it - maintainers and future users will be grateful for having to read less.</li> <li>Don't under-explain - don't leave out important details just to keep things short. While keeping things short is    important, if something is relevant, mention it. It is more important for us to have enough information to be able    to understand the bug, even if it means slightly longer bug report.</li> <li>One bug at a time - if you encounter several unrelated bugs, please create separate issues for them. Don't    report them in the same issue, as this makes it difficult for others when they're searching for existing issues and    also for us, since we can't mark such an issue as complete if only one of the bugs was fixed.</li> </ol> <p> Stretch goal \u2013 if you have a link to an existing page that describes the issue, or otherwise explains some of your claims, include it. Usually, this will be a https://wiki.vg link leading to the Minecraft protocol documentation for something.</p> <p> Stretch goal #2 \u2013 if you found a workaround or a way to fix the bug, you can help other users temporarily mitigate the problem before we maintainers can fix the bug in our code base.</p>"},{"location":"contributing/reporting_a_bug/#reproduction","title":"Reproduction","text":"<p>A minimal reproducible example is at the heart of every well-written bug report, as it allows us maintainers to instantly recreate the necessary conditions to inspect the bug and quickly find its root cause from there. It's a proven fact that issues with concise and small reproductions can be fixed much faster.</p> <p>Focus on creating a simple and small code snippet that we can run to see the bug. Do your best to avoid giving us large snippets or whole files just for the purpose of the reproducible example, do your best to reduce the amount of code as much as you can and try to avoid using external dependencies in the snippet (except for mcproto of course).</p> <p>Sometimes, the bug can't be described in terms of code snippets, such as when reporting a mistake in the documentation, in that case, provide a link to the documentation or whatever other relevant that will allows us to see the bug with minimal effort.</p>"},{"location":"contributing/reporting_a_bug/#next-steps","title":"Next steps","text":"<p>Once you submit the issue, the main part of reporting a bug is done, but things aren't completely over yet. You now have 2 choices:</p>"},{"location":"contributing/reporting_a_bug/#wait-for-us-to-get-to-the-problem","title":"Wait for us to get to the problem","text":"<p>If you don't wish to solve the bug yourself, all that remains is waiting for us to handle it.</p> <p>Please understand that we are all volunteers here and we work on the project simply the fun of it. This means that we may sometimes have other priorities in life or we just want to work on some more interesting tasks first. It might therefore take a while for us to get to your bug (don't worry though, in most cases, we're pretty quick). Even if things are slower, we kindly ask you to avoid posting comments like \"Any progress on this?\" as they are not helpful and create unnecessary clutter in the discussion.</p> <p>When we do address your issue, we might need further information from you. GitHub has a notification system, so once we respond, you will be notified there. Note that, by default, these notifications might not be forwarded to your email or elsewhere, so please check GitHub periodically for updates.</p> <p>Finally, when we fix your bug, we will mark the issue as closed (GitHub will notify you of this too). Once that happens, your bug should be fixed, but we appreciate it if you take the time to verify that everything is working correctly. If the issue persists, you can reopen the issue and let us know.</p> <p>Issues are fixed on the main branch</p> <p>Do note that when we close an issue, it means that we have fixed your bug in the <code>main</code> branch of the repository.   That doesn't necessarily mean the fix has been released on PyPI yet, so you might still need to wait for the   next release. Alternatively, you can also try the git installation to   get the project right from that latest <code>main</code> branch.</p>"},{"location":"contributing/reporting_a_bug/#attempt-to-solve-it-yourself","title":"Attempt to solve it yourself","text":"<p>Quote</p> <p>The fastest way to get something done is to avoid waiting on others.</p> <p>If you wish to try and tackle the bug yourself, let us know by commenting on the issue with something like \"I'd like to work on this\". This helps us avoid duplicate efforts and ensures that we don't work on something you're already addressing.</p> <p>Once a maintainer sees your comment, they will assign the issue to you. Being assigned is a soft approval from us, giving you the green light to start working.</p> <p>Of course, you are welcome to start working on the issue even before being officially assigned. However, please be aware that sometimes we choose not to fix certain bugs for specific reasons. In such cases, your work might not end up being used.</p> <p>Before starting your work though, make sure to also read our pull request guide.</p>"},{"location":"contributing/guides/","title":"Contributing guides &amp; guidelines","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/#contributing-guidelines","title":"Contributing Guidelines","text":"<p>This project is fully open-sourced and new contributions are welcome!</p> <p>However know that we value the quality of the code we maintain and distribute, and you will need to adhere to some code quality standards which we define. Your PR may get rejected on the basis of a contributor failing to follow these guidelines.</p>"},{"location":"contributing/guides/#the-golden-rules-of-contributing","title":"The Golden Rules of Contributing","text":"<p>We recommend you adhere to most of these rules in pretty much every project, even if it doesn't require you to. These rules can often make your life much easier, make debugging quicker and keep the commit history cleaner.</p> <ol> <li>Lint before you push. We have multiple code linting rules, which define our general style of the code-base.    These are generally enforced through certain tools, which you are expected to run before every push, and ideally    before every commit. The specifics of our linting will be mentioned later</li> <li>Make great commits. Great commits should be atomic (do one thing only and do it well), with a commit message    explaining what was done, and why. More on this in here.</li> <li>Make an issue before the PR. If you think there's something that should be added to the project, or you    found some issue or something which could be improved, consider making an issue before committing a lot of time to    create a PR. This can help you save a lot of time in case we'd decide that the feature doesn't adhere to our vision    of the project's future, or isn't something which we would be willing/able to maintain. Even though we won't    actively enforce this rule, and for some small obvious features, or bug-fixes making an issue may be an overkill,    for bigger changes, an issue can save you a lot of time implementing something which may not even be wanted in the    project, and therefore won't get accepted.</li> <li>Don't open a pull request if you aren't assigned to the issue. If you want to work on some existing GitHub    issue, it is always better to ask a maintainer to assign you to this issue. If there's already someone assigned to    an issue, consider offering to collaborate with that person, rather than ignoring his work and doing it on your own.    This method can help avoid having multiple people working on the exact same thing at the same time, without knowing    about each other, which will often lead to multiple approaches solving the same thing, only one of which can be    accepted (usually from the person who was originally assigned).</li> <li>Use assets licensed for public use. Whenever a static asset such as images/video files/audio or even code is    added, they must have a compatible license with our projects.</li> <li>Use draft pull requests if you aren't done yet. If your PR isn't ready to be reviewed yet, mark it as draft.    This is further described in this section</li> <li>Follow our Code of Conduct.</li> </ol>"},{"location":"contributing/guides/#project-installation","title":"Project installation","text":"<p>This project uses <code>poetry</code>. It's a tool for managing python virtual environments. If you haven't heard of those, they're essentially a mini installation of python used purely for the project you're working on (as opposed to using a single global python installation for everything, which is prone to conflicts, as different projects might need different versions of the same package). Follow the linked documentation for installation instructions.</p> <p>Once installed, you will want to create a new environment for mcproto, with all of it's dependencies installed. To do that, enter the clonned repository in your terminal, and run:</p> <pre><code>poetry install\n</code></pre> <p>Note that you will want to re-run this command each time our dependencies are updated, to stay in sync with the project.</p> <p>After that, the environment will contain all of the dependencies, including various executable programs, such as <code>basedpyright</code>. One of these executable programs is also <code>python</code>, which is the python interpreter for this environment, capable of interacting with all of the installed libraries.</p> <p>You will now need to make your terminal use the programs from this environment, rather than any global versions that you may have installed, so that you can use the tools in it when working on the project. Some IDEs/editors are capable of doing this for you automatically when you open the project. If yours isn't, you can run:</p> <pre><code>poetry shell\n</code></pre> <p>You can then start your IDE from the terminal, after you ran this command, and it should pick up the python environment created by poetry.</p> <p>You can also just prefix any command with <code>poetry run</code> (e.g. <code>poetry run python</code>) to use the executable from the environment, without activating it, however you will almost always want to activate the environment instead.</p> <p>For more info about poetry, make sure to check their amazing official documentation: <code>https://python-poetry.org/docs/</code>, these include installation instructions, explain how to add new dependencies to the project, or how to remove some, and everything else you'd need to know.</p>"},{"location":"contributing/guides/#style-guide","title":"Style Guide","text":"<p>For clarity and readability, adhering to a consistent code style across the whole project is very important. It is not unusual that style adjustments will be requested in pull requests.</p> <p>It is always a good practice to review the style of the existing code-base before adding something new, and adhere to that established style. That applies even if it isn't the style you generally prefer, however if you think a code style change of some kind would be justified, feel free to open an issue about it and tell us what exactly should be changed, and why you think this change is important. If you want to, you can also ask to be assigned to the issue and work on changing the style in the code-base in your own PR. (Hey you may even get to edit this section!)</p> <p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.</p> <p>However, know when to be inconsistent -- sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask! \u2014 PEP 8, the general Style Guide for Python Code</p>"},{"location":"contributing/guides/#automatic-linting","title":"Automatic linting","text":"<p>As there is a lot of various styling rules we adhere to in our code base, and obviously, describing all of them in a style guide here would just take way too long, and it would be impossible to remember anyway. For that reason, we use automated tools to help us catch any style violation without manual review!</p> <p>Currently, these are the tools we use for code style enforcement:</p> <ul> <li><code>ruff</code>: General python linter, formatter and import sorter</li> <li><code>slotscheck</code>: Enforces the presence of <code>__slots__</code> in classes</li> </ul> <p>You can read more about them individually in the sections below. It is important that you familiarize yourself with these tools, and their standalone usage, but it would of course be very annoying to have to run the commands to run these tools manually, so while there will be instructions on how to do that, you should pretty much always prefer direct IDE/editor integration, which is mentioned here, and make use of pre-commit.</p>"},{"location":"contributing/guides/#ruff-linter-formatter","title":"Ruff linter &amp; Formatter","text":"<p>Ruff is an all-in-one linter &amp; formatter solution, which aims to replace the previously very popular <code>flake8</code> linter, <code>isort</code> import sorter and <code>black</code> formatter. Ruff is faster (written in rust! \ud83e\udd80) and includes most of the popular flake8 extensions directly. It is almost 1:1 compatible with black, which means the way it formats code is pretty much the same, with only some very subtle differences.</p> <p>You can check the ruff configuration we're using in <code>pyproject.toml</code> file, under the <code>[tool.ruff]</code> category (and it's subcategories), you can find the enabled linter rules there, and some more specific configuration, like line length, python version, individual ignored lint rules, and ignored files.</p> <p>To run <code>ruff</code> linter on the code, you can use <code>ruff check .</code> command, while in the project's root directory (from an activated poetry environment, alternatively <code>poetry run ruff .</code>). Ruff also supports some automatic fixes to many violations it founds, to enable fixing, you can use <code>ruff check --fix</code>. This will also run the <code>isort</code> integration.</p> <p>If you find a rule violation in your code somewhere, and you don't understand what that rule's purpose is, <code>ruff</code> evens supports running <code>ruff rule [rule id]</code> (for example <code>ruff rule ANN401</code>). These explanations are in markdown, so I'd recommend using a markdown renderer such as <code>glow</code> (on Arch linux, you can install it with: <code>pacman -S glow</code>) and piping the output into it for a much nicer reading experience: <code>ruff rule ANN401 | glow</code>.</p> <p>To run <code>ruff</code> formatter on the code, you can simply execute <code>ruff format .</code> command (also needs an activated poetry environment). This will automatically format all files in the code-base.</p>"},{"location":"contributing/guides/#slotscheck","title":"Slotscheck","text":"<p>Slotscheck is a utility/linter that enforces the proper use of <code>__slots__</code> in our python classes. This is important for memory-optimization reasons, and it also improves the general performance when accessing/working with attributes of slotted classes.</p> <p>If you're unsure how slots work / what they are, there is a very nice explanation of them in the official python wiki: here.</p> <p>To run slotscheck, you can simply execute <code>slotscheck -m mcproto</code> from an activated poetry environment (or <code>poetry run slotscheck -m mcproto</code>).</p>"},{"location":"contributing/guides/#use-of-__all__","title":"Use of <code>__all__</code>","text":"<p>Consider a python module like the below:</p> <pre><code>import foo\nfrom bar import do_bar\n\n\ndef do_foobar():\n    foo.do_foo()\n    do_bar()\n</code></pre> <p>If someone were to import it with <code>from module_above import *</code>, they'd import <code>foo</code>, <code>do_bar</code> and <code>do_foobar</code>. However that's kind of weird, in most cases, we don't actually want our imports to be included in a wildcard import like this. For that reason, we can define a special variable called <code>__all__</code>, that specifies all of the things that should actually be included with a wildcard import like this.</p> <p>It is our convention to set this variable right below the imports, like this:</p> <pre><code>import foo\nfrom bar import do_bar\n\n__all__ = [\"do_foobar\"]\n\n\ndef do_foobar():\n    foo.do_foo()\n    do_bar()\n</code></pre> <p>With that, we've explicitly specified what functions/classes should be considered a part of this file, and are expected to be imported, with all of the rest being considered private and only used in this file internally. (Though it doesn't mean that the unspecified objects actually can't be imported, it just means they won't be imported with a wildcard <code>*</code> import. So running <code>from module_above import foo</code> would work, even though <code>from module_above import *</code> wouldn't include <code>foo</code>.)</p> <p>Note that generally, in vast majority of cases, wildcard imports shouldn't be used and instead we should be explicit so that we know where our dependencies come from. The actual primary reason we specify <code>__all__</code> in our files is to immediately show which parts of that file should be considered public, and which are internal to the file.</p>"},{"location":"contributing/guides/#docstring-formatting-directive","title":"Docstring formatting directive","text":"<p>The <code>ruff</code> linter uses various rules from the <code>flake8-docstrings</code> rule-set to enforce a specific standardized docstring formatting. However, these rules will only enforce the basic structure of docstrings, and where they need to be specified. In addition to these rules, it is important to mention the rules on the style of the content in the docstrings themselves.</p> <p>Specifically, we follow Sphinx, and the docstrings should be written in the restructuredtext format. Sphinx supports various directives that allow specifying notes, describe how to add citations, references to other functions/documentation, how to add tables and a bunch of other things. You can read up on these guidelines in the official Sphinx documentation: here</p> <p>The use of this style is important, as many editors recognize it, and can show you properly formatted descriptions on functions or other types of objects upon hovering on them. This format is also useful for automatic generation of documentation using Sphinx, as it's much easier and more comfortable to simply add the descriptions for each function directly in the code, than having to replicate it manually in the standalone source code for the project's documentation, and keep it up to date as new changes to the code are introduced. That said, there are some standalone files used for documentation, and these are actually also written in reStructuredText format, so what you'll learn here will carry over to writing / changing those.</p> <p>Below is a quick example that demonstrates some of how this code style can look. This showcases both the general style of our docstrings, and the use of restructuredtext in them. However, it is heavily recommended that you read up on this in the linked documentation, to know what markup is available and how to use it. You can also see a bunch of examples from the existing code in this code-base, if you just want a better quick glance.</p> <pre><code>def donut(a: bool, b: str) -&gt; None:\n    \"\"\"Short one-line description of the function.\"\"\"\n\n\ndef pineapple(a: bool, b: str) -&gt; str:\n    \"\"\"One-line description of the function telling us what it's about.\n\n    Detailed multiline description.\n    This may include the full explanation of how this function should be used.\n\n    We can also have multiple sections like this.\n    For example to include further use instruction with some examples or perhaps\n    with an explanation of how the function works, if it's relevant.\n    \"\"\"\n\n\ndef divide(x: int, y: int) -&gt; int:\n    \"\"\"Add two numbers together.\n\n    :param x: Number 1 (numerator).\n    :param y: Number 2 (denominator).\n    :return: Result of ``x / y`` addition.\n    :raises ZeroDivisionError: If ``y`` is 0.\n    \"\"\"\n\ndef basic_rest(a: bool, b: str) -&gt; None:\n    \"\"\"My funtcion teaches you about some basic reST formatting.\n\n    Some types of text formatting in restructuredtext (reST) are very similar to\n    those supported in markdown, for example, **this text will be bold**, *This\n    text will be emphasised (italic)*.\n\n    One important difference between reST and markdown is the use of double backquotes\n    to include inline code (literals), instead of just a single backquote: ``code``.\n\n    * This is a bulleted list.\n    * It has three items, the second one has a nested list.\n      * This is a nested list.\n      * It has two items.\n    * This is the third item, continuing the parent list.\n\n    1. This is a numbered list\n    2. It has two items.\n\n    #. This is a numbered list\n    #. It has two items too.\n\n    .. versionadded:: 2.5\n    .. deprecated:: 3.1\n       Use :func:`coconut` instead.\n    .. versionremoved:: 4.0\n       The :func:`coconut` is more flexible, and should be used instead.\n       This function will be removed in an upcomming major release.\n    .. note::\n        This is a note directive, it will show up nicely formatted in the\n        documentation.\n    .. warning::\n        This is a warning directive. It may contain some important info about\n        this function, and should be used instead of the note directive, if you're\n        describing some information regarding security.\n    \"\"\"\n\ndef hyperlinks(q: float) -&gt; int:\n    \"\"\"This function teaches you about hyperlinks\n\n    Restructured text also supports hyperlinks. For named links, you can use:\n    `Link text &lt;https://domain.invalid&gt;`_. For inline links, that just show the URL,\n    you can simply use: `&lt;https://domain.invalid&gt;`_.\n\n    You can also separate the link and target definition, like this: `my link`_.\n\n    .. _my link: https://domain.invalid\n\n    .. deprecated: 2.5\n    \"\"\"\n\ndef reference(param: str) -&gt; None:\n    \"\"\"This teaches you about references.\n\n    You will often need to refer to external (or internal) functions, classes or\n    other things in your docstrings. To do so, you can follow this guide:\n\n    * To refer to the parameter/argument that this function takes, simply use ``param``.\n    * To refer to another class, use :class:`MyClass`.\n    * To refer to another function, use :func:`my_func`.\n    * To refer to another method, in the class this method is in, use :meth:`my_method`.\n    * To refer to an attribute of the class this method is in, use :attr:`my_attr`\n    * To refer to a constant, use :const:`FOOBAR`.\n    * To refer to an exception, use :exc:`FoobarError`.\n    * To refer to an object, use :obj:`my_object`.\n\n    If you need to refer to objects defined outside of this file, you can use the\n    fully qualified path to them, like: :class:`my_module.foo.bar.MyClass`. This\n    will show to full path in the documentation too though, if you don't want that,\n    you can also use: :class:`~my_module.foo.bar.MyClass`, which will only show up\n    as ``MyClass`` in the final docs.\n\n    You can also refer to entire modules: :mod:`itertools`. Since ``itertools`` is\n    actually a part of the standard library, sphinx can even produce links that go\n    back to Python's official docs for the ``itertools`` modules.\n\n    You can even refer to PEPs, like the :PEP:`287`.\n\n    .. seealso::\n        This directive can be used to refer to some other documentation or external\n        documents.\n\n        It can be useful to put your references in, instead of just having them in\n        the docstring's text directly.\n\n        One such reference that can be useful here is the Sphinx documentation of the\n        Python Domain, that details all of these modules. An interesting detail about\n        this domain is that it's actually included and used by default, that's why in\n        the documentation, you may see ``:py:func:`` while in these examples, we simply\n        used ``:func:``.\n\n        You can find this documentation\n        `here &lt;https://www.sphinx-doc.org/en/master/usage/domains/python.html&gt;_`\n    \"\"\"\n</code></pre> <p>Another general rule of thumb when writing docstrings is to generally stick to using an imperative mood.</p> <p>Imperative mood is a certain grammatical form of writing that expresses a clear command to do something.</p> <p>Use: \"Build a player object.\" Don't use: \"Returns a player object.\"</p> <p>Present tense defines that the work being done is now, in the present, rather than in the past or future.</p> <p>Use: \"Build a player object.\" Don't use: \"Built a player object.\" or \"Will build a player object.\"</p>"},{"location":"contributing/guides/#type-hinting","title":"Type hinting","text":"<p>PEP 484 formally specifies type hints for Python. You can specify type hints for a function, in addition to just parameter names, allowing you to quickly understand what kind of parameter this is. Most IDEs/editors will even be able to recognize these type hints, and provide auto-completion based on them. For example, if you type hint a parameter as <code>list</code>, an editor can suggest list methods like <code>join</code> or <code>append</code>. Many editors will even show you the type hint on the argument in the function's signature, when you're trying to call it, along with the parameter name making it really easy to understand what you're supposed to pass without even looking at the docstring.</p> <p>For example, an untyped function can look like this:</p> <pre><code>def divide(a, b):\n    \"\"\"Divide the two given arguments.\"\"\"\n    return a / b\n</code></pre> <p>With type-annotations, the function looks like this:</p> <pre><code>def divide(a: int, b: int) -&gt; float:\n    \"\"\"Divide the two given arguments.\"\"\"\n    return a / b\n</code></pre> <p>Thankfully python type-hinting is fairly easy to understand, but if you do want to see some rather interesting resources for a bit more advanced concepts such as type variables or some more complex types like <code>typing.Callable</code>, we've compiled a quick list of really amazing resources about these type hinting practice.</p> <ul> <li>Python documentation from <code>typing</code> library: https://docs.python.org/3/library/typing.html</li> <li>MyPy documentation (very extensive but quite beginner friendly): https://mypy.readthedocs.io/en/stable/</li> <li>Decorator Factory blog about typing: https://decorator-factory.github.io/typing-tips/</li> <li>Typing Generics (advanced): https://itsdrike.com/posts/typing-generics/</li> </ul>"},{"location":"contributing/guides/#enforcing-type-hints-type-checker","title":"Enforcing type hints - Type checker","text":"<p>Even though the type hints can be pretty useful in knowing what the function variables are expected to be and they also provide better auto-completion, if we're not careful, we could soon end up violating our own type specifications, because by default python doesn't enforce these type-hints in any way. To python, they're not much more than comments.</p> <p>To make sure that our code-base really is correct type-wise, we use a tool that looks at the code statically (similarly to a linter), and analyzes the types, finding any inconsistencies. Using a type-checker can be very beneficial, especially to bigger projects, as it can quickly catch mistakes we made based on purely the types, without even having to run the code. So many times, you'll see issues before actually testing things out (with unit-tests, or manually). In a lot of cases, type checkers can even uncover many things that our unit tests wouldn't find.</p> <p>There are many python type-checkers available, the most notable ones being <code>mypy</code> and <code>pyright</code>. We decided to use <code>pyright</code>, because it has great support for many newer typing features. Specifically, this project actually uses <code>basedpyright</code>, which is a fork of pyright, that adds in some extra checks and features from Pylance (vscode extension).</p> <p>Pyright can be used from the terminal as a stand-alone linter-like checker, by simply running <code>basedpyright .</code> (from within an activated virtual environment). But just like with linters, you should ideally just include it into your editor directly. We also run pyright automatically, as a part of pre-commit.</p>"},{"location":"contributing/guides/#pre-commit","title":"Pre-commit","text":"<p>Now that you've seen the linters, formatters, type-checkers and other tools that we use in the project, you might be wondering whether you're really expected to run all of those commands manually, after each change. And of course, no, you're not, that would be really annoying, and you'd probably also often just forget to do that.</p> <p>So, instead of that, we use a tool called <code>pre-commit</code>, which creates a git hook, that will automatically run before each commit you make. That means each time when you make a commit, all of these tools will run over the code you updated, and if any of these linters detects an issue, the commit will be aborted, and you will see which linter failed, and it's output telling you why.</p> <p>To install pre-commit as a git hook all you need to do is to run <code>pre-commit install</code> from an activated poetry environment, installing it into the git repository as a hook running before every commit. That said, you can also run pre-commit without having to install it (or without having to make a commit, even if installed). To do that, simply execute: <code>pre-commit run --all-files</code>. Note that the installed hook will only run the linters on the files that were updated in the commit, while using the command directly will run it on the whole project.</p> <p>You can find pre-commit's configuration the <code>.pre-commit-config.yaml</code> file, where we define which tools should be ran and how. Currently, pre-commit runs ruff linter, ruff formatter, slotscheck and pyright, but also a checker for some issues in TOML/YAML files.</p> <p>Even though in most cases enforcing linting before each commit is what we want, there are some situations where we need to commit some code which doesn't pass these checks. This can happen for example after a merge, or as a result of making a single purpose small commit without yet worrying about linters. In these cases, you can use the <code>--no-verify</code> flag when making a commit, telling git to skip all of the pre-commit hooks and commit normally. You can also only skip a specific hook(s), by setting <code>SKIP</code> environmental variable (e.g. <code>SKIP=basedpyright</code>, or <code>SKIP=ruff-linter,ruff-formatter,slotscheck</code>), the names of the individual hooks are their ids, you can find those in the configuration file for pre-commit.</p> <p>However this kind of verification skipping should be used sparingly. We value a clean history which consistently follows our linting guidelines, and making commits with linting issues only leads to more commits, fixing those issues later. If you really do need to skip the linters though, you should then wait until you create another commit fixing the issues before pushing the code to github, to avoid needlessly failing the automated workflows, which run pre-commit themselves (amongst other things).</p>"},{"location":"contributing/guides/#editor-integration","title":"Editor Integration","text":"<p>Even with pre-commit, it would still be very annoying to have to only run the linters during the commit, because with the amount of rules we have, and especially if you're not used to following many of them, you will make a lot of mistakes. Because of that, we heavily recommend that you integrate these tools into your IDE/editor directly. Most editors will support integration will all of these tools, so you shouldn't have any trouble doing this.</p> <p>If you're using neovim, I would recommend setting up LSP (Language Server Protocol), and installing basedpyright, as it has language server support built into it. Same thing goes with <code>ruff</code>, which has an LSP implementation <code>ruff-lsp</code>. As for slotscheck, there isn't currently any good way to integrate it directly, so you will need to rely on pre-commit, or run it manually. However, slotscheck violations are fairly rare.</p> <p>On vscode, you can simply install the following extensions:</p> <ul> <li>BasedPyright</li> <li>ruff</li> </ul> <p>(Similarly to neovim, there is no extension available for slotscheck, however violations are fairly rare, and it should be enough to have it run with pre-commit.)</p>"},{"location":"contributing/guides/#making-great-commits","title":"Making Great Commits","text":"<p>A well-structured git log is key to a project's maintainability; it provides insight into when and why things were done for future maintainers of the project.</p> <p>Commits should be as narrow in scope as possible. Commits that span hundreds of lines across multiple unrelated functions and/or files are very hard for maintainers to follow. After about a week, they'll probably be hard for you to follow too.</p> <p>Please also avoid making a lot minor commits for fixing test failures or linting errors. Instead, run the linters before you push, ideally with pre-commit.</p> <p>We've compiled a few resources on making good commits:</p> <ul> <li>https://itsdrike.com/posts/great-commits/</li> <li>https://chris.beams.io/posts/git-commit/</li> <li>https://dhwthompson.com/2019/my-favourite-git-commit</li> <li>https://thoughtbot.com/blog/5-useful-tips-for-a-better-commit-message</li> <li>https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html</li> </ul>"},{"location":"contributing/guides/#work-in-progress-prs","title":"Work in Progress PRs","text":"<p>Whenever you add a pull request that isn't yet ready to be reviewed and merged, you can mark it as a draft. This provides both visual and functional indicator that the PR isn't yet ready to be reviewed and merged.</p> <p>This feature should be utilized instead of the traditional method of prepending <code>[WIP]</code> to the PR title.</p> <p>Methods of marking PR as a draft:</p> <ol> <li>When creating it</li> </ol> <p></p> <ol> <li>After it was created</li> </ol> <p></p> <p>For more info, check the GitHub's documentation about this feature here</p>"},{"location":"contributing/guides/#dont-reinvent-the-wheel","title":"Don't reinvent the wheel","text":"<p>We're an open-sourced project, and like most other open-sourced projects, we depend on other projects that already implemented many things which we need in our code. It doesn't make a lot of sense to try and implement everything from the bottom, when there already are perfectly reasonable and working implementations made.</p> <p>In most of the cases, this will mean using some libraries which can simply be added to our project's dependencies which is maintained with poetry, which you can read more about in this section.</p> <p>Libraries aren't the only way to make use of the existing open-source code that's already out there. Another thing which we can often do is simply directly copy open-source code into our project. However always make sure that before even considering to paste someones code into ours, you have the right to do so given to you by the code's author. This could be a directly given permission, but in most of cases, it will be an open-source license allowing anyone to use the code it applies to as long as the conditions of that license are followed.</p> <p>We all stand on the shoulders of giants even just by using the python language. There were some very smart people behind implementing this language or the libraries that our project uses and they deserve the credit for their hard work as their license specifies. To do this, we use the <code>ATTRIBUTION.txt</code> file.</p> <p>This project is released under the LGPL v3 license and this means we can utilize the code of LGPL v3 libraries as well as the permissive licenses (such as MIT, Apache or BSD licenses), it also means that when you contribute to our project, you agree that your contributions may appear on other projects accordingly to the LGPL license (however you may choose to later publish your code under any other license).</p> <p>LGPL v3 is a \"copy-left\" license, which ensures that your code will always remain open-sourced and it will never be relicensed (unless you give your permission as the copyright holder of your code). If for some reason you don't want to contribute under a copy-left license but rather under MIT, or other permissive license, you are free to do so, just mention whatever parts you added in the attribution file with your license's full-text with a copyright notice that includes your name and a link to the original source (if you just made that code up, instead of a link to the original source, you can just include a link to your GitHub profile, or just use your git email address.)</p> <ul> <li>How software licenses work: https://itsdrike.com/posts/software-licenses/</li> <li>GitHub's docs on licenses: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository</li> </ul>"},{"location":"contributing/guides/#changelog","title":"Changelog","text":"<p>It is important for the users to know what has changed in between the release versions, for that reason, we keep a changelog, which is handled by a library called <code>towncrier</code>. Information about how this changelog works in detail is described in it's own file at: <code>./changes/README.md</code>.</p> <p>Do make sure to read this file, as we generally require a changelog fragment file to be added with each pull request. A PR without this file will NOT be accepted (unless there is a reason not to include a changelog - like for minor fixes, or other exceptions).</p>"},{"location":"contributing/guides/#unit-tests","title":"Unit-Tests","text":"<p>To ensure that our project will work correctly with any new changes made to it, we use automated unit-tests which test the individual functions in our code with some sample inputs for correct outputs. Unit-testing is explained in better detail in it's own file at <code>./tests/README.md</code>.</p>"},{"location":"contributing/guides/#deprecations","title":"Deprecations","text":"<p>The removal or rename of anything that is a part of the public API must go through a deprecation process. This will ensure that users won't be surprised when we eventually remove some features, and their code won't end up broken after an update. Instead, a deprecated call should produce a warning about the deprecation, where the user is informed at which version will the accessed object be removed. Until then, the object must have the same old behavior and shouldn't break existing code-bases.</p> <p>The project already contains some internal utilities that can help up mark something as deprecated easily, here's a few quick examples of these utilities in practice:</p> <pre><code># Old version:\nclass Car:\n    def __init__(self, engine_power: int, engine_type: str, fuel_tank_size: int):\n        self.engine_power = engine_power\n        self.engine_type = engine_type\n        self.fuel_tank_size = fuel_tank_size\n\n# New version, with deprecations preventing old code from breaking:\nfrom mcproto.utils.deprecation import deprecated\n\nclass Car:\n    def __init__(self, engine: Engine, fuel_tank_size: int):\n        self.engine = engine\n        self.fuel_tank_size = fuel_tank_size\n\n    @deprecated(removal_version=\"2.0.0\", replacement=\"engine.power\")\n    @property\n    def engine_power(self) -&gt; int:\n        return self.engine.power\n\n    @deprecated(removal_version=\"2.0.0\", replacement=\"engine.type\")\n    @property\n    def engine_power(self) -&gt; int:\n        return self.engine.type\n</code></pre> <pre><code># Old version:\ndef print_value(value: str, add_version: bool) -&gt; None:\n    txt = \"The value \"\n    if add_version:\n        txt += f\"for version {PROJECT_VERSION} \"\n    txt += f\"is: {value}\"\n    print(txt)\n\n# New version, with deprecation\nfrom mcproto.utils.deprecation import deprecation_warn\n\ndef print_value(value: str, add_version: bool = False) -&gt; None:\n    txt = \"The value \"\n    if add_version:\n        deprecation_warn(obj_name=\"add_version argument\", removal_version=\"4.0.0\")\n        txt += f\"for version {PROJECT_VERSION} \"\n    txt += f\"is: {value}\"\n    print(txt)\n\n# New version, after version 4.0.0 (with deprecations removed):\ndef print_value(value: str) -&gt; None:\n    print(f\"The value is: {value}\")\n</code></pre>"},{"location":"contributing/guides/#changes-to-this-arrangement","title":"Changes to this Arrangement","text":"<p>We tried to design our specifications in a really easy and comprehensive way so that they're understandable to everyone, but of course from a point of someone who already has some established standards, they'll usually always think that their standards are the best standards, even though there may actually be a better way to do some things. For this reason, we're always open to reconsidering these standards if there's a good enough reason for it.</p> <p>After all every project will inevitably evolve over time, and these guidelines are no different. This document and the standards it holds are open to pull requests and changes by the contributors, just make sure that this document is always in sync with the codebase, which means that if you want to propose some syntactic change, you also change it everywhere in the codebase so that the whole project will actually follow the newly proposed standards.</p> <p>If you do believe that you have something valuable to add or change, please don't hesitate to do so in a PR (of course, after you opened an issue, as with every proposed feature by a non-core developer).</p>"},{"location":"contributing/guides/#footnotes","title":"Footnotes","text":"<p>This could be a lot to remember at once, but you can use this document as a resource while writing the code for our repository and cross-check that your styling is following our guidelines and that you're practicing the rules that we've set here.</p> <p>This document was inspired by Python Discord's CONTRIBUTING agreement..</p>"},{"location":"contributing/guides/changelog/","title":"Changelog","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/deprecations/","title":"Deprecations","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/great_commits/","title":"Great commits","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/installation/","title":"Installation","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/precommit/","title":"Pre-commit","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/style_guide/","title":"Style Guide","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/type_hints/","title":"Type hinting","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/unit_tests/","title":"Unit Tests","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"}]}