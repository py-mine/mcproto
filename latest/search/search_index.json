{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"MCPROTO"},{"location":"#what-is-mcproto","title":"What is Mcproto","text":"<p>Mcproto is a python library that provides various low level interactions with the Minecraft protocol. It attempts to be a full wrapper around the Minecraft protocol, which means it could be used as a basis for Minecraft bots written in python, or even full python server implementations.</p> <p>Important</p> <p>Mcproto only covers the latest minecraft protocol implementation, updating with each full minecraft release (not including snapshots!). Using mcproto for older versions of minecraft is not officially supported, if you need to do so, you will want to use an older version of mcproto, but note that no bug fixes or features will be backported to these older versions.</p> <p>For more information on versioning and update practices, see our Versioning Practices.</p> <p>Warning</p> <p>This library is still heavily Work-In-Progress, which means a lot of things can still change and some features may be missing or incomplete. Using the library for production applications at it's current state isn't recommended.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>Work In Progress</p> <p>This page is still being worked on, if you have any suggestions for a question, feel free to create an issue on GitHub, or let us know on the development discord server.</p>"},{"location":"faq/#missing-synchronous-alternatives-for-some-functions","title":"Missing synchronous alternatives for some functions","text":"<p>While mcproto does provide synchronous functionalities for the general protocol interactions (reading/writing packets and lower level structures), any unrelated functionalities (such as HTTP interactions with the Minecraft API) will only provide asynchronous versions.</p> <p>This was done to reduce the burden of maintaining 2 versions of the same code. The only reason protocol interaction even have synchronous support is because it's needed for the <code>Buffer</code> class. (See Issue #128 for more details on this decision.)</p> <p>Generally, we recommend that you just stick to using the asynchronous alternatives though, both since some functions only support async, and because async will generally provide you with a more scalable codebase, making it much easier to handle multiple things concurrently.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#pypi-stable-version","title":"PyPI (stable) version","text":"<p>Mcproto is available on PyPI and can be installed like any other python library with:</p>  pip poetry rye uv pdm <pre><code>pip install mcproto\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>poetry add mcproto\n</code></pre> <p>Poetry is an all-in-one solution for Python project management.</p> <pre><code>rye add mcproto\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <pre><code>uv pip install mcproto\n</code></pre> <p>uv is an ultra fast dependency resolver and package installer, written in Rust.</p> <pre><code>pdm add mcproto\n</code></pre> <p>PDM is an all-in-one solution for Python project management.</p>"},{"location":"installation/#latest-git-version","title":"Latest (git) version","text":"<p>Alternatively, you may want to install the latest available version, which is what you currently see in the <code>main</code> git branch. Although this method will actually work for any branch with a pretty straightforward change.</p> <p>This kind of installation should only be done if you wish to test some new unreleased features and it's likely that you will encounter bugs.</p> <p>That said, since mcproto is still in development, changes can often be made quickly and it can sometimes take a while for these changes to carry over to PyPI. So if you really want to try out that latest feature, this is the method you'll want.</p> <p>To install the latest mcproto version directly from the <code>main</code> git branch, use:</p>  pip poetry rye uv pdm <pre><code>pip install 'mcproto@git+https://github.com/py-mine/mcproto@main'\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>poetry add 'git+https://github.com/py-mine/mcproto#main'\n</code></pre> <p>Poetry is an all-in-one solution for Python project management.</p> <pre><code>rye add mcproto --git='https://github.com/py-mine/mcproto' --branch main\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <pre><code>uv pip install 'mcproto@git+https://github.com/py-mine/mcproto@main'\n</code></pre> <p>uv is an ultra fast dependency resolver and package installer, written in Rust.</p> <pre><code>pdm add \"git+https://github.com/py-mine/mcproto@main\"\n</code></pre> <p>PDM is an all-in-one solution for Python project management.</p>"},{"location":"contributing/issue-guide/","title":"Bug Reports &amp; Feature Requests","text":"<p>Mcproto is an actively maintained project, and we welcome contributions in the form of both bug reports and feature requests. This guide will help you understand how to effectively submit an issue, whether it's reporting a bug or proposing a new feature.</p>"},{"location":"contributing/issue-guide/#before-creating-an-issue","title":"Before creating an issue","text":"<p>Before opening a new issue, please do the following things:</p>"},{"location":"contributing/issue-guide/#upgrade-to-latest-version","title":"Upgrade to latest version","text":"<ul> <li>For feature requests: Verify your proposal isn't already implemented</li> <li>For bug reports: Confirm the issue still exists in the latest version</li> </ul> <p>Thus, before reporting an issue, ensure that you're running the latest version of mcproto.</p> <p>Bug fixes are not backported</p> <p>Please understand that only bugs that occur in the latest version of mcproto will be addressed. Also, to reduce duplicate efforts, fixes cannot be backported to earlier versions.</p> <p>Please understand that only bugs that occur in the latest version will be addressed. Also, to reduce duplicate efforts, fixes cannot be backported to earlier versions, except as a hotfix to the latest version, diverging from the not yet finished features, even if already in the <code>main</code> branch.</p> <p>Due to the nature of our versioning, that might mean that if you require an older version of minecraft protocol, you might be stuck with an older, buggy version of this library.</p>"},{"location":"contributing/issue-guide/#search-for-existing-issues","title":"Search for existing issues","text":"<p>It's possible that the issue you're having was already reported. Please take some time and search the existing issues in the GitHub repository for your problem. If you do find an existing issue that matches the problem you're having, simply leave a  reaction instead (avoid commenting \"I have this issue too\" or similar, as that ultimately just clutters the discussion in that issue, but if you do think that you have something meaningful to add, please do).</p> <p>Note</p> <p>Make sure to also check the closed issues. By default, github issue search will start with: <code>is:issue is:open</code>, remove the <code>is:open</code> part to search all issues, not just the opened ones. It's possible that we seen this issue before, but closed the issue as something that we're unable to fix.</p> <p>In case you found a relevant issue, however, it has already been closed as implemented (not as declined / not planned), but the bug / proposed feature is still somehow relevant, don't be worried to drop a comment on this older issue, we will get notifications for those too. That said, if you think there is sufficient new context now, it might also make sense to open a new issue instead, but make sure to at least mention the old issue if you choose this route.</p>"},{"location":"contributing/issue-guide/#creating-a-new-issue","title":"Creating a new issue","text":"<p>At this point, when you still haven't found a solution to your problem, we encourage you to create an issue.</p> <p>We have some issue-templates ready, to make sure that you include all of the necessary things we need to know:</p> <ul> <li>For a bug report, you can click here.</li> <li>For a feature request, you can instead click here.</li> </ul> <p>If you prefer, you can also open a blank issue. This will allow you to avoid having to follow the issue templates above. This might be useful if your issue doesn't cleanly fit into either of these two, or if you prefer to use your own categories and structure for the issue. That said, make please still make sure to include all of the relevant details when you do so.</p>"},{"location":"contributing/issue-guide/#issue-title","title":"Issue Title","text":"<p>First thing you will do after opening a new issue is choosing a title. A good title is short and descriptive. It should be a one-sentence executive summary of the issue, so the impact and severity of the bug or relevance of the feature can be inferred right from the title.</p>"},{"location":"contributing/issue-guide/#example-titles-for-bug-reports","title":"Example titles for bug reports","text":"Example Clear Ping packet has incorrect ID Wordy The Ping packet has an incorrect packet ID of 0, when it should be 1 Unclear Ping packet is incorrect Non-english El paquete ping tiene una identificaci\u00f3n incorrecta Useless Help"},{"location":"contributing/issue-guide/#example-titles-for-feature-requests","title":"Example titles for feature requests","text":"Example Clear Add support for Minecraft 1.20.5 protocol Wordy I think it would be great if we could add the new Minecraft 1.20.5 protocol Unclear New Minecraft version Non-english Agregar compatibilidad con Minecraft 1.20.5 Useless Feature idea"},{"location":"contributing/issue-guide/#body","title":"Body","text":"<p>Generally, the GitHub issue template should guide you towards telling us everything that we need to know. However, for the best results, keep reading through this section. In here, we'll explain how a well formatted issue should look like in general and what it should contain.</p> <p>For more information on what to include though, check out the chapters below:</p> <ul> <li>Writing good bug reports</li> <li>Writing good feature requests</li> </ul>"},{"location":"contributing/issue-guide/#writing-good-bug-reports","title":"Writing good bug reports","text":""},{"location":"contributing/issue-guide/#bug-description","title":"Bug description","text":"<p>Now, to the bug you want to report. Provide a clear, focused, specific and concise summary of the bug you encountered. Explain why you think this is a bug that should be reported to us. Adhere to the following principles:</p> <ol> <li>Explain the what, not the how \u2013 don't explain how to reproduce the bug here,    we're getting there. Focus on articulating the problem and its impact as clearly as possible.</li> <li>Keep it short and concise - if the bug can be precisely explained in one or two sentences, perfect. Don't    inflate it - maintainers and future users will be grateful for having to read less.</li> <li>Don't under-explain - don't leave out important details just to keep things short. While keeping things short is    important, if something is relevant, mention it. It is more important for us to have enough information to be able    to understand the bug, even if it means slightly longer bug report.</li> <li>One bug at a time - if you encounter several unrelated bugs, please create separate issues for them. Don't    report them in the same issue, as this makes it difficult for others when they're searching for existing issues and    also for us, since we can't mark such an issue as complete if only one of the bugs was fixed.</li> </ol> <p> Stretch goal \u2013 if you have a link to an existing page that describes the issue, or otherwise explains some of your claims, include it. Usually, this will be a https://minecraft.wiki link leading to the Minecraft protocol documentation for something.</p> <p> Stretch goal #2 \u2013 if you found a workaround or a way to fix the bug, you can help other users temporarily mitigate the problem before we maintainers can fix the bug in our code base.</p>"},{"location":"contributing/issue-guide/#reproduction","title":"Reproduction","text":"<p>A minimal reproducible example is at the heart of every well-written bug report, as it allows us maintainers to instantly recreate the necessary conditions to inspect the bug and quickly find its root cause from there. It's a proven fact that issues with concise and small reproductions can be fixed much faster.</p> <p>Focus on creating a simple and small code snippet that we can run to see the bug. Do your best to avoid giving us large snippets or whole files just for the purpose of the reproducible example, do your best to reduce the amount of code as much as you can and try to avoid using external dependencies in the snippet (except for mcproto of course).</p> How to include code-snippets (markdown) <p>In case you're not yet familiar with the syntax, GitHub issues use <code>markdown</code> format, which means you can use some nice custom formatting to make the text appear distinct. One of these formatting options is a source-code block / code snippet. To include one, you will want to use the following syntax:</p> <pre><code>```language\nyour code\nit can be multiline\n```\n</code></pre> <p>Note that the symbols used here aren't single quotes (<code>'</code>), they're backticks: <code>`</code>. On an english keyboard, you can type these using the key right below escape (also used for tildes: <code>~</code>).</p> <p>The <code>language</code> controls how the code will be highlighted. For python, you can use <code>python</code>, for yaml, <code>yaml</code>, etc.</p> <p>Sometimes, the bug can't be described in terms of code snippets, such as when reporting a mistake in the documentation. In that case, provide a link to the documentation or whatever other relevant things that will allows us to see the bug with minimal effort. In certain cases, it might even be fine to leave the reproduction steps section empty.</p>"},{"location":"contributing/issue-guide/#writing-good-feature-requests","title":"Writing good feature requests","text":""},{"location":"contributing/issue-guide/#feature-description","title":"Feature description","text":"<p>Clearly describe the feature you would like to see. Explain why this feature would be useful and how it would benefit the project and its users. Consider the following:</p> <ol> <li>Problem first - Explain the problem you are facing (if any) that this feature would solve.</li> <li>Proposed solution - Then, explain your proposed solution.</li> <li>Alternatives considered - If you've considered alternative approaches, mention them and explain why you prefer    your proposal.</li> <li>Relation to existing features - If the feature is an enhancement to an existing feature, mention that and    explain how it extends or improves the current functionality.</li> <li>Scope - Try to keep the feature request focused on one specific feature. If you have multiple feature ideas,    open separate issues.</li> </ol> <p> Stretch goal - If you have a link to the Minecraft protocol documentation or a related resource that supports your feature request, include it.</p> <p> Stretch goal #2 - If you are willing to implement the feature yourself, mention that. Even if you don't plan to implement it, you might suggest a high-level approach to the implementation, or a temporary workaround to achieve this before we implement the feature natively into the library.</p>"},{"location":"contributing/issue-guide/#next-steps","title":"Next steps","text":"<p>Once the issue is submitted, you have 2 options:</p>"},{"location":"contributing/issue-guide/#wait-for-us-to-address-it","title":"Wait for us to address it","text":"<p>We will try to review your issue as soon as possible. Please be patient though, as this is an open-source project maintained by volunteers, who work on it simply for the fun of it. This means that we may sometimes have other priorities in life or we just want to work on some more interesting tasks first. It might therefore take a while for us to get to your issue, but we try and do our best to respond reasonably quickly, when we can. Even when things are slower, we kindly ask you to avoid posting comments like \"Any progress on this?\" as they are not helpful and only create unnecessary clutter in the discussion.</p> <p>When we do address your issue, we might need further information from you. GitHub has a notification system, so once we respond, you will be notified there. Note that, by default, these notifications might not be forwarded to your email or elsewhere, so please check GitHub periodically for updates.</p> <p>Finally, when we address your issue, we will mark the issue as closed (GitHub will notify you of this too). Once that happens, your bug should be fixed / feature implemented, but we appreciate it if you take the time to verify that everything is working correctly. If something is still wrong, you can reopen the issue and let us know.</p> <p>Issues are fixed on the main branch</p> <p>Do note that when we close an issue, it means that we have fixed your bug in the <code>main</code> branch of the repository.   That doesn't necessarily mean the fix has been released on PyPI yet, so you might still need to wait for the next   release. Alternatively, you can also try the git installation to get the project right from that latest <code>main</code>   branch.</p>"},{"location":"contributing/issue-guide/#attempt-to-solve-it-yourself","title":"Attempt to solve it yourself","text":"<p>Quote</p> <p>The fastest way to get something done is to avoid waiting on others.</p> <p>If you wish to try and tackle the bug yourself, let us know by commenting on the issue with something like \"I'd like to work on this\". This helps us avoid duplicate efforts and ensures that we don't work on something you're already addressing.</p> <p>Once a maintainer sees your comment, they will assign the issue to you. Being assigned is a soft approval from us, giving you the green light to start working.</p> <p>Of course, you are welcome to start working on the issue even before being officially assigned. However, please be aware that sometimes we choose not to fix certain bugs for specific reasons. In such cases, your work might not end up being used.</p> <p>Discuss major changes before coding</p> <p>If proposing significant new functionality or architectural changes:</p> <ol> <li>Outline your approach in the issue comments</li> <li>Wait for design approval before implementation</li> </ol> <p>This applies to both feature requests and complex bug fixes. We want to prevent situations where implementations can't be merged due to unforeseen design constraints, leading to wasted time.</p> <p>Before starting your work though, make sure to also read our pull request guide.</p>"},{"location":"contributing/making-a-pr/","title":"Pull Requests","text":"<p>Welcome! If you're interested in contributing to mcproto, you've come to the right place. Mcproto is an open-source project, and we welcome contributions from anyone eager to help out.</p> <p>To contribute, you can create a pull request on our GitHub repository. Your pull request will then be reviewed by our maintainers, and once approved, it will be merged into the main repository. Contributions can include bug fixes, documentation updates, or new features.</p> <p>Code quality requirements</p> <p>While we encourage and appreciate contributions, maintaining high code quality is crucial to us. That means you will need to adhere to our code quality standards. Contributions may be rejected if they do not meet these guidelines.</p>"},{"location":"contributing/making-a-pr/#get-assigned-to-the-issue","title":"Get assigned to the issue","text":"<p>The very first thing you will need to do is decide what you actually want to work on. In all likelihood, you already have something in mind if you're reading this, however, if you don't, you're always free to check the opened GitHub issues, that don't yet have anyone assigned. If you find anything interesting there that you'd wish to work on, leave a comment on that issue with something like: \"I'd like to work on this\".</p> <p>Even if you do have an idea already, we heavily recommend (though not require) that you first make an issue, this can be a bug report, but also a feature request, or something else. Once you made the issue, leave a: \"I'd like to work on this\" comment on it.</p> <p>Eventually, a maintainer will get back to you and you will be assigned to the issue. Being assigned is a soft approval from us, giving you the green light to start coding. By getting assigned, you also reserve the right to work on that given issue, hence preventing us (or someone else) from potentially working on the same thing, wasting ours or your time. This prevention of duplicate efforts is also the primary reason why we recommend creating an issue first.</p> <p>Of course, you are welcome to start working on the issue even before being officially assigned. However, please be aware that sometimes, we may choose not to pursue a certain feature / bugfix. In such cases, your work might not end up being used, which would be a shame.</p> <p>Minor tasks don't need an issue</p> <p>While we generally do encourage contributors to first create an issue and get assigned to it first. If you're just fixing a typo, improving the wording, or making some minor optimizations to the code, you can safely skip this step.</p> <p>The point of encouraging issues is to prevent needlessly wasting people's time. However, with these minor tasks, it might actually take you longer to create a full issue about the problem than it would to just submit a fix.</p> <p>There's therefore no point in cluttering the issue tracker with a bunch of small issues that can often be changed in just a few minutes.</p>"},{"location":"contributing/making-a-pr/#pull-request-body","title":"Pull Request Body","text":"<p>A well-written PR description is one of the most helpful things you can provide as a contributor. It gives reviewers the context they need to understand what you're doing and why. It also serves as a long-form explanation for future readers, including users checking the changelog and digging deeper into a change.</p> <p>We don\u2019t require any strict format here. You\u2019re free to write your PR description however you like, but good descriptions usually do the following:</p> <ul> <li>Link to related issues. Use GitHub's closing keywords if your PR addresses a specific   issue, or if it just touches it, mention it (e.g. <code>See also: #29, #65</code>).</li> <li>Describe the change in a self-contained way. Your PR body should explain the change well enough that someone   doesn\u2019t need to read the diff to understand the big picture.</li> <li>Don't repeat what's in the issue. If you're implementing something that was already well discussed within an   issue, you don't need to write much, just refer the reader to the issue.</li> <li>Note anything that affects usage, behavior, or compatibility. This includes breaking changes, deprecations, or   changes that might not be obvious to downstream users. These should be well described within the PR body to make it   clear exactly what changes were made when it comes to these areas. (Even if you'll repeat yourself a little in the PR   body and the changelog fragment, this should be noted down.)</li> <li>Be concise but complete. You don\u2019t need to write paragraphs and paragraphs. Just aim for enough clarity that a   reasonably informed reader understands what this PR is about and what it changes just from the PR body.</li> <li>Explain why the change was made, not just what changed. This helps the reviewer and future readers understand   the motivation.</li> <li>Mention non-obvious implementation choices. Sometimes, we end up implementing a feature in a slightly odd way, to   address a specific problem. This problem might be obvious when trying to implement it in the more obvious way, but it   might not be so obvious to a reviewer. Mention these choices and your reasoning when this happens.</li> <li>Include a summary if your body is long. Sometimes, you will end up needing more space to explain your thought   process and various nuances of the implementation you went with, that's okay, but in these cases, it's helpful to add   a TL;DR / summary section.</li> </ul> <p>Some helpful tips:</p> <ul> <li>It's usually better to write a few short paragraphs than a giant bullet list.</li> <li>Use markdown formatting if it helps readability (e.g., block quotes for warnings or compatibility notes, headings for   splitting things up, bullet points, etc.).</li> <li>If relevant, add links to documentation or specs.</li> <li>Try to avoid using code blocks unless really needed.</li> <li>If your PR is exploratory, experimental, or needs discussion before merge, say so.</li> </ul> Example PR bodies PR 1PR 2PR 3 <p>Title: Fix moving desync when crossing chunk boundary</p> <p>Body:</p> <pre><code>Fixes: #123\n\nCorrects a critical desync issue occurring when players move across chunk boundaries.\n\nThis adjusts the `ClientboundPlayerPosition` packet encoding and adding a velocity compensation threshold. It\nalso includes new tests to cover edge cases at various movement speeds.\n</code></pre> <p>Title: Introduce support for encryption handling.</p> <p>Body:</p> <pre><code>Resolves #456\nSee: &lt;https://minecraft.wiki/w/Java_Edition_protocol/Encryption&gt;\n\nThis adds `enable_encryption` method to our connection classes, which once called, will automatically\nencrypt/decrypt any incoming/outgoing data.\n\n**Breaking change:** `LoginEncryptionRequest` public key attribute is now an instance of an RSA public key (from\nthe `cryptography` library), instead of just holding the received bytes.\n\n## Reasoning\n\nMost servers (even offline ones) usually send an `EncryptionRequest` packet during the LOGIN state, with a\npublic (RSA) key that the client is expected to use to encrypt a randomly generated shared secret, to send back\nto the server in `EncryptionResponse` packet. After that, all further communication is encrypted with this\nshared secret.\n\nThe encryption used is a `AES/CFB8` stream cipher. That means the encrypted ciphertext will have the same amount\nof bytes as the original plaintext, allowing us to still trust our reader/writer methods that rely on reading\nspecific amounts of bytes, even if their content don't make sense.\n</code></pre> <p>Title: Restructure the project for new versioning approach</p> <p>Body:</p> <pre><code>This PR resolves #45, and restructures the entire project to no longer support multiple minecraft protocol\nversions, moving to a single (latest) version model.\n\nNote that **this is a completely breaking change, and there will NOT be a deprecation period**. This is because\nof how this change impacts the rest of the project development. As this project is still in pre-release stage,\ndeprecation here would greatly slow down any further development here, forcing contributors to maintain both the\ntemporary deprecation layer, and the new single-version one.\n\nFor more details on how this change will affect the project going forward, and why it is necessary, I'd suggest\nchecking out #45, containing a detailed explanation.\n\nI have updated the README examples which now use this new version, so I'd suggest checking that out before\nmoving forward with trying out this version, or reviewing the code, as it demonstrates how this new approach\nwill work. Note that when testing this version out, it will almost certainly break any existing code-bases using\nmcproto, checking the README changes and looking at the changelog fragment message should make it clear on how\nto update.\n\n---\n\nSome decisions I made here, which I find potentially worth considering during a review. I'm open to doing these\ndifferently:\n\n- The `generate_packet_map` function is dynamic - imports the appropriate libraries on function run, depending\n  on the requested packets. The alternative here would be to simply hard-code packet maps dictionaries as\n  constants. This could be done either in the new `packet_map.py` file, but also in the individual game state\n  folders for the packets, such as `mcproto.packets.login import CLIENTBOUND_MAP`.\n- The `generate_packet_map` uses caching, to avoid needlessly re-importing the modules and walking over all of\n  the packets again. The clear downside of this is the fact that it uses more memory, though that's almost\n  irrelevant as packet maps are relatively small.\n- Because of how caching works, since we're returning a mutable dictionary from `generate_packet_map`, the cache\n  would hold the same reference as the returned dict, potentially causing issues if the user modifies that\n  returned dict. ~~For this reason, I decided to also add another decorator, responsible for copying the result\n  afterwards, making sure that the cache holds a different instance of the dictionary, and what users see is\n  simply a copy of this instance, which they can modify or do whatever they wish with, without risking breaking\n  future calls to this function.~~ For this reason, the function will now only return a mapping proxy, which is\n  immutable, and holds a strong reference to the dict internally (as suggested by @Martysh12).\n</code></pre>"},{"location":"contributing/making-a-pr/#work-in-progress-prs","title":"Work in Progress PRs","text":"<p>Whenever you open a pull request that isn't yet ready to be reviewed and merged, you can mark it as a draft. This provides both visual and functional indicator that the PR isn't yet ready to be merged.</p> <p>Methods of marking PR as a draft:</p> When creating it After creation <p>Once your work is done and you think the PR is ready to be merged, mark it as Ready for review</p> <p></p>"},{"location":"contributing/making-a-pr/#contributing-guidelines","title":"Contributing guidelines","text":"<p>In order to make a successful contribution, it is required that you get familiar with our contributing guidelines.</p>"},{"location":"contributing/making-a-pr/#automated-checks","title":"Automated checks","text":"<p>The project includes various CI workflows that will run automatically for your pull request after every push and check your changes with various tools. These tools are here to ensure that our contributing guidelines are met and ensure good code quality of your PR.</p> <p>That said, you shouldn't rely on these CI workflows to let you know if you made a mistake, instead, you should run these tools on your own machine during the development. Many of these tools can fix the violations for you automatically and it will generally be a better experience for you. Running these tools locally will also prevent a bunch of \"Fix the CI\" commits, which just clutter the git history.</p> <p>Make sure to read our contributing guidelines thoroughly, as they describe how to use these tools and even how to have them run automatically before each commit, so you won't forget.</p> <p>Passing the CI workflows is a requirement in order to get your pull request merged. If a maintainer sees a PR that's marked as ready for review, but isn't passing the CI, we'll often refrain from even reviewing it, as we consider it incomplete. If you have a technical reason why your PR can't pass the CI, let us know in the PR description or a comment.</p>"},{"location":"contributing/making-a-pr/#code-review","title":"Code Review","text":"<p>All pull requests will need to be reviewed by at least one team member before merging. The reviewer will provide feedback and suggestions for improvement.</p> <p>Once a reviewer approves your pull request, it can be merged into the <code>main</code> branch.</p> How do I request a review? <p>Request a review from a team member by assigning them as a reviewer to your pull request.</p> <p>However, you can also just wait until we get to your PR, you don't need to assign a reviewer unless you want someone specific to review. Just make sure that your PR is marked as ready for review and not draft.</p>"},{"location":"contributing/making-a-pr/#giving-feedback","title":"Giving Feedback","text":"<p>If you wish, you can also provide some feedback on other PRs. Doing so is a great way to fill the time while you're waiting for your PR to be reviewed by us and you're also speeding up the process, as it reduces the amount of time we'd have to spend reviewing those other PRs before getting to yours.</p> <p>When reviewing a pull request, aim to be constructive and specific. Highlight areas that need improvement and suggest potential solutions. If you have any questions or concerns about something in the code, don't hesitate to ask the author for clarification.</p> <p>Focus on the following aspects during a code review:</p> <ul> <li>Correctness and functionality</li> <li>Code quality and readability</li> <li>Adherence to the project guidelines</li> </ul> Good Code Review Feedback <p>Here are some examples of a good code review feedback:</p> <pre><code>- Great work on the new function! The implementation looks good overall.\n- The tests cover most of the functionality, but it's are missing a test case for edge case X. Could you add a test for that?\n- The logic in the new function is somewhat complex. Consider breaking it into smaller functions for better clarity.\n- The new feature is well-implemented, but it would be great to add more inline comments to explain the logic, as\n  it isn't trivial to understand.\n- There's a small typo in the docstring. Could you correct it?\n- The configuration settings are hard-coded. Can you move them to a configuration file to make it easier to manage?\n</code></pre> <p>Always be respectful and considerate when giving feedback. Remember that the goal is to improve the code and help the author grow as a developer.</p> <p>Be Positive</p> <p>Don't forget to acknowledge the positive aspects of the contribution as well!</p>"},{"location":"contributing/security-policy/","title":"Security Policy","text":""},{"location":"contributing/security-policy/#reporting-security-vulnerabilities","title":"Reporting Security Vulnerabilities","text":"<p>We urge you not to file a bug report in the GitHub issue tracker, since they are open for anyone to see</p> <p>Instead, we encourage you to reach out to the maintainer team so we can assess the problem and later disclose it responsibly.</p> <p>To do so, you can use the <code>Security</code> tab and file a bug report there </p> <p>Alternatively, you can also reach out to the maintainer team directly. If you prefer this approach, you can contact one of the people below:</p> <ul> <li>ItsDrike (project maintainer and owner)<ul> <li>Email: <code>itsdrike@protonmail.com</code></li> <li>Discord: <code>ItsDrike</code> (however you will need to join the py-mine discord too,     as I might not answer to message requests from people I don't share a server with.)</li> </ul> </li> </ul>"},{"location":"contributing/guides/","title":"Contributing guides &amp; guidelines","text":"<p>Welcome to the contributing guides &amp; guidelines for mcproto. This documentation is intended for our contributors, interested in writing or modifying mcproto itself. If you just wish to use mcproto in your project, you can safely skip this section.</p> <p>Mcproto is a relatively large project and maintaining it is no easy task. With a project like that, consistency and good code quality become very important to keep the code-base readable and bug-free. To achieve this, we have put together these guidelines that will explain the code style and coding practices that we expect our contributors to follow.</p> <p>This documentation will also include various guides that tell you how to set up our project for development and explain the automated tools that we use to improve our coding experience and enforce a bunch of the code style rules quickly and without the need for human review.</p>"},{"location":"contributing/guides/#the-golden-rules-of-contributing","title":"The Golden Rules of Contributing","text":"<p>These are the general rules which you should follow when contributing. You can glance over these and then go over the individual guides one by one, or use the references in these rules to get to the specific guide page explaining the rule.</p> <p>Note</p> <p>This list serves as a quick-reference rather than a full guide. Some of our guidelines aren't directly linked in these references at all and we heavily encourage you to go over each of the guide pages in the order they're listed in the docs.</p> <ol> <li>Lint before you push. We have multiple code linting rules, which define our general style of the code-base.    These are often enforced through certain tools, which you are expected to run before every push and ideally even    before every commit. The specifics of our linting rules are mentioned in our style guide. Running all of these    tools manually before every commit would however be quite annoying, so we use pre-commit.</li> <li>Make great commits. Great commits should be atomic (do one thing only and do it well), with a commit message    that explaining what was done, and why. More on this here.</li> <li>Make an issue before the PR. Before you start working on your PR, open an issue and let us know what you're    planning. We described this further in our making a PR guide.</li> <li>Use assets licensed for public use. Whenever you're adding a static asset (e.g. images/video files/audio or    even code) that isn't owned/written by you, make sure it has a compatible license with our projects.</li> <li>Follow our Code of Conduct</li> </ol>"},{"location":"contributing/guides/#changes-to-these-guidelines","title":"Changes to these guidelines","text":"<p>While we're confident and happy with the current code style and tooling, we acknowledge that change is inevitable. New tools are constantly being developed, and we have already made significant updates to our code style in the past.</p> <p>Every project evolves over time, and these guidelines are no exception. This documentation is open to pull requests and changes from contributors. Just ensure that any updates to this document are in sync with the codebase. If you propose a code style change, you must apply that change throughout the codebase to maintain internal consistency.</p> <p>If you believe you have something valuable to add or change, please submit a pull request. For major style changes, we strongly encourage you to open an issue first, as we may not always agree with significant alterations. For minor clarity improvements or typo fixes, opening an issue isn't necessary.</p> <p>We tried to design our specifications to be straightforward and comprehensive, but we might not always succeed, as we're doing so from our perspective of already having extensive background knowledge. Therefore, we welcome any clarity improvements to the documentation. If you think you can explain something better, please contribute.</p>"},{"location":"contributing/guides/#footnotes","title":"Footnotes","text":"<p>We understand that going through all of these guidelines can be time-consuming and a lot to remember. However, we strongly encourage you to review them, especially if you haven't worked with these tools or followed such best practices before.</p> <p>Tip</p> <p>Every page in this contributing guides category has an abstract at the top, summarizing its content. This allows you to quickly determine if you are already familiar with the topic or, if you're re-reading, to quickly recall what the page covers. Feel free to skip any guide pages if you're already familiar with what they cover.</p> <p>We believe these guides will be beneficial to you beyond our codebase, as they promote good coding practices and help make your code cleaner. You will likely be able to apply much of the knowledge you gain here to your own projects.</p>"},{"location":"contributing/guides/#disclaimer","title":"Disclaimer","text":"<p>These documents were inspired by Python Discord's CONTRIBUTING agreement.</p>"},{"location":"contributing/guides/api-reference/","title":"Writing API reference","text":"Abstract <p>This page contains the guide on documenting the code that will appear in the API reference section of this documentation. It goes over the technology and libraries that we use to generate this API reference docs, details the docstring style we use, mentions how to add something into the API reference (like new modules) and details what should and shouldn't be documented here.</p> <p>As was already briefly mentioned in the documentation section, we're using mkdocstrings, which is an extension of <code>mkdocs</code> that is able to automatically generate documentation from the source code.</p> <p>Well, we're using <code>mkdocstrings</code>, but internally, the python handler for <code>mkdocstrings</code> is using <code>griffe</code>, which is the tool responsible for actually analyzing the source code and collecting all the details.</p> <p>As you might imagine though, in order to allow <code>griffe</code> to automatically pick up information about our codebase, it's necessary to actually include this information into the code, as you're writing it. It's also important to use a consistent style, that <code>griffe</code> can understand.</p> <p>In our case, we use the Google style for writing docstrings.</p>"},{"location":"contributing/guides/api-reference/#google-style-docstrings-formatting","title":"Google Style docstrings formatting","text":"<p>While you should ideally just read over the official specification (don't worry, it's actually quite readable; well, other than the white theme), you can also take a quick glance through some of these examples below, that quickly demonstrate the style.</p> <pre><code>def deal_damage(entity: Entity, damage: int) -&gt; None:\n    \"\"\"Deal damage to specified entity.\n\n    Args:\n        entity: The entity to deal damage to\n        damage: The amount of damage to deal.\n\n    Note:\n        This might end up killing the entity. If this does occur\n        a death message will be logged.\n    \"\"\"\n    entity.hp -= damage\n    if entity.hp &lt;= 0:\n        print(f\"Entity {entity.name} died.\")\n\n\ndef bake_cookie(flavor: str, temperature: int = 175) -&gt; str:\n    \"\"\"Bake a delicious cookie.\n\n    This function simulates the process of baking a cookie with the given flavor.\n\n    Args:\n        flavor: The type of cookie to bake. Must be a valid flavor.\n        temperature: The baking temperature in Celsius.\n            Defaults to 175.\n\n    Returns:\n        A string confirming that the cookie is ready.\n\n    Raises:\n        ValueError: If the flavor is unknown.\n        RuntimeError: If the oven temperature is too high and the cookie burns.\n    \"\"\"\n    valid_flavors = {\"chocolate chip\", \"oatmeal\", \"peanut butter\", \"sugar\"}\n    if flavor not in valid_flavors:\n        raise ValueError(f\"Unknown flavor: {flavor}\")\n\n    if temperature &gt; 500:\n        raise RuntimeError(\"Oven overheated! Your cookie is now charcoal.\")\n\n    return f\"Your {flavor} cookie is baked at {temperature}\u00b0F and ready to eat!\"\n\n\nclass Cat:\n    \"\"\"A simple representation of a cat.\n\n    Attributes:\n        name: The name of the cat.\n        age: The age of the cat in years.\n        is_hungry: Whether the cat is hungry.\n    \"\"\"\n\n    def __init__(self, name: str, age: int):\n        \"\"\"Initialize a cat with a name and age.\n\n        Args:\n            name: The name of the cat.\n            age: The age of the cat in years.\n        \"\"\"\n        self.name = name\n        self.age = age\n        self.is_hungry = True # a new cat is always hungry (duh!)\n\n    def purr(self) -&gt; str:\n        \"\"\"Make the cat purr.\"\"\"\n        return \"Purr... Purr...\"\n\n    def meow(self) -&gt; str:\n        \"\"\"Make the cat meow.\n\n        Returns:\n            A string representing the cat's meow.\n        \"\"\"\n        return f\"{self.name} says 'Meow!'\"\n\n    def feed(self) -&gt; None:\n        \"\"\"Feed the cat.\n\n        Once fed, the cat will no longer be hungry.\n        \"\"\"\n        self.is_hungry = False\n\nDEFAULT_HP = 500\n\"\"\"This is the default value for the amount of health points that each entity will have.\"\"\"\n</code></pre> <p>Further reading</p> <ul> <li>Like mentioned above, you can take a look over the official Google style guide   spec</li> <li>Griffe also has a docstring recommendations   page, where you can find a bunch   of examples that showcase the various places where you can use docstrings.</li> <li>On top of the general docstring recommendations, griffe also has a bit more detailed reference   page that further demonstrates some of   the things that will and won't work.</li> </ul>"},{"location":"contributing/guides/api-reference/#cross-references","title":"Cross-References","text":"<p>If you need to refer to some object (function/class/attribute/...) from you docstring, you will need to follow the mkdocstrings cross-references syntax. Generally, it will look something like this:</p> mcproto/module_b.py<pre><code>from mcproto.module_a import custom_object\n\ndef bar(obj): ...\n\ndef foo():\n    \"\"\"Do the foo.\n\n    This function does the foo by utilizing the [`bar`][mcproto.module_b.bar] method,\n    to which the [`custom_object`][mcproto.module_a.custom_object] is passed.\n    \"\"\"\n    bar(custom_object)\n</code></pre> <p>The references need to point to an object that is included in the docs (documented in API reference pages).</p>"},{"location":"contributing/guides/api-reference/#relative-cross-references","title":"Relative Cross-References","text":"<p>While relative cross-references are supported by mkdocstrings, they are gated for sponsors only, at least until a funding goal is reached.</p> <p>For that reason, we're using an alternative handler to <code>mkdocstrings-python</code>: <code>mkdocstrings-python-betterrefs</code>. This handler uses <code>mkdocstrings-python</code> internally, while extending it to provide support for relative cross-references.</p> <p>To use relative cross-references, check the mkdocstrings-python-xref documentation.</p>"},{"location":"contributing/guides/api-reference/#writing-api-reference_1","title":"Writing API Reference","text":"<p>On top of just learning about how to write docstrings, you will need to understand how to write the docs for the API reference. Currently, most of our API reference docs work by simply recursively including the whole module, so you likely won't need to touch it unless you're adding new modules (files). That said, sometimes, it might be useful to document something from the docs directly, rather than just from docstrings.</p> <p>Rather than rewriting what's already really well explained, we'll instead just point you towards the mkdocstrings documentation.</p>"},{"location":"contributing/guides/api-reference/#what-to-document","title":"What to document","text":"<p>Finally, before including something into the docs, make sure it makes sense as a part of your Public API. When deciding this, you might find this Griffe guide to be helpful.</p>"},{"location":"contributing/guides/breaking-changes/","title":"Breaking changes &amp; Deprecations","text":"Abstract <p>This page describes how we handle breaking changes and deprecations in the project. It clarifies what is a breaking change, what is a deprecation, how to mark something as deprecated and explains when a function should be deprecated. Finally, it mentions how to properly communicate breaking chagnges and deprecations to end users.</p> <p>Pre-Requisites</p> <p>Before reading this page, make sure to familiarize yourself with our versioning model</p>"},{"location":"contributing/guides/breaking-changes/#what-is-a-breaking-change","title":"What is a breaking change","text":"<p>A breaking change is a modification that requires developers to adjust their code due to alterations that break previously working functionality. This includes changes such as altering method signatures, changing return types, or removing classes or functions without prior warning.</p> <p>We follow semantic versioning to manage breaking changes. That means, major version increments (e.g., from <code>3.x.x</code> to <code>4.0.0</code>) indicate breaking changes. It\u2019s essential that users can rely on minor and patch versions (e.g., <code>3.1.0</code> or <code>3.0.1</code>) being backwards-compatible with the first major release (<code>3.0.0</code>).</p> <p>When introducing changes, aim to implement them in a non-breaking way. Breaking changes should be avoided whenever possible. If a breaking change is absolutely necessary, strive to transition gradually through deprecations.</p> <p>Refer to the versioning model page for some examples of what constitutes a breaking change.</p>"},{"location":"contributing/guides/breaking-changes/#what-is-a-deprecation","title":"What is a deprecation","text":"<p>A deprecation signals that a particular part of the code (commonly a function, class, or argument) should no longer be used because it is outdated, inefficient, or replaced by better alternatives. Deprecations are a temporary measure to guide developers toward transitioning to newer practices, while giving them time to adjust their code without causing immediate disruptions.</p> <p>Deprecations act as a soft warning: they indicate that the deprecated feature will eventually be removed, but for now, it remains usable with a runtime deprecation warning. This gives developers enough time to adapt before the removal takes place in a future major release.</p> <p>It\u2019s essential to understand that deprecations are not permanent \u2014 every deprecated feature has a defined removal version, beyond which it will no longer exist. Typically, the removal happens in the next major version after the deprecation was announced. For example, if a feature is deprecated in version <code>3.x</code>, it will usually be removed in version <code>4.0.0</code>.</p> <p>Recap</p> <p>Deprecations help to avoid immediate breaking changes by offering a grace period for users to update their code before the feature is entirely removed in the next major release.</p> <p>Deprecations are primarily used for:</p> <ul> <li>Phasing out old functions, classes, or methods in favor of improved alternatives.</li> <li>Renaming functions, arguments, or classes to align with better conventions.</li> <li>Adjusting method signatures, such as adding required arguments or removing old ones.</li> <li>Changing behaviors that can\u2019t be applied retroactively without introducing errors.</li> </ul> <p>Deprecating protocol changes</p> <p>Deprecations are not used for protocol-related changes, as the Minecraft protocol evolves independently of mcproto\u2019s internal development. For these types of changes, mcproto will introduce a major version bump and require users to update.</p> <p>That said, these changes are still considered as breaking, and will need to be documented as such.</p> <p>Note</p> <p>Sometimes, it isn't possible/feasible to deprecate something, as the new change is so different from the original that a breaking change is the only option. That said, this should be a rare case and you should always first do your best to think about how to deprecate something before deciding on just marking your change as breaking.</p>"},{"location":"contributing/guides/breaking-changes/#how-to-deprecate","title":"How to deprecate","text":"<p>We have two custom function to mark something as deprecated, both of these live in the <code>mcproto.utils.deprecation</code> module:</p> <ul> <li><code>deprecation_warn</code>: This function triggers a deprecation warning immediately after it is called, alerting developers   to the pending removal.</li> <li><code>deprecated</code>: This decorator function marks a function as deprecated. It triggers a deprecation warning each time the   decorated function is called. Internally, this ultimately just calls <code>deprecation_warn</code>.</li> </ul>"},{"location":"contributing/guides/breaking-changes/#removal-version","title":"Removal version","text":"<p>These functions take a removal version as an argument, which should be specified as a semantic version string. Generally, you'll just want to put the next major version of the library here (so if you're currently on <code>3.5.2</code> you'll want to specify the removal version as <code>4.0.0</code>; You always want to bump the first / major version number.)</p> <p>The <code>deprecation_warn</code> function will usually just show a warning, however, if the current version of the library surpasses the removal version, it will instead throw a runtime error, making it unusable. In most cases, people shouldn't ever face this, as once the new major version is released, all deprecations with that removal version should be removed, but it's a nice way to ensure the proper behavior, just in case we'd forget, allowing us to remove them later on in a patch version without breaking the semantic versioning model.</p> <p>Note</p> <p>The removal version is a required argument, as we want to make sure that deprecated code doesn't stay in our codebase forever. Deprecations should always be a temporary step toward the eventual removal of a feature.</p> <p>If there is a valid reason to extend the deprecation period, you can push back the removal version, keeping the old or compatibility code longer and incrementing the major version number in the argument accordingly.</p> <p>However, we should never shorten the deprecation period, as that would defeat the purpose of giving developers enough time to adapt to the change. Reducing the deprecation time could result in unexpected breakage for users relying on the deprecated feature.</p>"},{"location":"contributing/guides/breaking-changes/#examples","title":"Examples","text":""},{"location":"contributing/guides/breaking-changes/#function-rename","title":"Function rename","text":"<pre><code>from mcproto.utils.deprecation import deprecated\n\n\n@deprecated(removal_version=\"4.0.0\", replacement=\"new_function\")\ndef old_function(x: int, y: int) -&gt; int:\n  ...\n\n\ndef new_function(x: int, y: int) -&gt; int:\n  ...\n</code></pre>"},{"location":"contributing/guides/breaking-changes/#class-removal","title":"Class removal","text":"<pre><code>@deprecated(removal_version=\"4.0.0\", extra_msg=\"Optional extra message\")\nclass MyClass:\n  ...\n</code></pre>"},{"location":"contributing/guides/breaking-changes/#argument-removal","title":"Argument removal","text":"<pre><code>from mcproto.utils.deprecation import deprecation_warn\n\ndef old_function(x: int, y: int, z: int) -&gt; int:\n  ...\n\ndef new_function(x: int, y: int, z: int | None = None) -&gt; int:\n  if z is not None:\n    deprecation_warn(\n      obj_name=\"z (new_function argument)\",\n      removal_version=\"4.0.0\",\n      replacement=None,\n      extra_msg=\"Optional extra message, like a reason for removal\"\n    )\n\n  ...  # this logic should still support working with z, just like it did in the old impl\n</code></pre>"},{"location":"contributing/guides/breaking-changes/#communicating-breaking-changes","title":"Communicating breaking changes","text":"<p>Breaking changes necessitate clear communication, as they directly impact users by forcing updates to their codebases. It\u2019s essential to ensure that users are well-informed about any breaking changes introduced in the project. This is achieved through the project\u2019s changelog.</p> <p>Every breaking change must be documented using a 'breaking' type changelog fragment. When writing the fragment, adhere to the following guidelines:</p> <ul> <li>Specify what was deprecated with a fully qualified name (e.g. <code>module.submodule.MyClass.deprecated_method</code>).</li> <li>Suggest an alternative, if applicable, and explain any necessary migration steps.</li> <li>Briefly document why the deprecation was made (without going into excessive detail).</li> <li>Prioritize clarity and good wording</li> </ul> <p>These entries are critical, as they are likely to be read by end-users of our library (programmers but non-contributors). Keep this in mind when crafting breaking change fragments.</p> <p>Every breaking change needs its own entry</p> <p>If your pull request introduces multiple breaking changes across different components, you must create individual changelog entries for each change.</p> <p>Example of a good breaking changelog fragment</p> <p>Suppose a library changes the return type of a function from a list to a set. This type change would be difficult to deprecate because the change affects existing code that relies on the specific return type.</p> changes/521.breaking.md<pre><code>Change return type of `mcproto.utils.get_items` from `list[str]` to `set[str]`.\n\n    This change was made to improve performance and ensure unique item retrieval.\n    The previous behavior of returning duplicates in a list has been removed,\n    which may impact existing code that relies on the previous return type.\n    Users should adjust their code to handle the new return type accordingly.\n</code></pre> <p>Even though it\u2019s technically feasible to implement this as a non-breaking change - such as by creating a new function or adding a boolean flag to control the return type, these approaches may not suit our use case. For instance, if we were to introduce a boolean flag, we would need to set it to <code>False</code> by default and show deprecation warnings to users unless they explicitly set the flag to <code>True</code>.</p> <p>Eventually, when the deprecation period is over, the flag becomes pointless, but removing support for it would necessitate yet another round of deprecation for the flag itself, forcing users to revert to using the function without it. This approach could frustrate users and create unnecessary complexity.</p> <p>When considering non-breaking changes, it\u2019s crucial to evaluate potential complications like these. If you opt for a breaking change, be sure to include similar reasoning in your pull request description to help convey the rationale behind the decision.</p> <p>Removing deprecations</p> <p>We consider deprecation removals as a breaking change, which means that these removals also need to be documented. That said, it is sufficient for these removals to be documented in a single changelog fragment. These removals alongside with writing the fragment will be performed by the project maintainers at the time of the release.</p>"},{"location":"contributing/guides/breaking-changes/#communicating-deprecations","title":"Communicating deprecations","text":"<p>Even though a deprecation doesn\u2019t immediately break code, it signals an upcoming change and it's essential to communicate this clearly to the users of our project. We achieve this through the project's changelog.</p> Benefits of tracking deprecations in changelog <p>While runtime deprecation warnings provide immediate feedback upon updating the library, it can often be beneficial to give users a chance to plan ahead before updating the library, especially for projects that perform automatic dependency updates through CI, which may not check for warnings, leading to deprecation warnings reaching production.</p> <p>Additionally, it's often easy for people to miss/overlook the warnings if they're not looking for them in the CLI output, or if their project already produces some other warnings, making ours blend in.</p> <p>By clearly documenting deprecations, we enable users to identify deprecated features before upgrading, allowing them to address issues proactively or at least prepare for changes.</p> <p>A changelog entry serves as a permanent, versioned record of changes, providing detailed explanations of why a feature is deprecated, what the recommended replacements are. It's a place where people may look for clarification on why something was removed, or in search of migration steps after seeing the deprecation warning.</p> <p>Every deprecation must be documented using a 'deprecation' type changelog fragment. When writing the fragment, similar guidelines to writing breaking changelog fragments apply:</p> <ul> <li>Provide the removal version i.e. version in which the deprecated feature will be removed (e.g. <code>4.0.0</code>). (1)</li> <li>Specify what was deprecated with a fully qualified name (e.g. <code>module.submodule.MyClass.deprecated_method</code>).</li> <li>Suggest an alternative, if applicable, and explain any necessary migration steps.</li> <li>Briefly document why the deprecation was made (without going into excessive detail).</li> <li>Prioritize clarity and good wording</li> </ul> <ol> <li>This point is specific to deprecations, it's the only additional point in comparison to the breaking changes    guidelines.</li> </ol> <p>These entries form the second most important part of the changelog, likely to be read by end-users. Keep this in mind when crafting deprecation fragments.</p> <p>Every deprecated component needs it's own entry</p> <p>Just like with breaking changes, if your're deprecating multiple different components, you must make multiple changelog entries, one for each deprecation.</p> <p>Example of a good deprecation changelog fragment</p> <p>Suppose we used a simple string configuration parameter but introduced a more flexible configuration object to allow for future extensions and better validation. This would be a good candidate for deprecation rather than an immediate breaking change.</p> changes/521.deprecation.md<pre><code>Deprecate string-based `mcproto.utils.connect` configuration attribute in favor of `mcproto.utils.ConnectionConfig`.\n\n    The new `ConnectionConfig` object offers more flexibility by allowing users to specify multiple options (like\n    timeouts, retries, etc.) in a structured way, instead of relying on a string. Users are encouraged to migrate\n    to this object when calling `mcproto.utils.connect` to take full advantage of future improvements and\n    additional connection parameters.\n\n    - The string-based configuration support will be removed in version `4.0.0`.\n</code></pre>"},{"location":"contributing/guides/changelog/","title":"Changelog fragments","text":"Abstract <p>This page describes our use of <code>towncrier</code> for the project's changelog. It explains the different changelog categories, the process of creating changelog fragment files and generating a changelog preview. Additionally, the page contains a guide on writing good changelog fragments.</p> <p>Our project contains a changelog which tracks all notable changes for easy and quick reference to both users and our contributors.</p> <p>To maintain our changelog, we're using <code>towncrier</code>, which allows us to create fragment files, which each contains a single changelog entry. Once a new release is created, all of these fragments will be used to create a changelog for that new release.</p> <p>We generally require every pull request to to include a new changelog fragment, summarizing what it does.</p> <p>Note</p> <p>If you think your change shouldn't require a changelog entry (it's a small / simple change that isn't worth noting), ask us to add the <code>skip-fragment-check</code> label to your PR, which will disable the automated check that enforces a presence of the changelog fragment.</p>"},{"location":"contributing/guides/changelog/#structure-of-a-fragment-file","title":"Structure of a fragment file","text":"<p>The fragment files are stored in the <code>changes/</code> directory in our project. These files follow the following naming format: <code>{pull_request_number}.{type}.md</code>.</p> <p>Possible fragment types are:</p> <ul> <li><code>feature</code>: New feature that affects the public API.</li> <li><code>bugfix</code>: A bugfix, which was affecting the public API.</li> <li><code>docs</code>: Change to the documentation, or updates to public facing docstrings</li> <li><code>breaking</code>: Signifying a breaking change of some part of the project's public API, which could cause issues for   end-users updating to this version. (Includes deprecation removals.)</li> <li><code>deprecation</code>: Signifying a newly deprecated feature, scheduled for eventual removal.</li> <li><code>internal</code> Fully internal change that doesn't affect the public API, but is significant enough to be mentioned,   likely because it affects project contributors. (Such as a new linter rule, change in code style, significant change   in internal API, ...)</li> </ul>"},{"location":"contributing/guides/changelog/#create-fragments-with-commands","title":"Create fragments with commands","text":"<p>While you can absolutely create these files manually, it's often a lot more convenient to use the <code>towncrier</code> CLI, which can create the file for you in the proper place automatically. With it, you can simply run:</p> <pre><code>towncrier create {pull_request_number}.{type}.md\n</code></pre> <p>After you ran the command, a new file will appear in the <code>changes/</code> directory. You can now open it and describe your change inside of it.</p> <p>If the change is simple enough, you can even use the <code>-c</code> / <code>--content</code> flag to specify it directly, like:</p> <pre><code>towncrier create 12.feature.md -c \"Add dinosaurs!\"\n</code></pre> <p>Terminal editors</p> <p>If you're used to terminal editors, there's also an <code>--edit</code> flag, which will open the file with your <code>$EDITOR</code>. (I would recommend <code>neovim</code>, but if you find it too complex, <code>nano</code> also works well)</p>"},{"location":"contributing/guides/changelog/#multiple-fragments-in-a-single-pr","title":"Multiple fragments in a single PR","text":"<p>If necessary, multiple fragment files can be created per pull-request, with different change types, if the PR covers multiple areas. For example for PR #13 that both introduces a feature, and changes the documentation, can add 2 fragment files: <code>13.feature.md</code> and <code>13.docs.md</code>.</p> <p>Additionally, if a single PR is addressing multiple unrelated topics in the same category, and needs to make multiple distinct changelog entries, an optional counter value can be added at the end of the file name (needs to be an integer). So for example PR #25 which makes 2 distinct internal changes can add these fragment files: <code>25.internal.1.md</code> and <code>25.internal.2.md</code>. (The numbers in this counter position will not be shown in the final changelog and are merely here for separation of the individual fragments.)</p> <p>However if the changes are related to some bigger overarching goal, you can also just use a single fragment file with the following format:</p> changes/25.internal.md<pre><code>Update towncrier categories\n\n    - Rename `documentation` category to shorter: `docs`\n    - Add `internal` category for changes unrelated to public API, but potentially relevant to contributors\n    - Add github workflow enforcing presence of a new changelog fragment file for each PR\n        - For insignificant PRs which don't require any changelog entry, a maintainer can add `skip-fragment-check` label.\n</code></pre> <p>Warning</p> <p>While possible, if you end up making multiple distinct changelog fragments like this, it's a sign that your PR might be too big, and you should split it up into multiple PRs instead. Making huge PRs that address several unrelated topics at once is generally a bad practice, and should be avoided. If you go overboard, your PR might even end up getting closed for being too big, and you'll be required to split it up.</p>"},{"location":"contributing/guides/changelog/#preview-changelog","title":"Preview changelog","text":"<p>To preview the latest changelog, run <code>towncrier build --draft --version latest</code>.</p> Meaning of the version value <p>The <code>--version</code> attribute usually takes the version number of the project, to which these changes apply. However, since we just want to preview the changes, it doesn't really matter for us, so we can just pass <code>latest</code> or whatever else you wish.</p> <p>For actual builds, the version is automatically obtained and this command is executed in our release CI workflow.</p> <p>This version will be used in the first line of the changelog (the header).</p> Meaning of --draft flag <p>The <code>--draft</code> flag will make sure that towncrier will only show you the contents of the next changelog version entry, but won't actually add that generated content to our <code>CHANGELOG.md</code> file, while consuming (removing) the changelog fragments.</p> <p>You will never need to run <code>towncrier</code> without the <code>--draft</code> flag, as our CI workflows for project releasing handle that automatically.</p> <p>To make this a bit easier, there is a poe command running the command above, so you can just use <code>poe changelog-preview</code> to see the changelog, if you don't like remembering new commands.</p>"},{"location":"contributing/guides/changelog/#writing-good-changelog-fragments","title":"Writing good changelog fragments","text":"<p>Fragment files follow the same markdown syntax as our documentation.</p> <p>The contents of a fragment file should describe the change that you've made in a quick and general way. That said, the change descriptions can be a bit more verbose than just the PR title, but only if it's necessary. Keep in mind that these changes will be shown to the end users of the library, so try to explain your change in a way that a non-contributor would understand.</p> <p>Tip</p> <p>If your change needs some more in-depth explanations, perhaps with code examples and reasoning for why such a change was made, use the PR body (description) for this purpose. Each changelog entry will contain a link to the corresponding pull request, so if someone is interested in any additional details about a change, they can always look there.</p>"},{"location":"contributing/guides/changelog/#examples-of-good-changlog-fragment-files","title":"Examples of good changlog fragment files","text":"<p> Clear and descriptive</p> changes/171.feature.md<pre><code>Add `Account.check` function, to verify that the access token in use is valid, and the data the Account instance has matches the data minecraft API has.\n</code></pre> changes/179.docs.md<pre><code>Enforce presence of docstrings everywhere with pydocstyle. This also adds docstring to all functions and classes that didn't already have one. Minor improvements for consistency were also made to some existing docstrings.\n</code></pre> <p> Slightly on the longer side, but it's justified (Sometimes, it's important to explain the issue that this fixes, so that users know that it was there)</p> changes/330.bugfix.md<pre><code>Fix behavior of the `mcproto.utils.deprecation` module, which was incorrectly always using a fallback version, assuming mcproto is at version 0.0.0. This then could've meant that using a deprecated feature that is past the specified deprecation (removal) version still only resulted in a deprecation warning, as opposed to a full runtime error.\n</code></pre> <p> With an extra note about the breaking change (Adding some extra description isn't always bad, especially for explaining how a breaking change affects existing code)</p> changes/130.breaking.md<pre><code>Renamed \"shared_key\" field to \"shared_secret\" in `LoginEncryptionPacket`, following the official terminology.\n\n    This is a breaking change as `LoginEncryptionPacket`'s `__init__` method now uses \"shared_secret\" keyword only\n    argument, not \"shared_key\". Every initialization call to this packet needs to be updated.\n</code></pre> <p> With a list of subchanges that were made (Be careful with this one though, make sure you don't over-do it)</p> changes/129.feature.md<pre><code>Added a system for handling Minecraft authentication\n\n    - Yggdrasil system for unmigrated i.e. non-Microsoft accounts (supportng Minecraft accounts, and the really old\n      Mojang accounts)\n    - Microsoft OAuth2 system (Xbox live) for migrated i.e. Microsoft accounts\n</code></pre>"},{"location":"contributing/guides/changelog/#examples-of-bad-changelog-fragment-files","title":"Examples of bad changelog fragment files","text":"<p> Unclear (But what does this class do?)</p> changes/123.feature.md<pre><code>Update `Buffer` class.\n</code></pre> <p> Bad category (This is a feature, not a bugfix)</p> changes/161.bugfix.md<pre><code>Add support for encryption. Connection classes now have `enable_encryption` method, and some encryption related functions were added into a new mcproto.encryption module.\n</code></pre> <p> Starts with dash (Sometimes, it can feel natural to start your changelog entry with a <code>-</code>, as it is a list item in the final changelog, however, this dash will already be added automatically)</p> changes/171.feature.md<pre><code>- Add `Account.check` function, to verify that the access token in use is valid, and the data the Account instance has matches the data minecraft API has.\n</code></pre> <p> Wrapped first line (Splitting up the first line into multiple lines is something we often do in markdown, because it should still be rendered as a single line, however, because of how towncrier merges these fragments, using multiple lines will cause issues and the changelog won't be formatter correctly! Further blocks can have wrapped lines.)</p> changes/330.bugfix.md<pre><code>Fix behavior of the `mcproto.utils.deprecation` module, which was incorrectly always using a fallback version, assuming\nmcproto is at version 0.0.0. This then could've meant that using a deprecated feature that is past the specified\ndeprecation (removal) version still only resulted in a deprecation warning, as opposed to a full runtime error.\n</code></pre> <p> No indent in description (Sometimes, we want to add additional description to our changelog entry. When doing so, we need to make sure that the description block is indented with 4 spaces and there is a blank line after the first / title line.)</p> changes/330.breaking.md<pre><code>Renamed \"shared_key\" field to \"shared_secret\" in `LoginEncryptionPacket`, following the official terminology.\n\nThis is a breaking change as `LoginEncryptionPacket`'s `__init__` method now uses \"shared_secret\" keyword only\nargument, not \"shared_key\". Every initialization call to this packet needs to be updated.\n</code></pre> <p> Way too long (This should've been the PR description)</p> changes/161.feature.md<pre><code>Introduce support for encryption handling.\n\n    Most servers (even offline ones) usually send an EncryptionRequest packet during the LOGIN state, with a public\n    (RSA) key that the client is expected to use to encrypt a randomly generated shared secret, to send back to the\n    server in EncryptionResponse packet. After that, all further communication is encrypted with this shared secret.\n\n    The encryption used is a AES/CFB8 stream cipher. That means the encrypted ciphertext will have the same amount\n    of bytes as the original plaintext, allowing us to still trust our reader/writer methods that rely on reading\n    specific amounts of bytes, even if their content don't make sense.\n\n    This directly uses the base connection classes and adds enable_encryption method to them, which after getting\n    called will automatically encrypt/decrypt any incomming/outcomming data.\n\n    This additionally also changes the LoginEncryptionRequest packet class, and makes the public key attribute\n    actually hold an RSA public key (from the cryptography library), instead of just the received bytes. This is\n    then much more useful to work with later on. This is a breaking change.\n</code></pre> <p>Verify if your changelog works</p> <p>Our CI will automatically build the documentation for your PR and post a link to it as a comment in the pull request. This documentation will include a preview of the changelog with all unreleased changes in the changelog page. You can take a look there to make sure that your change fragment(s) resulted in the proper output.</p> <p>Internal changes</p> <p>We're a bit more forgiving when it comes to describing your change if your change is in the <code>internal</code> category, as end users don't need to read those. Changes in this category can be a bit less descriptive.</p>"},{"location":"contributing/guides/changelog/#footnotes","title":"Footnotes","text":"<ul> <li>See https://keepachangelog.com for more info about why and how to properly maintain a changelog</li> <li>For more info about <code>towncrier</code>, check out it's documentation</li> </ul>"},{"location":"contributing/guides/documentation/","title":"Writing documentation","text":"Abstract <p>This guide describes how to write the documentation for this project (like the docs for the page you're reading right now). It contains several useful links for <code>mkdocs</code> documentation and for the various extensions that we use.</p> <p>Our documentation page is generated from markdown files in the <code>docs/</code> directory, using <code>mkdocs</code> with <code>mkdocs-material</code>.</p> <p>This gives us an amazing framework for building great-looking, modern docs. For the most part, the documentation is written in classical markdown syntax, just with some additions. If you're familiar with markdown, you should be able to make a simple change easily, without having to look at any docs.</p> <p>That said, for more complex changes, you will want to familiarize yourself with mkdocs-material documentation. Don't worry, these docs are fairly easy to read and while they do cover a lot, they're nicely segmented, so you should be able to find what you're looking for quickly. On top of just that, you may want to simply look through the existing pages, as a lot of what you'd probably want to do was already done on one of our pages, so you can just copy that.</p> <p>Other than just mkdocs-material, we also use pymdown-extensions, which add various neat extensions that are often useful when writing the docs. These are mostly small quality-of-life extensions that bring some more life to the docs, but aren't something that you'd need to work with all the time. We do suggest that you check it out though, so that you know what's available.</p> <p>Finally, for generating our API reference page, we're using mkdocstrings. More on that in the API reference guide though.</p>"},{"location":"contributing/guides/great-commits/","title":"Great Commits","text":"Abstract <p>This guide describes how to make good commits that are helpful to maintainers, debuggable and readable when going over the <code>git log</code>, or <code>git blame</code>.</p> <p>It explains the purpose of a commit message and it's structure, goes over the importance of making commits \"atomic\" and the practice of partial staging. Additionally, it also mentions why and how to avoid making a lot of fixing commits, describes the practice of force pushing, alongside it's downsides and finally, it explains why these practices are worth following and how they make the developer's life easier.</p> <p>A well-structured git log is crucial for a project's maintainability, providing insight into changes as a reference for future maintainers (or old forgetful ones, like me). Here, we outline the best practices for making good commits in our project.</p>"},{"location":"contributing/guides/great-commits/#commit-message-guidelines","title":"Commit Message Guidelines","text":""},{"location":"contributing/guides/great-commits/#purpose","title":"Purpose","text":"<p>Every commit should represent a change in the source code. The commit message should not only describe what was changed but also why it was necessary and what it achieves.</p>"},{"location":"contributing/guides/great-commits/#more-than-just-the-first-line","title":"More than just the first line","text":"<p>Many developers are uesd to commiting changes with a simple <code>git commit -m \"My message\"</code>, and while this is enough and it's perfectly fine in many cases, sometimes you just need more space to describe what a change truly achieves.</p> <p>Surprisingly, many people don't even know that they can make a commit that has more in it's message than just the title/first line. That then leads to poorly documented changes, because single line sometimes just isn't enough.</p> <p>To create a commit with a bigger commit message, you can simply run the <code>git commit</code> command without the <code>-m</code> argument. This should open a temporary file in your text editor (<code>$EDITOR</code>), in which you can write out your commit message in full.</p> Use git commit by default <p>I\u2019d actually recommend making the simple <code>git commit</code> the default way you make new commits, since it invites you to write more about it, by just seeing that you have that space available. We usually don\u2019t even know what exactly we\u2019ll write in our new commit message before getting to typing it out, and knowing you have that extra space if you need it will naturally lead to using it, even if you didn\u2019t know you needed it ahead of time.</p> <p>Note</p> <p>That said, not every commit requires both a subject and a body. Sometimes, a change may be so simple, that no further context is necessary. With those changes, including a body would just be a waste of the readers time. For example:</p> <pre><code>Fix typo in README\n</code></pre> <p>This message doesn't need anything extra. Some people like to include what the typo was, but if you want to know that, you can just look at the actual changes that commit made. There's a whole bunch of ways to do that with git, like <code>git show</code>, <code>git diff</code> or <code>git log --patch</code>. So while in some cases, having extra context can be very valuable, you also shouldn't overdo it.</p>"},{"location":"contributing/guides/great-commits/#structure","title":"Structure","text":"<p>Git commits should be written in a very specific way. There\u2019s a few rules to follow:</p> <ol> <li>Subject Line:<ul> <li>Limit to 50 characters (This isn't a hard limit, but try not to go much longer. This limit ensures   readability and forces the author to think about the most concise way to explain what's going on. Hint: If you're   having trouble summarizing, you might be committing too much at once)</li> <li>A single sentence (The summary should be a single sentence, multiple probably wouldn't fit into the character   limit anyways)</li> <li>Capitalize the first letter</li> <li>Don't end with a period (A period will only waste one of your precious 50 characters for the summary and   it's not very useful context wise)</li> <li>Use imperative mood (Imperative mood means \u201cwritten as if giving a command/instruction\u201d i.e.: \u201cAdd support   for X\u201d, not \u201cI added support for X\u201d or \u201cSupport for X was added\u201d, as a rule of thumb, a subject message should be   able to complete the sentence: \u201cIf implemented, this commit will \u2026\u201d)</li> </ul> </li> <li>Body:<ul> <li>Separate the body from the subject line with a blank line (Not doing so would make git think your summary   spans across multiple lines, rather than it being a body)</li> <li>Wrap at 72 characters (Commits are often printed into the terminal with the <code>git log</code> command. If the output   isn't wrapped, going over the terminals width can cause a pretty messy output. The recommended maximum width for   terminal text output is 80 characters, but git tools can often add indents, so 72 characters is a sensible maximum)</li> <li>Avoid implementation details (The diff shows the \"how\", focus on the \"what\" and \"why\")</li> </ul> </li> </ol> <p>Git commits can use markdown, most other programs will understand it and it's a great way to bring in some more style, improving the readability. In fact, if you view the commit from a site like GitHub, it will automatically render any markdown in the commit for you.</p> Example commit <pre><code>Summarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay too\n- They're very useful for listing something\n</code></pre> <p> Stretch goal \u2013 Include relevant keywords to make your commits easily searchable (e.g. the name of the class/function you modified).</p> <p> Stretch goal #2 \u2013 Keep it engaging! Provide some interesting context or debug processes to make the commit history both more informative and fun to read.</p>"},{"location":"contributing/guides/great-commits/#make-atomic-commits","title":"Make \"atomic\" commits","text":"<p>Definition</p> <p>Atomic: of or forming a single irreducible unit or component in a larger system.</p> <p>The term \u201catomic commit\u201d means that the commit is only representing a single change, that can\u2019t be further reduced into multiple commits, i.e. this commit only handles a single change. Ideally, it should be possible to sum up the changes that a good commit makes in a single sentence.</p> <p>That said, the irreducibility should only apply to the change itself, obviously, making a commit for every line of code wouldn\u2019t be very clean. Having a commit only change a small amount of code isn\u2019t what makes it atomic. While the commit certainly can be small, it can just as well be a commit that\u2019s changing thousands of lines. (That said, you should have some really good justification for it if you\u2019re actually making commits that big.)</p> <p>The important thing is that the commit is only responsible for addressing a single change. A counter-example would be a commit that adds a new feature, but also fixes a bug you found while implementing this feature, and also improves the formatting of some other function, that you encountered along the way. With atomic commits, all of these actions would get their own standalone commits, as they\u2019re unrelated to each other, and describe several different changes.</p> <p>Note that making atomic commits isn't just about splitting thins up to only represent single changes, indeed, while they should only represent the smallest possible change, it should also be a \u201ccomplete\u201d change. This means that a commit responsible for changing how some function works in order to improve performance should ideally also update the documentation, make the necessary adjustments to unit-tests so they still pass, and update all of the references to this updated function to work properly after this change.</p> <p>Summary</p> <p>So, an atomic commit is a commit representing a single (ideally an irreducible) change, that\u2019s fully implemented and integrates well with the rest of the codebase.</p>"},{"location":"contributing/guides/great-commits/#partial-adds","title":"Partial adds","text":"<p>Many people tend to always simply use <code>git add -A</code> (or <code>git add .</code>), to stage all of the changes they made, and then create a commit with it all. Sometimes, you might not even stage the changes and choose to use <code>git commit -a</code>, to quickly commit everything.</p> <p>In an ideal world, where you only made the changes you needed to make for this single atomic commit, this would work pretty well, and while sometimes this is the case, in many cases, you might've also fixed a bug or a typo that you noticed while working on your changes, or already implemented something else, that doesn't fit into your single atomic commit that you now wish to make.</p> <p>In this case, it can be very useful to know that you can instead make a \"partial\" add, only staging those changes that belong to the commit.</p> <p>In some cases, it will be sufficient to simpy stage specific files, which you can do with:</p> <pre><code>git add path/to/some/file path/to/other/file\n</code></pre> <p>That said, in most cases, you're left with a single file that contains multiple unrelated changes. When this happens, you can use the <code>-p</code>/<code>--patch</code> flag:</p> <pre><code>git add -p path/to/file\n</code></pre> <p>Git will then let you interactively go over every \"hunk\" (a chunk of code, with changes close to each other) and let you decide whether to accept it (hence staging that single hunk), split it into more chunks, skip it (avoids staging this hunk) or even modify it in your editor, allowing you to remove the intertwined code from multiple changes, so that your commit will really only perform a single change.</p> <p>Use --patch more often</p> <p>This git feature has slowly became one of my favorite tools, and I use it almost every time I need to commit something, even if I don't need to change or skip things, since it also allows me to quickly review the changes I'm making, before they make it into a commit.</p>"},{"location":"contributing/guides/great-commits/#avoid-fixing-commits","title":"Avoid fixing commits","text":"<p>A very common occurrence I see in a ton of different projects is people making sequences of commits that go like:</p> <ul> <li>Fix bug X</li> <li>Actually fix bug X</li> <li>Fix typo in variable name</li> <li>Sort imports</li> <li>Follow lint rules</li> <li>Run auto-formatter</li> </ul> <p>While people can obviously mess up sometimes, and just not get something right on the first try, a fixing commit is rarely a good way to solve that.</p> <p>Instead of making a new commit, you can actually just amend the original. To do this, we can use the <code>git commit --amned</code>, which will add your staged changes into the previous commit, even allowing you to change the message of that old commit.</p> <p>Not only that, if you've already made another commit, but now found something that needs changing in the commit before that, you can use interactive rebase with <code>git rebase -i HEAD~3</code>, allowing you to change the last 3 commits, or even completely remove some of those commits.</p> <p>For more on history rewriting, I'd recommend checking the official git documentation.</p>"},{"location":"contributing/guides/great-commits/#force-pushing","title":"Force pushing","text":"<p>Changing history is a great tool to clean up after yourself, but it works best with local changes, i.e. with changes you haven't yet pushed.</p> <p>If you're changing git history after you've already pushed, you will find that pushing again will not work, giving you a message like \"updates were rejected because the remote contains work that you do not have locally\".</p> <p>To resolve this issue, it is possible to make a \"force push\" with <code>git push --force</code> command. Running this will push your branch to the remote (to GitHub) regardless of what was in the remote already, hence overriding it.</p> <p>Warning</p> <p>Force pushing becomes risky if others have already pulled the branch you are working on. If you overwrite the branch with a force push, it can lead to several issues:</p> <ul> <li>Lost work: Collaborators may have pushed to your branch already, following it's existing git history.   However, after your force-push, their changes would be ereased from the remote. Make sure you pull / rebase   from the remote before you make a force-push.</li> <li>Complex conflicts: If someone else has pulled your branch and did some changes that they didn't yet push   before you force-pushed, suddenly, their git history is now no longer in sync. Resolving conflicts like that is   possible, but it can be very annoying.</li> <li>Harder reviews: When reviewing your code, we sometimes like going over the individual commits to understand   your individual (atomic) changes better. It's often a lot easier to look at and review 10 different atomic   changes individually, that together form a PR than it would be to look at all of them at once. By force-pushing,   you're changing the commit history, making the changes to the code that we already reviewed. This is partially   GitHub's fault though, for not providing an easier way of showing these changes across force-pushes.</li> </ul>"},{"location":"contributing/guides/great-commits/#force-pushing-on-pr-feature-branches","title":"Force pushing on PR feature branches","text":"<p>In our project, we do allow force pushing on your individual feature branches that you use for your PR. This flexibility enables you to clean up your commit history and refine your changes before they are merged into the main branch. However, it's important to note that many other projects may not permit force pushing due to the risks involved. Always check the contributing guidelines of the project you are working on.</p> <p>Best practices</p> <p>To mitigate the risks associated with force pushing, consider following these best practices:</p> <ul> <li>Push less often: Try to limit of othen you push changes to the remote repository in general. Aim to push only   when you are satisfied with the set of changes you have. This reduces the likelihood of needing to force-push a   lot.</li> <li>Force push quickly: If you do need to force-push, try to do so as quickly as possible. The more time that has   passed since your normal push, the more likely it is that someone have already clonned/pulled your changes. If a   force push was made within just a few seconds of the original push (and it only overwrites the changes from that   last push), it's not very likely that someone will have those changes pulled already, so you probably won't break   anyone's local version.</li> <li>Pull before changing history: Make absolutely certain that you don't override anyone's changes with your   force-push. Sometimes, maintainers can create new commits in your branch, other times, that can even be you by   modifying something from GitHub, or clicking on the apply suggestion button from a code-review. By pulling before   you start changing history, you can make sure that you won't erease these changes and they'll remain a part of   your modified history.</li> </ul>"},{"location":"contributing/guides/great-commits/#benefits","title":"Benefits","text":"<p>Now that you've seen some of the best practices to follow when making new commits, let's talk a bit about why we follow these practices and what benefits we can gain from them.</p>"},{"location":"contributing/guides/great-commits/#a-generally-improved-development-workflow","title":"A generally improved development workflow","text":"<p>Speaking from my personal experience, I can confidently say that learning how to make good git commits, specifically the practice of making atomic commits will make you a better programmer overall. That might sound surprising, but it's really true.</p> <p>The reason is that it forces you to only tackle one issue at a time. This naturally helps you to think about how to split your problem into several smaller (atomic) subproblems and make commits addressing those single parts. This is actually one of very well known approaches to problem-solving, called the \"divide and conquer\" method, where you split your problem into really small, trivially simple chunks that you solve one by one.</p>"},{"location":"contributing/guides/great-commits/#easier-bug-hunting","title":"Easier bug hunting","text":"<p>Bugs in code are pretty much inevitable, even for the most experienced of developers. Sometimes, we just don't realise how certain part of the code-base will interact with another part, or we're just careless as we try and build something fast.</p> <p>The most annoying bugs are those that aren't discovered immediately during development. These bugs can require a lot of work to track down. With a good git log, filled with a lot of small commits, where each commit leaves the code-base in a usable state, you can make this process a lot simpler!</p> <p>Git has a command specifically for this: <code>git bisect</code>. It will first make you mark 2 commits, a good one and a bad one, after which it will perform a binary search, checking out the commits in between these two as you try and replicate the bug on each. This will quickly lead you to the specific commit that introduced this bug, without having to do any code debugging at all.</p> <p>The great advantage here is that users reporting bugs can often perform git bisects too, even without having to know much about development and the structure of our code-base and if the identified commit is small enough, the issue is often apparent just from looking at the diff. Even for bigger commits though, they can be often reverted to quickly fix the issue and give developers time to focus on actually resolving it, while using it's diff as a reference.</p>"},{"location":"contributing/guides/great-commits/#enhanced-git-blame","title":"Enhanced git blame","text":"<p>Clear commit messages can be very useful for understanding certain parts of the code. Git provides a tool called <code>git blame</code>, which can show you which commit is responsible for adding a specific line into the code-base. From there, you can then take a look at that commit specifically and see it's title &amp; description to further understand that change, along with the rest of the diff to give you proper context for how that line worked with the rest of the code.</p> <p>This can often be a great tool when refactoring, as sometimes it can be quite unclear why something is done the way it is and commits can sometimes help explain that.</p>"},{"location":"contributing/guides/great-commits/#efficient-cherry-picking","title":"Efficient cherry picking","text":"<p>In some cases, it can be useful to carry over certain change (commit) from one place to another. This process is called cherry-picking (<code>git cherry-pick</code>), which will copy a commit and apply it's diff elsewhere. With atomic commits, this will often work without any further adjustments, since each commit should itself leave you with a functioning project.</p>"},{"location":"contributing/guides/great-commits/#streamlined-pull-request-reviews","title":"Streamlined pull request reviews","text":"<p>Reviewers can often better understand and verify changes by examining your well-structured commits, improving the review process.</p>"},{"location":"contributing/guides/great-commits/#footnotes","title":"Footnotes","text":"<p>This guide took heavy inspiration from this article: https://itsdrike.com/posts/great-commits/.</p> <p>Quote</p> <p>P.S. It's not plagiarism if the original was written by me :P</p> <p>See the original article's sources for proper attributions.</p>"},{"location":"contributing/guides/precommit/","title":"Pre-commit","text":"Abstract <p>This guide explains what is pre-commit and how to set it up as a git hook that will run automatically before your commits. It also describes how to run pre-commit manually from the CLI, how to skip some or all of the individual checks it performs, what happens when hooks edit files and where it's configuration file is.</p> <p>Now that you've seen the linters, formatters, type-checkers and other tools that we use in the project, you might be wondering whether you're really expected to run all of those commands manually, after each change. And of course, no, you're not, that would be really annoying, and you'd probably also often just forget to do that.</p> <p>So, instead of that, we use a tool called <code>pre-commit</code>, which creates a git hook, that will automatically run before each commit you make. That means each time when you make a commit, all of these tools will run over the code you updated, and if any of these linters detects an issue, the commit will be aborted, and you will see which linter failed, and it's output telling you why.</p>"},{"location":"contributing/guides/precommit/#installing-pre-commit","title":"Installing pre-commit","text":"<p>To install pre-commit as a git hook all you need to do is to run:</p> <pre><code>pre-commit install\n</code></pre> <p>This will install pre-commit as a git hook into your git repository, which will mean it will run automatically before every new commit you make.</p> <p>Warning</p> <p>Pre-commit itself will be installed via uv, which means you will need to have an activated virtual environment whenever you make a new commit, otherwise, the pre-commit git hook will fail with command not found.</p>"},{"location":"contributing/guides/precommit/#hooks-that-modify-files","title":"Hooks that modify files","text":"<p>Sometimes, hooks can end up modifying your files, for example the ruff format hook may do so if your file wasn't already formatted by ruff. When this happens, the hook itself will fail, which will make git abort the commit. At this point, you will be left with the original changes still staged, but some files may have been modified, which means you'll want to <code>git add</code> those again, staging these automatic modifications and then make the commit again.</p> <p>Note that in case you were only committing a partial change, which means you still had some parts of the file unstaged, pre-commit will not modify the files for you. Instead, the hook will just fail, leaving the rest up to you. You should now run the formatter yourself and perform another partial add, updating the staged changes to be compliant.</p>"},{"location":"contributing/guides/precommit/#running-manually","title":"Running manually","text":"<p>Even though in most cases, it will be more than enough to have pre-commit run automatically as a git hook, sometimes, you may want to run it manually without making a commit.</p> <p>Tip</p> <p>You can run this command without having pre-commit installed as a git hook at all. This makes it possible to avoid installing pre-commit and instead running all checks manually each time. That said, we heavily recommend that you instead install pre-commit properly, as it's very easy to forget to run these checks.</p> <p>To run pre-commit manually you can use the following command:</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>Using this command will make pre-commit run on all files within the project, rather than just running against the git staged ones, which is the behavior of the automatically ran hook.</p>"},{"location":"contributing/guides/precommit/#skipping-pre-commit","title":"Skipping pre-commit","text":"<p>Automatic skipping</p> <p>Pre-commit is pretty smart and will skip running certain tools depending on which files you modified. For example some hooks only check the validity of Python code, so if you haven't modified any Python files, there is no need to run those hooks.</p> <p>Even though in most cases enforcing linting before each commit is what we want, there are some situations where we need to commit some code which doesn't pass these checks. This can happen for example after a merge, or as a result of making a single purpose small commit without yet worrying about linters. In these cases, you can use the <code>--no-verify</code> flag when making a commit, telling git to skip the pre-commit hooks and commit normally. When making a commit, this would look like:</p> <pre><code>git commit -m \"My unchecked commit\" --no-verify\n</code></pre> <p>You can also only skip a specific hook, by setting <code>SKIP</code> environmental variable (e.g. <code>SKIP=basedpyright</code>) or even multiple hooks (<code>SKIP=ruff-linter,ruff-formatter,slotscheck</code>). When making a commit, this would look like:</p> <pre><code>SKIP=\"check-toml,slotscheck,basedpyright\" git commit -m \"My partially checked commit\"\n</code></pre> <p>The names of the individual hooks are their ids, you can find those in the configuration file for pre-commit.</p> <p>Warning</p> <p>This kind of verification skipping should be used sparingly. We value a clean history which consistently follows our linting guidelines, and making commits with linting issues only leads to more commits, fixing those issues later.</p>"},{"location":"contributing/guides/precommit/#configuration","title":"Configuration","text":"<p>You can find pre-commit's configuration the <code>.pre-commit-config.yaml</code> file, where we define which tools should be ran and how. Currently, pre-commit runs ruff linter, ruff formatter, slotscheck and basedpyright, but also a checker for some issues in TOML/YAML files.</p>"},{"location":"contributing/guides/setup/","title":"Setting up the project","text":"Abstract <p>This guide describes the very basics of setting up our project.</p> <p>It explains how to use <code>uv</code> to install the python dependencies for the project. After which it goes over using uv (activating the virtual environment, keeping the dependencies up to date as we update them, adding / removing dependencies and dependency groups).</p>"},{"location":"contributing/guides/setup/#pre-requisites","title":"Pre-requisites","text":"<p>A basic knowledge of git and GitHub, alongside working within the terminal and running commands is a requirement to work on this project.</p> <p>This guide assumes you have already forked our repository, clonned it to your computer and created your own git branch to work on.</p> <p>If you wish to work from an already forked repository, make sure to check out the main branch and do a <code>git pull</code> to get your fork up to date. Now create your new branch.</p>"},{"location":"contributing/guides/setup/#uv","title":"UV","text":"<p>This project uses <code>uv</code>. Uv is a tool for managing python dependencies in a reproducible way, ensuring that everyone is using the same versions. It creates virtual environments for each project, which ensures that your global dependencies won't clash with the project.</p> More about virtual environments <p>A python virtual environment is essentially a separate mini installation of python used purely for the project you're working on (as opposed to using your system-wide python installation for everything).</p> <p>The reason we do this is to avoid dependency conflicts. Consder this: Our project needs library \"foo\" at version 2.5.2, however, you also have another unrelated project, that also needs the \"foo\" library, but this project didn't yet update this dependency, and requires an older version of this library: 1.2.0. This is a problem, because our project won't work with a version that old, we're using some of the new features of that library, similarly, your project won't work with a newer version though.</p> <p>With a virtual environment, both projects will have their own isolated python installation, that only contains the dependencies listed for that project, avoiding any conflicts completely.</p> <p>You can create virtual environments manually, with the built-in <code>venv</code> python module, but uv makes this much simpler. If you want to find out more about virutal environments, check the official python documentation.</p> <p>This means you will need to have uv installed on your system to run our project. To do so, just follow their official documentation.</p>"},{"location":"contributing/guides/setup/#dependency-installation","title":"Dependency installation","text":"<p>Once installed, you will want to create a new environment for our project, with all of our dependencies installed. Open a terminal in the project's directory and run the following command:</p> <pre><code>uv sync\n</code></pre> <p>After running this command, the virtual environment will be populated with all of the dependencies that you will need for running &amp; developing the project.</p>"},{"location":"contributing/guides/setup/#activating-the-environment","title":"Activating the environment","text":"<p>The virtual environment that you just created will contain a bunch of executable programs, such as <code>ruff</code> (our linter). One of those executable programs is also <code>python</code>, which is the python interpreter for this environment, capable of using all of those dependencies installed in that environment.</p> <p>By default, when you run the <code>python</code> command, your machine will use the system-wide python installation though and the executables present in this environment will not be runnable at all. In order to make your terminal use the programs from this environment, instead of the global ones, you will need to \"activate\" the environment.</p> <p>Some IDEs/editors are capable of doing this automatically when you open the project, if your editor supports that, you should configure it to do so.</p> <p>If your IDE doesn't have that option, or you just wish to work from the terminal, you can instead run:</p> <pre><code># On Linux:\n. .venv/bin/activate\n</code></pre> <p>Now you can start the IDE from your terminal, which should make it work within the uv python environment.</p> <p>Execute a single command inside the virtual environment</p> <p>If you just want to run a single command from the venv, without necessarily having to activate the environment (often useful in scripts), uv provides a quick and simple way to do so. All you need to do is prefix any such command with <code>uv run</code> (e.g. <code>uv run ruff check</code>).</p>"},{"location":"contributing/guides/setup/#keeping-your-dependencies-up-to-date","title":"Keeping your dependencies up to date","text":"<p>We often update the dependencies of mcproto to keep them up to date. Whenever we make such an update, you will need to update your virtual environment to prevent it from going out of date. An out of date environment could mean that you're using older versions of some libraries and what will run on your machine might not match what will run on other machines with the dependencies updated.</p> <p>Thankfully, uv makes updating the dependencies very easy as all you have to do is re-run the installation command:</p> <pre><code>uv install\n</code></pre> <p>It can sometimes be hard to know when you need to run the install command, in most cases, even if we did update something and you're still on an older version, nothing significant will actually happen, however, the moment you start seeing some errors when you try to run the project, or inconsistencies with the continuous integration workflows from your local runs, it's a good indication that your dependencies are probably out of date.</p> <p>Ideally, you should run this command as often as possible, if there aren't any new changes, it will simply exit instantly. You should be especially careful when switching git branches, as dependencies might have been changed (most likely a new dependency was introduced, or an old one got removed), so consider running this command whenever you switch to another branch, unless you know that branch didn't make any changes to the project dependencies.</p>"},{"location":"contributing/guides/setup/#dependency-groups","title":"Dependency groups","text":"<p>Uv has a really cool way of splitting up the dependencies that projects need into multiple groups. For example, you can have a group of dependencies for linting &amp; autoformatting, another group for documentation support, unit-testing, for releasing the project, etc.</p> <p>To see which dependencies belong to which group, you can check the <code>pyproject.toml</code> file for the <code>[dependency-groups]</code> section.</p> <p>By default, <code>uv sync</code> will install all default dependency groups and the project's primary dependencies. For us, that means all development dependencies you should need will get installed.</p> <p>The reason why we use groups is because in some of our automated workflows, we don't always need all of the project dependencies and we can save time by only installing the group(s) that we need. It also provides a clean way to quickly see which dependencies are being used for what.</p> <p>The actual runtime dependencies for the project are present directly in <code>[project]</code>, under the <code>dependencies</code> key. These are dependencies without which the project wouldn't be runnable at all. These will become the dependencies of our library when we make a release on PyPI.</p>"},{"location":"contributing/guides/setup/#installing-new-dependencies","title":"Installing new dependencies","text":"<p>During the development, you may sometimes want to introduce a new dependency to the project, to do this, you will first need to decide which dependency group it should belong to. To do this, identify whether this new dependency will be required to run the project, or if it's just some tool / utility that's necessary only during the development.</p> <p>If it's a runtime dependency, all you need to do is run:</p> <pre><code>uv add [name-of-your-dependency]\n</code></pre> <p>This will add the dependency to <code>[project.dependencies]</code>.</p> <p>However, if you're working with a development dependency, you will want to go over the dependency groups we have (from <code>pyproject.toml</code>) and decide where it should belong. Once you figured that out, you can run:</p> <pre><code>uv add --group [group-name] [name-of-your-dependency]\n</code></pre> <p>Note</p> <p>Sometimes, it might make sense to include the same dependency in multiple groups. (Though this is usually quite rare.) If this is the case, you can use the command above, however, make sure to edit the <code>pyproject.toml</code> file manually afterwards, removing the version specification from one of those groups (we only want to keep the version info around once).</p>"},{"location":"contributing/guides/setup/#uninstalling-dependencies","title":"Uninstalling dependencies","text":"<p>Similarly, we sometimes stop needing a certain dependency. Uninstalling is a very similar process to installation. First, find which group you want to remove this dependency from and then run:</p> <pre><code>uv remove --group [group-name] [name-of-your-dependency]\n# or, if it's a runtime dependency, simply:\nuv remove [name-of-your-dependency]\n</code></pre>"},{"location":"contributing/guides/slotscheck/","title":"Slotscheck","text":"Abstract <p>This page explains how we enforce the proper use of <code>__slots__</code> on our classes with <code>slotscheck</code> tool. We go over what slotted classes, what slotscheck enforces, how to run slotscheck and how to configure it.</p> <p>On top of the tools you already saw (ruff &amp; basedpyright), we also have one more tool that performs static analysis on our code: slotscheck.</p>"},{"location":"contributing/guides/slotscheck/#what-is-slotscheck","title":"What is slotscheck","text":"<p>Slotscheck is a tool that focuses on enforcing proper use of <code>__slots__</code> on classes.</p> What are slotted classes <p>If you aren't familiar with slotted classes, you should check the official documentation. That said, if you just want a quick overview:</p> <ul> <li>Slots allow you to explicitly declare all member attributes of a class (e.g. declaring <code>__slots__ = (\"a\", \"b\")</code>   will make the class instances only contain variables <code>a</code> and <code>b</code>, trying to set any other attribute will result   in an <code>AttributeError</code>).</li> <li>The reason we like using slots is the efficiency they come with. Slotted classes use up less RAM and offer   a faster attribute access.</li> </ul> <p>Example of a slotted class:</p> <pre><code>class FooBar:\n    __slots__ = (\"foo\", \"bar\")\n\n    def __init__(self, foo: str, bar: str) -&gt; None:\n        self.foo = foo\n        self.bar = bar\n\nx = FooBar(\"a\", \"b\")\nprint(x.a, x.b)\nx.c = 5  # AttributeError\n</code></pre> <p>With a low level project like mcproto, efficiency is important and <code>__slots__</code> offer such efficiency at a very low cost (of simply defining them).</p> <p>The purpose of <code>slotscheck</code> is to check that our slotted classes are using <code>__slots__</code> properly, as sometimes, it is easy to make mistakes, which result in losing a lot of the efficiency that slots provide. Issues that slotscheck detects:</p> <ul> <li>Detect broken slots inheritance</li> <li>Detect overlapping slots</li> <li>Detect duplicate slots</li> </ul>"},{"location":"contributing/guides/slotscheck/#how-to-use-slotscheck","title":"How to use slotscheck","text":"<p>To run slotscheck on the codebase, you can use the following command:</p> <pre><code>slotscheck -m mcproto\n</code></pre> <p>Make you have an activated virtual environment and you're in the project's root directory.</p>"},{"location":"contributing/guides/slotscheck/#configuring-slotscheck","title":"Configuring slotscheck","text":"<p>Sometimes, you may want to ignore certain files from being checked. To do so, you can modify the slotscheck configuration in <code>pyproject.toml</code>, under the <code>[tool.slotscheck]</code> option. That said, doing so should be very rare and you should have a very good reason to ignore your file instead of fixing the underlying issue.</p>"},{"location":"contributing/guides/style-guide/","title":"Style Guide","text":"Abstract <p>This page describes how we use <code>ruff</code> to enforce a consistent code style in our project.</p> <p>For clarity and readability, adhering to a consistent code style across the whole project is very important. It is not unusual that style adjustments will be requested in pull requests.</p> <p>It is always a good practice to review the style of the existing code-base before and to adhere to that established style before adding something new. That applies even if it isn't the code style you generally prefer. (That said, if you think a code style change of some kind would be justified, feel free to open an issue about it and tell us why.)</p> <p>Quote</p> <p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.</p> <p>However, know when to be inconsistent -- sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask!</p> <p>\u2014 PEP 8, the general Style Guide for Python Code</p> Check out the PEP8 song <p>The Python Discord community have made an amazing song about PEP8, check it out here!</p>"},{"location":"contributing/guides/style-guide/#automatic-linting","title":"Automatic linting","text":"<p>As there is a lot of various code style rules we adhere to in our code base, describing all of them here would take way too long and it would be impossible to remember anyway. For that reason, we use automated tools to help us catch any code style violations automatically.</p> <p>Currently, we use <code>ruff</code> to enforce most of our code style requirements. That said, we do have some other tools that check the correctness of the code, we will describe those later.</p>"},{"location":"contributing/guides/style-guide/#ruff-linter-formatter","title":"Ruff linter &amp; formatter","text":"<p>Ruff is an all-in-one linter &amp; formatter solution, which aims to replace three previously very popular tools into a single package:</p> <ul> <li><code>flake8</code> linter</li> <li><code>isort</code> import sorter</li> <li><code>black</code> auto-formatter</li> </ul> Why pick ruff over the combination of these tools? <p>There were multiple reasons why we chose ruff instead of using the above tools individually, here's just some of them:</p> <ul> <li>Ruff is faster (written in rust! )</li> <li>A single tool is more convenient than 3 separate ones</li> <li>Ruff includes a lot of flake8 plugins with some great lint rules</li> <li>Ruff has a great community and is slowly managing to overtake these individual projects</li> <li>If you're already used to flake8, you'll feel right at home with ruff, it even has the same error codes (mostly)!</li> </ul> <p>You can check the ruff configuration we're using in <code>pyproject.toml</code> file, under the <code>[tool.ruff]</code> category (and it's subcategories). You can find which linter rules are enabled and which we choose to exclude, some file-specific overrides where the rules apply differently and a bunch of other configuration options.</p>"},{"location":"contributing/guides/style-guide/#linter","title":"Linter","text":"<p>To run ruff linter on the code, open the terminal in the project's root directory and run:</p> <pre><code>ruff check .\n</code></pre> <p>Don't forget to activate the virtual environment before running ruff.</p> <p>Ruff is really smart and it can often automatically fix some of the style violations it found. To make ruff do that, you can add the <code>--fix</code> flag to the command:</p> <pre><code>ruff check --fix .\n</code></pre> <p>If you got a rule violation in your code and you don't understand what the rule's purpose is supposed to be / why we enforce it, you can use Ruff to show you some details about that rule. The explanation that ruff will give you will often even contain code examples. To achieve this, simply run:</p> <pre><code>ruff rule [rule-id]\n</code></pre> <p>With the <code>[rule-id]</code> being the rule you're interested in, for example <code>UP038</code>.</p> Use glow to render the markdown syntax from ruff rule command <p>The <code>ruff rule</code> command will output the rule explanation in markdown, however, since you're running this comand in a terminal, there won't be any helpful syntax highlighting for that by default.</p> <p>That's why I'd recommend using a markdown render such as <code>glow</code>. With it, you can pipe the output from ruff into it and have it produce a fancy colored output, that's much easier to read: <code>ruff rule UP038 | glow</code>.</p> <p>Alternatively, you can also find the rules and their description in the ruff documentation.</p>"},{"location":"contributing/guides/style-guide/#formatter","title":"Formatter","text":"<p>On top of being an amazing linter, ruff is also an automatic code formatter. That means ruff can actually make your code follow a proper and style automatically! It will just take your original unformatted (but valid) python code and edit it to meet our configured code style for you.</p> <p>To make ruff format your code, simply run:</p> <pre><code>ruff format .\n</code></pre>"},{"location":"contributing/guides/style-guide/#editor-integration","title":"Editor integration","text":"<p>While you can run ruff from the terminal manually, you'll have a much easier time if you integrate it into your editor. Ruff supports most of the common code editors, just follow their docs.</p>"},{"location":"contributing/guides/style-guide/#other-style-guidelines","title":"Other style guidelines","text":"<p>While <code>ruff</code> can do a lot, it can't do everything. There are still some guidelines that you will need to read over and apply manually. You will find these guides on the next pages of this documentation.</p>"},{"location":"contributing/guides/type-hints/","title":"Type Hints","text":"Abstract <p>This article explains what python type-hints are, how they can be enforced with the use of type checkers and the type checker of our choice: basedpyright and it's editor integration.</p> <p>Most people only know python as a dynamically typed language, that doesn't offer any kind of type safety. In the very days of python, this was true, however today, things are a bit different. Even though Python on it's own is still a dynamically typed language, it does actually support specifying \"type hints\" which can even be enforced by external tools called \"type checkers\". With those, we can achieve a (mostly) type safe experience while using Python.</p>"},{"location":"contributing/guides/type-hints/#regular-python","title":"Regular python","text":"<p>In regular python, as most people know it, you might end up writing a function like this:</p> <pre><code>def add(x, y):\n  return x + y\n</code></pre> <p>In this code, you have no idea what the type of <code>x</code> and <code>y</code> arguments should be. So, even though you may have intended for this function to only work with numbers (ints), it's actually entirely possible to use it with something else. For example, running <code>add(\"hello\", \"world)</code> will return <code>\"helloworld\"</code> because the <code>+</code> operator works on strings too.</p> <p>The point is, there's nothing telling you what the type of these parameters should be, and that could lead to misunderstandings. Even though in some cases, you can figure out what the type should these variables have purely based on their name alongside the name of the function, in most cases, it's not that easy. It often requires looking through the docs, or going over the actual source code of such function.</p> <p>Annoyingly, python won't even prevent you from passing in types that are definitely incorrect, like: <code>add(1, \"hi\")</code>. Running this would cause a <code>TypeError</code>, but unless you have unit-tests that actually run that code, you won't find out about this bug until it actually causes an issue and at that point, it might already be too late, since your code has crashed a production app.</p> <p>Clearly then, this isn't ideal.</p>"},{"location":"contributing/guides/type-hints/#type-hints_1","title":"Type-Hints","text":"<p>While python doesn't require it, there is in fact a way to add a \"hint\" that indicates what type should a given variable have. So, when we take the function from above, adding type-hints to it would result in something like this:</p> <pre><code>def add(x: int, y: int) -&gt; int:\n  return x + y\n</code></pre> <p>We've now made the types very explicit to the programmer, which means they'll no longer need to spend a bunch of time looking through the implementation of that function, or going through the documentation just to know how to use this function. Instead, the type hints will tell just you.</p> <p>This is incredibly useful, because most editors will be able to pick up these type hints, and show them to you while calling the function, so you know what to pass right away, without even having to look at the function definition where the type-hints are defined.</p> <p>Not only that, specifying a type-hint will greatly improve the development experience in your editor / IDE, because you'll get much better auto-completion. The thing is, if you have a parameter like <code>x</code>, but your editor doesn't know what type it should have, it can't really help you if you start typing <code>x.remove</code>, looking for the <code>removeprefix</code> function. However, if you tell your editor that <code>x</code> is a string (<code>x: str</code>), it will now be able to go through all of the methods that strings have, and show you those that start with <code>remove</code> (being <code>removeprefix</code> and <code>removesuffix</code>).</p> <p>This makes type-hints great at saving you time while developing, even though you have to do some additional work when specifying them.</p>"},{"location":"contributing/guides/type-hints/#runtime-behavior","title":"Runtime behavior","text":"<p>Even though type-hints are a part of the Python language, the interpreter doesn't actually care about them. That means that the interpreter doesn't do any optimizations or checking when you're running your code, even if you have a function like <code>add</code> that we have added type-hints to, code like <code>add(1, \"hi\")</code> will not cause any immediate errors.</p> <p>Most editors are configured very loosely when it comes to type-hints. That means they will show you these hints when you're working with the function, but they won't produce warnings when you pass in the wrong thing. That's why they're called \"type hints\", they're only hints that can help you out, but they aren't actually enforced.</p>"},{"location":"contributing/guides/type-hints/#enforcing-type-hints-type-checkers","title":"Enforcing type hints - Type Checkers","text":"<p>Even though python on it's own indeed doesn't enforce the type-hints you specify, there are tools that can run \"static\" checks against your code. A static check is a check that works with your code in it's textual form. It will read the contents of your python files without actually running that file and analyze it purely based on that text content.</p> <p>Using these tools will allow you to analyze your code for typing mistakes before you ever even run your program. That means having a function call like <code>add(1, \"hi\")</code> anywhere in your code would be detected and reported as an issue.</p> <p>There is a bunch of these tools available for python, but the most common ones are <code>pyright</code> and <code>mypy</code>.</p>"},{"location":"contributing/guides/type-hints/#basedpyright","title":"BasedPyright","text":"<p>The type checker that we use in our code-base is basedpyright. It's a fork of pyright which adds some extra checks and features and focuses more on the open-source community, than the official Microsoft owned Pyright.</p>"},{"location":"contributing/guides/type-hints/#running-basedpyright","title":"Running BasedPyright","text":"<p>To run BasedPyright on the code-base, you can use the following command:</p> <pre><code>basedpyright .\n</code></pre> <p>You will need to run this from an activated vertual environment while in the project's root directory.</p>"},{"location":"contributing/guides/type-hints/#editor-integration","title":"Editor Integration","text":"VSCodeNeovim <p>On vscode, you can simply install the BasedPyright extension from the marketplace.</p> <p>Note that this extension does collide with the commonly used Pylance extension, which is installed automatically alongside the Python extension and provide intellisense for Python. The reason BasedPyright collides with this extension is that Pylance actually uses pyright as a language server in the background, and as we mentioned, basedpyright is an alternative, so using both would cause duplicate errors. This means that you will need to disable Pylance, at least within our codebase.</p> <p>If you're using Neovim, I would recommend setting up LSP (Language Server Protocol) and installing basedpyright, as it has language server support built into it. You can achieve this with the <code>lspconfig</code> plugin. You can then use <code>mason-lspconfig</code> to install <code>basedpyright</code>, or manually configure <code>lspconfig</code> and use your system-wide <code>basedpyright</code> executable.</p>"},{"location":"contributing/guides/type-hints/#great-resources","title":"Great resources","text":"<p>While type hinting might seem very simple from the examples shown above, there is actually a fair bit to it, and if you never worked within a type checked code-base, you should definitely check out some of these resources, which go over the basics.</p> <ul> <li>Getting started with type hints in Python - a   blog post / tutorial by decorator-factory.</li> <li>Basics of static typing - part of the BasedPyright documentation</li> <li>Mypy documentation - very extensive documentation on various typing   concepts. (Some things are mypy focused, but most things will cary over to basedpyright too)</li> <li>Python documentation for the <code>typing</code> module - Python's standard   library contains a <code>typing</code> module, which holds a bunch of useful structures that we often use while working with   type-hints.</li> <li>PEP 484 - formal specification of type hints for the Python langauge</li> </ul>"},{"location":"contributing/guides/unit-tests/","title":"Testing the library","text":"Abstract <p>This article explains how to write unit-tests with the pytest framework, showcasing the basics of testing, good practices, etc. Additionally, it also explains our testing file structure, toolings we use for testing and other guidelines.</p> <p>This guide is fairly long as it covers the basics of testing alongside various examples to get even the complete beginners comfortable and familiar with how python tests work. If you're already familiar with some of these concepts, you may benefit from skipping certain chapters.</p> <p>Since there are many people that rely on this library working properly, and we don't want to accidentally introduce some changes which would cause it to break, we're using unit-tests that validate the individual components in our code-base work properly.</p> <p>NOTE: This is a practical guide to quickly get you started with writing unit-tests, not a full introduction to what unit-tests are. That means it will only cover the basics and general concepts. If you're looking for a full introduction, you can take a look at the Additional Resources section at the bottom.</p>"},{"location":"contributing/guides/unit-tests/#tools","title":"Tools","text":"<p>We are using the following modules and packages for our unit tests:</p> <p>We are using the following modules and packages for our unit tests:</p> <ul> <li>pytest</li> <li>pytest-cov</li> <li>coverage.py (as a part of pytest-cov)</li> <li>unittest.mock (standard library)</li> </ul> <p>We decided on using <code>pytest</code> instead of the <code>unittest</code> module from standard library since it's much more beginner friendly and it's generally easier to use.</p>"},{"location":"contributing/guides/unit-tests/#running-tests","title":"Running tests","text":"<p>When running the tests, you should always be in an activated virtual environment.</p> <p>To make things simpler, we made a few shortcuts/aliases using <code>poe</code>:</p> <ul> <li><code>poe test</code> will run all unit-tests using <code>pytest</code> and collect code coverage information</li> <li><code>poe test tests/test_foobar.py</code> will run specific test</li> <li><code>poe retest</code> will rerun only previously failed tests</li> </ul> <p>When actively developing, you'll most likely only be working on some portion of the code-base, and as the result, you won't need to run the entire test suite, instead you can only run tests for a specific file with</p> <pre><code>poe test /path/to/test.py\n</code></pre> <p>When you are done and are preparing to commit and push your code, it's a good idea to run the entire test suite as a sanity check that you haven't accidentally introduced some unexpected bugs:</p> <pre><code>poe task test\n</code></pre>"},{"location":"contributing/guides/unit-tests/#writing-tests","title":"Writing tests","text":"<p>Since consistency is an important consideration for collaborative projects, we have written some guidelines on writing tests for the project. In addition to these guidelines, it's a good idea to look at the existing code base for examples.</p>"},{"location":"contributing/guides/unit-tests/#file-and-directory-structure","title":"File and directory structure","text":"<p>To organize our test suite, we have chosen to mirror the directory structure of <code>mcproto</code> in <code>tests/mcproto</code> directory. This makes it easy to find the relevant tests by providing a natural grouping of files. More general testing files, such as <code>helpers.py</code> are located directly in the <code>tests</code> directory.</p> <p>All files containing tests should have a filename starting with <code>test_</code> to make sure <code>pytest</code> will discover them. This prefix is typically followed by the name of the file the tests are written for.</p>"},{"location":"contributing/guides/unit-tests/#writing-independent-tests","title":"Writing independent tests","text":"<p>When writing unit tests, it's important to make sure that each test that you write runs independently from all of the other tests. This both means that the code you write for one test shouldn't influence the result of another test and that if one tests fails, the other tests should still run.</p> <p>Each of test should only ever cover a single subproblem, and if something else needs testing, it should be in another independent test. This then prevents tests for X from failing because of Y, instead Y should be tested in another test. In other words, don't write tests that check \"everything\", rather, write multiple smaller tests.</p> <p>However, independent tests often require similar preparation steps. Since you'll be splitting these tests, to avoid repetition, <code>pytest</code> provides fixtures that can be executed before and after each test is run. In addition to test fixtures, it also provides support for parametrization, which is a way of re-running the same test function with different values. If there's a failure, pytest will then show us the values that were being used when this failure occurred, making it a much better solution than just manually using them in the test function.</p>"},{"location":"contributing/guides/unit-tests/#using-parametrization-to-repeat-the-same-tests-with-different-values","title":"Using parametrization to repeat the same tests with different values","text":"<pre><code>import pytest\n\n\ndef add(x: int, y: int) -&gt; int:\n    return x + y\n\n@pytest.mark.parametrize(\n    (\"num1\", \"num2\", \"expected_result\"),\n    [\n        (1, 1, 2),\n        (1, 0, 1),\n        (0, 0, 0),\n        (5, -5, 0),\n    ]\n)\ndef test_add(num1: int, num2: int, expected_result: int) -&gt; None:\n    assert add(num1, num2) == expected_result\n</code></pre>"},{"location":"contributing/guides/unit-tests/#using-fixtures-to-prepare-shared-setup-for-multiple-tests","title":"Using fixtures to prepare shared setup for multiple tests","text":"<pre><code>import pytest\n\n\nclass User:\n    def __init__(self, name: str) -&gt; None:\n        self.name = name\n\n@pytest.fixture\ndef test_user() -&gt; User:\n    return User(name=\"John Doe\")\n\n\ndef test_user_name_starts_with_capital(user: User) -&gt; None:\n    assert user.name[0].isupper()\n\n\ndef test_user_name_contains_space(user: User) -&gt; None:\n    assert \" \" in user.name\n</code></pre> <p>Here, both tests get access to the same user instance, created cleanly and consistently before each test. Pytest takes care of calling the user() fixture and passing its return value into the test function.</p> <p>Fixtures can be very versatile, as you can even perform patching within them, request other fixtures within fixtures, etc. You should check out the pytest documentation on fixtures.</p>"},{"location":"contributing/guides/unit-tests/#mocking","title":"Mocking","text":"<p>As we are trying to test our \"units\" of code independently, we want to make sure that we don't rely on objects and data generated by \"external\" code (things like database queries, API calls or even our own utility functions). This is because when relying on external objects, we might end up observing a failure for reasons unrelated to the specific logic we're trying to validate, e.g. a failure in one of the utility methods of that object, rather than the code we're actually testing here.</p> <p>You can think of mocks as \"fake\" objects, that behave like the real ones, but give us full control over what exactly they do, allowing us to focus on testing our code, and not the utilities around it (those deserve their own tests, if internal).</p> <p>In Python, we use the <code>unittest.mock</code> module (part of python's standard library) to create these mock objects.</p>"},{"location":"contributing/guides/unit-tests/#basic-example-pizza-delivery","title":"Basic Example: Pizza Delivery","text":"<p>Let\u2019s say you\u2019re testing a <code>PizzaOrder</code> class that depends on a delivery service. You don\u2019t want to actually call the real delivery service in your test - that could cost money (and confuse your local pizzeria).</p> <p>So instead, you mock it:</p> <pre><code>from unittest.mock import Mock\nfrom collections.abc import Callable\n\nclass DeliveryService:\n    def send(self, pizza_type: str, quantity: int) -&gt; str:\n        # Imagine this sends a request to an external delivery API.\n        raise NotImplementedError(\"Real delivery not implemented\")\n\nclass PizzaOrder:\n    def __init__(self, delivery_service: DeliveryService):\n        self.delivery_service = delivery_service\n        self.confirmation = self.delivery_service.send(\"Margherita\", 2)\n\ndef test_order_triggers_delivery():\n    mock_service = MagicMock()\n    mock_service.send.return_value = \"Order #42 confirmed\"\n\n    order = PizzaOrder(mock_service)\n\n    assert order.confirmation == \"Order #42 confirmed\"\n    mock_service.send.assert_called_once_with(\"Margherita\", 2)\n</code></pre> <p>We created a mock <code>delivery_service</code>, with a fake <code>send</code> function, instructed to return a specific value, and then confirmed that it was called with the right arguments. And the best part? No pizzas were ordered in the making of this test.</p>"},{"location":"contributing/guides/unit-tests/#more-interactive-example-different-orders-different-confirmations","title":"More interactive example: Different Orders, Different confirmations","text":"<p>Mocks can do much more than just return the same value every time. If you want your mock to behave differently based on how it\u2019s called - like returning different results for different pizza orders - you can use the <code>side_effect</code> argument instead of <code>return_value</code>.</p> <p>Let\u2019s say we want the delivery service to give us different confirmation messages based on the pizza being ordered. We can test that with a mock that changes the behavior based on the input using <code>side_effect</code>:</p> <pre><code>def test_dynamic_delivery_confirmations() -&gt; None:\n    def fake_send(pizza: str, count: int) -&gt; str:\n        if pizza == \"Hawaiian\":\n            return \"Sorry, we don't deliver pineapple crimes.\"\n        return f\"Confirmed: {count}x {pizza}\"\n\n    mock_service = MagicMock()\n    mock_service.send.side_effect = fake_send\n\n    order1 = PizzaOrder(mock_service, \"Margherita\", 2)\n    order2 = PizzaOrder(mock_service, \"Hawaiian\", 1)\n\n    assert order1.confirmation == \"Confirmed: 2x Margherita\"\n    assert order2.confirmation == \"Sorry, we don't deliver pineapple crimes.\"\n\n    assert mock_service.send.call_count == 2\n    mock_service.send.assert_any_call(\"Margherita\", 2)\n    mock_service.send.assert_any_call(\"Hawaiian\", 1)\n</code></pre> <p>Now your mock is dynamic - it behaves like a miniature fake system, giving you different outputs based on inputs. This is incredibly useful when testing code that has to respond to multiple conditions.</p>"},{"location":"contributing/guides/unit-tests/#other-uses-of-side_effect","title":"Other uses of <code>side_effect</code>","text":"<p>We\u2019ve seen how <code>side_effect</code> can be used to return different results based on the input, by passing it a callable. But that\u2019s not the only thing it can do. The <code>side_effect</code> parameter is surprisingly versatile and supports several powerful patterns:</p>"},{"location":"contributing/guides/unit-tests/#raising-exceptions","title":"Raising Exceptions","text":"<p>You can use <code>side_effect</code> to easily simulate errors by assigning it to an exception class or instance. This is useful when testing how your code handles failure cases, like a delivery service outage.</p> <pre><code>def test_delivery_failure() -&gt; None:\n    mock_service = MagicMock()\n    mock_service.send.side_effect = RuntimeError(\"Delivery system is down\")\n\n    with pytest.raises(RuntimeError):\n        PizzaOrder(mock_service, \"Pepperoni\", 1)\n</code></pre> <p>You could of course also use a full function that would raise internally, but this is a much more convenient way to achieve it.</p>"},{"location":"contributing/guides/unit-tests/#sequence-of-return-values-andor-exceptions","title":"Sequence of return values (and/or exceptions)","text":"<p>Instead of writing a function, you can also assign <code>side_effect</code> a list (or any iterable). On each call, the mock will return the next value in the sequence, or raise an exception if the next item is one.</p> <p>This is great when testing retries, fallbacks, or just varied responses:</p> <pre><code>def test_multiple_calls_with_varied_outcomes() -&gt; None:\n    mock_service = MagicMock()\n    mock_service.send.side_effect = [\n        \"Confirmed: 1x Margherita\",\n        RuntimeError(\"Out of dough\"),\n        \"Confirmed: 1x Pepperoni\",\n    ]\n\n    order1 = PizzaOrder(mock_service, \"Margherita\", 1)\n    assert order1.confirmation == \"Confirmed: 1x Margherita\"\n\n    with pytest.raises(RuntimeError):\n        PizzaOrder(mock_service, \"Hawaiian\", 1)\n\n    order3 = PizzaOrder(mock_service, \"Pepperoni\", 1)\n    assert order3.confirmation == \"Confirmed: 1x Pepperoni\"\n</code></pre> <p>Info</p> <p>The mock will raise <code>StopIteration</code> if you call it more times than there are items, so keep the list long enough for your test case.</p>"},{"location":"contributing/guides/unit-tests/#using-spec_set","title":"Using <code>spec_set</code>","text":"<p>By default, mocks are very permissive; You can access any attribute or call any method on them and it\u2019ll \u201cjust work\u201d. That\u2019s great for flexibility, but not so great for catching typos or invalid method calls.</p> <p>As an example, this code would work:</p> <pre><code>from unittest.mock import Mock\n\nmy_mock = Mock()\nx = my_mock.made_up_method().even_more_fake().foobar() # x will be just another mock object\n</code></pre> <p>To tighten this up, use the <code>spec_set</code> argument. It tells the mock to only allow access to attributes/methods that exist on a given object or type.</p> <p>Let's see an example of how this could be useful:</p> <pre><code>def greet(name: str) -&gt; str:\n    return name.capatilize() + \", welcome!\"  # Oops!\n\n\ndef test_foo():\n    mock_str = Mock(spec_set=str)\n    greet(mock_str)  # AttributeError: Mock object has no attribute 'capitilize'\n</code></pre> <p>Boom! The typo gets caught immediately. Setting <code>spec_set=str</code> means the mock will only allow attributes that actually exist on a real <code>str</code> object.</p> <p>Tip</p> <p>You can also use <code>spec</code> (instead of <code>spec_set</code>) , which will restrict which attributes and methods you can access (based on the original object - like with <code>spec_set</code>), but still allows you to set new ones dynamically. E.g. allows <code>mock.foobar = 1</code> and later use of <code>mock.foobar</code>. For stricter validation, stick with <code>spec_set</code>.</p> <p>There is one important thing to keep in mind though. <code>spec_set</code> only applies to the first level. For example, if you call <code>mock.removesuffix(\";\").removeprefx(\";\")</code>, only the first call (<code>removesuffix</code>) is validated. The return value is a regular unrestricted Mock, so the second typo slips through.</p> <p>Multi-level spec-set mocks</p> <p>If you need a stricter multi-level mocks, you can manually configure return values, for example like so:</p> <pre><code>inner = Mock(spec_set=inner_object_spec)\nouter = Mock(spec_set=outer_object_spec, some_method=Mock(return_value=inner))\n\nouter.some_method  # this will now give you the `inner` mock\n</code></pre> <p>But honestly, this usually isn't worth the effort, unless the return value is something you're specifically testing. Mocks should help you target specific behavior, not recreate every detail of the real world, after all, that's what we're actually trying to avoid.</p>"},{"location":"contributing/guides/unit-tests/#mock-types","title":"Mock types","text":"<p>So far, we've only used the <code>Mock</code> class, which is the most common and flexible type of mock object. But depending on what you're testing, you might run into situations where <code>Mock</code> is not enough.</p> <p>Python\u2019s <code>unittest.mock</code> module gives you a few specialized variants:</p>"},{"location":"contributing/guides/unit-tests/#magicmock","title":"<code>MagicMock</code>","text":"<p><code>MagicMock</code> is just like <code>Mock</code>, but it also supports Python\u2019s magic methods (like <code>__len__</code>, <code>__getitem__</code>, <code>__enter__</code>, etc.). Use this if you're mocking an object that behaves like a container, context manager, or something else with special behavior.</p> <pre><code>from unittest.mock import MagicMock\n\nmock_list = MagicMock()\nlen(mock_list)  # works, returns another mock\n\nmock_list.__len__.return_value = 3  # also works (regular Mocks don't let you set __len__)\nassert len(mock_list) == 3\n</code></pre>"},{"location":"contributing/guides/unit-tests/#asyncmock","title":"<code>AsyncMock</code>","text":"<p><code>AsyncMock</code> is designed for mocking asynchronous code, like async functions, coroutines, and <code>await</code>-able objects. If you mock an async function with a regular <code>Mock</code>, it won't actually be awaitable and your test might break (or worse, pass silently without actually testing anything).</p> <p>This comes up all the time when dealing with I/O: databases, APIs, background tasks, etc.</p> <pre><code>import pytest\nfrom unittest.mock import AsyncMock\n\n# Here's our async function that relies on some async data fetch\nasync def praise_user(user_id: int, fetch_user: Callable[[int], Awaitable[User]]):\n    user = await fetch_user(user_id)\n    return f\"{user['name']} is doing great!\"\n\nasync def test_praise_user() -&gt; None:\n    # Set up a fake async function that returns a predictable value\n    mock_fetch_user = AsyncMock(return_value={\"id\": 42, \"name\": \"Jake\"})\n\n    # Inject it just like you would in real code\n    message = await praise_user(42, fetch_user=mock_fetch_user)\n\n    assert message == \"Jake is doing great!\"\n    mock_fetch_user.assert_awaited_once_with(42)\n</code></pre>"},{"location":"contributing/guides/unit-tests/#when-not-to-use-mocks","title":"When NOT to use Mocks","text":"<p>Mocks are great for isolating code and avoiding unwanted side effects, but don\u2019t reach for them by default. If a function calls a simple internal utility that\u2019s tightly coupled to its behavior, it's often fine to let it run as-is.</p> <p>Mocking that utility might make your test harder to read, or even force you to replicate its behavior in the mock - which defeats the point. In cases like that, it's usually best to treat the utility as part of the logic under test, especially when the utility is already well-tested on its own, making using the real thing often safer and more reliable than a rough imitation.</p> <p>Rule of thumb: If mocking something makes your test more vague, or you'd have to \"rebuild\" its logic just to fake it, skip the mock and use the real implementation. But if the utility has unwanted side effects (like API calls or disk writes), mocking is the right call.</p>"},{"location":"contributing/guides/unit-tests/#designing-a-more-involved-example-socket-mocking","title":"Designing a more involved example (socket mocking)","text":"<p>Now that we know a fair bit about mocks, let's take a look at something closer to what you'll see in our codebase.</p> <p>What if we wanted to ensure that our connection can properly read data that were sent to us through a socket?</p> <pre><code>import socket\nfrom unittest.mock import Mock\n\nfrom mcproto.connection import TCPSyncConnection\n\n\ndef test_connection_reads_correct_data():\n    mock_socket = Mock(spec_set=socket.socket)\n    mock_socket.recv.return_value = bytearray(\"data\", \"utf-8\")\n    conn = TCPSyncConnection(mock_socket)\n\n    received = conn.read(4)  # 4 bytes, for 4 characters in the word \"data\"\n    assert received == bytearray(\"data\", \"utf-8\")\n    mock_socket.recv.assert_called_once_with(4)\n</code></pre> <p>Cool! But in real tests, we'll often want to make use of something a bit more complicated, as right now, our <code>recv</code> mock method will just naively return 4 byte long data no matter what the passed length attribute was. In the earlier example, this isn't a huge problem, but the issue begins to surface when we try to read a more complex custom format, like a varint for example, which can involve more reads with differing lengths that together just form a single number, encoded in a specific way.</p> <p>We could do this with <code>side_effect</code> and specify a list of byte values that would be returned from each read, however, we don't want to rely on the specific read sizes, for us, those are an implementation detail, and we don't want our tests to test implementation, rather, we just want to test the external behavior.</p> <p>It would also be nice to make this a bit more general, so that we can reuse a mock that would behave in this way across multiple tests for various connection methods.</p> <p>Doing all this is a bit more complex, but it's still doable, let's see it:</p> <pre><code>from unittest.mock import Mock\n\nfrom mcproto.connection import TCPSyncConnection\n\n\nclass ReadFunctionMock(Mock):\n    def __init__(self, *a, combined_data: bytearray, **kw):\n        super().__init__(*a, **kw)\n        self.combined_data = combined_data\n\n    def __call__(self, length: int) -&gt; bytearray:\n        \"\"\"Override mock's `__call__` to make it return part of our `combined_data` bytearray.\n\n        This allows us to make the return value always be the next requested part (length) of\n        the `combined_data`. It would be difficult to replicate this with regular mocks,\n        because some functions can end up making multiple read calls, and each time the result\n        needs to be different (the next part).\n        \"\"\"\n        self.return_value = self.combined_data[:length]\n        del self.combined_data[:length]\n\n        # Call base Mock's __call__, this will return the above set return_value\n        # while also registering the call\n        return super().__call__(length)\n\nclass MockSocket(Mock):\n    def __init__(self, *args, read_data: bytearray, **kwargs) -&gt; None:\n        super().__init__(*args, spec_set=socket.socket, **kwargs)\n        self._recv = ReadFunctionMock(combined_data=read_data)\n\n    def recv(self, length: int) -&gt; bytearray:\n        return self._recv(length)\n\n\ndef test_connection_partial_read():\n    mock_socket = MockSocket(read_data=bytearray(\"data\", \"utf-8\"))\n    conn = TCPSyncConnection(mock_socket)\n\n    data1 = conn.read(2)\n    assert data1 == bytearray(\"da\", \"utf-8\")\n    data2 = conn.read(2)\n    assert data2 == bytearray(\"ta\", \"utf-8\")\n\ndef test_connection_empty_read_fails():\n    mock_socket = MockSocket(read_data=bytearray())\n    conn = TCPSyncConnection(mock_socket)\n\n    with pytest.raises(IOError, match=\"Server did not respond with any information.\"):\n        conn.read(1)\n\ndef test_connection_read_varint():\n    varint_bytes = [128, 128, 1]  # bytes forming number 16384 in varint encoding\n    mock_socket = MockSocket(read_data=bytearray(varint_bytes))\n    conn = TCPSyncConnection(mock_socket)\n\n    result = conn.read_varint()  # will make a bunch of reads\n\n    assert result == 16384\n</code></pre>"},{"location":"contributing/guides/unit-tests/#patching","title":"Patching","text":"<p>Even though mocking is a great way to let us use fake objects acting as real ones, without patching, we can only use mocks as arguments. However that greatly limits us in what we can test, or places restrictions on how we have to implement our internal behavior, just to make it testable. In practice, some functions may be calling/referencing the external resources that we'd like to mock directly inside of them, without being overridable through arguments.</p> <p>Cases like these are when patching comes into the picture. Basically, patching is just about (usually temporarily) replacing some built-in / external code object, by a mock, or some other object that we can control from the tests.</p> <p>A good example would be for example the <code>open</code> function for reading/writing files. We likely don't want any actual files to be written during our testing, however we might need to test a function that writes some files internally, and perhaps check that the content written matches some pattern, ensuring that it works properly.</p> <p>There is built-in support for patching in the unittest.mock library, or you can also use <code>pytest</code>'s monkeypatching which can act as a fixture and integrates well with the rest of our test codebase, which is written with pytest in mind. However, either method is acceptable when patching.</p>"},{"location":"contributing/guides/unit-tests/#faking-the-time","title":"Faking the time","text":"<p>Let\u2019s start with something small, but oddly satisfying: pretending that the current time is whatever we want. Maybe you have a function that behaves differently on weekends, or logs the current date in a specific format.</p> <pre><code>from datetime import datetime\n\ndef get_greeting():\n    now = datetime.now()\n    if now.hour &lt; 12:\n        return \"Good morning\"\n    return \"Good afternoon\"\n</code></pre> <p>Here\u2019s how we can fake time using <code>monkeypatch</code> and control <code>datetime.now()</code>:</p> <pre><code>import pytest\nfrom datetime import datetime\n\nfrom yourmodule import get_greeting\n\ndef test_morning_greeting(monkeypatch: pytest.MonkeyPatch) -&gt; None:\n    mock_datetime = Mock(spec_set=datetime)\n    mock_datetime.now.return_value = datetime(2025, 1, 1, 9, 0)\n\n    # Patch datetime *where it is used* \u2014 e.g., \"yourmodule.datetime\"\n    monkeypatch.setattr(\"yourmodule.datetime\", mock_datetime)\n\n    assert get_greeting() == \"Good morning\"\n\ndef test_afternoon_greeting(monkeypatch: pytest.MonkeyPatch) -&gt; None:\n    mock_datetime = Mock(spec_set=datetime)\n    mock_datetime.now.return_value = datetime(2025, 1, 1, 15, 0)\n\n    # Patch datetime *where it is used* \u2014 e.g., \"yourmodule.datetime\"\n    monkeypatch.setattr(\"yourmodule.datetime\", mock_datetime)\n\n    assert get_greeting() == \"Good afternoon\"\n</code></pre>"},{"location":"contributing/guides/unit-tests/#patching-attribute-on-an-imported-class","title":"Patching attribute on an imported class","text":"<p>Let\u2019s say your code needs to fetch some mysterious prophecy from a remote server. But you're a responsible developer and don\u2019t want your tests waiting on actual prophecies.</p> <pre><code>import httpx\n\nasync def fetch_prophecy():\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\"https://fake.api/prophecy\")\n        return response.json()[\"message\"]\n</code></pre> <p>We\u2019ll use <code>AsyncMock</code> to fake both the async <code>.get()</code> call and the context manager behavior of <code>AsyncClient</code>:</p> <pre><code>import pytest\nfrom unittest.mock import AsyncMock, Mock\n\nfrom yourmodule import fetch_prophecy\n\nasync def test_fetch_prophecy(monkeypatch: pytest.MonkeyPatch) -&gt; None:\n    # Fake response object with json() returning our pretend prophecy\n    fake_response = Mock()\n    fake_response.json.return_value = {\"message\": \"The bug shall return at dusk.\"}\n\n    # AsyncMock for the client, get() is awaited\n    fake_client = AsyncMock()\n    fake_client.get.return_value = fake_response\n\n    # Make sure AsyncClient works as an async context manager\n    fake_client.__aenter__.return_value = fake_client\n\n    # Patch the constructor of AsyncClient to return our fake client\n    monkeypatch.setattr(\"yourmodule.httpx.AsyncClient\", lambda: fake_client)\n\n    result = await fetch_prophecy()\n\n    assert result == \"The bug shall return at dusk.\"\n    fake_client.get.assert_awaited_once_with(\"https://fake.api/prophecy\")\n</code></pre>"},{"location":"contributing/guides/unit-tests/#some-considerations","title":"Some considerations","text":"<p>Finally, there are some considerations to make when writing tests, both for writing tests in general and for writing tests for our project in particular.</p>"},{"location":"contributing/guides/unit-tests/#test-coverage-is-a-starting-point","title":"Test coverage is a starting point","text":"<p>Having test coverage is a good starting point for unit testing: If a part of your code was not covered by a test, we know that we have not tested it properly. The reverse is unfortunately not true: Even if the code we are testing has 100% branch coverage, it does not mean it's fully tested or guaranteed to work.</p> <p>One problem is that 100% branch coverage may be misleading if we haven't tested our code against all the realistic input it may get in production. For instance, take a look at the following <code>format_join_time</code> function and the test we've written for it:</p> <pre><code># Source file:\nfrom datetime import datetime\n\ndef format_join_time(name: str, time: datetime | None = None) -&gt; str:\n    str_time = time.strfptime(\"%d-%m-%Y\") if time else \"unknown\"\n    return f\"User {name!r} has joined, time: {str_time}\"\n\n# Test file:\nfrom source_file import format_join_time\n\ndef test_format_join_time():\n    res = format_join_time(\"ItsDrike\", None)\n    assert res == \"User 'ItsDrike' has joined, time: unknown\"\n</code></pre> <p>If you were to run this test, the function pass the test, and the branch coverage would show 100% coverage for this function. Can you spot the bug the test suite did not catch?</p> <p>The problem here is that we have only tested our function with a time that was <code>None</code>. That means that <code>time.strptime(\"%d-%m-%Y)</code> was never executed during our test, leading to us missing the spelling mistake in <code>strfptime</code> (it should be <code>strftime</code>).</p> <p>The reason this wasn't reported is because ternary conditions are on a single line, and even if the first branch of the if wasn't executed, since it was syntactically touched and the <code>if time else</code> ternary got evaluated, coverage report shows the line as executed. (See this github issue for more info, if you're interested)</p> <p>Adding another test would not increase the test coverage we have, but it does ensure that we'll notice that this function can fail with realistic data</p> <pre><code>def test_format_join_time_with_non_none_time():\n    res = format_join_time(\"ItsDrike\", datetime(2022, 12, 31)\n    assert \"User 'ItsDrike' has joined\" in res\n</code></pre> <p>Leading to the test catching our bug:</p> <pre><code>collected 2 items\n\ntests/test_foo.py::test_format_join_time_with_non_none_time FAILED                                [ 50%]\ntests/test_foo.py::test_format_join_time PASSED                                                   [100%]\n\n=============================================== FAILURES ===============================================\n_______________________________ test_format_join_time_with_non_none_time _______________________________\n\n    def test_format_join_time_with_non_none_time():\n&gt;       res = format_join_time(\"ItsDrike\", datetime(2022, 12, 31))\n\ntests/test_foo.py:11:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nname = 'ItsDrike', time = datetime.datetime(2022, 12, 31, 0, 0)\n\n    def format_join_time(name: str, time: Optional[datetime] = None) -&gt; str:\n&gt;       str_time = time.strfptime(\"%d-%m-%Y\") if time else \"unknown\"\nE       AttributeError: 'datetime.datetime' object has no attribute 'strfptime'. Did you mean: 'strftime'?\n\nfoo.py:5: AttributeError\n======================================= short test summary info ========================================\nFAILED tests/test_foo.py::test_format_join_time_with_non_none_time - AttributeError: 'datetime.datetime'\n object has no attribute 'strfptime'. Did you mean: 'strftime'?\n=================-============= 1 failed, 1 passed, 0 warnings in 0.02s ================================\n</code></pre> <p>What's more, even though the second test was able to spot the second mistake, even if it wasn't there, that test is still not good enough. That's because the assertion in it is not actually checking for whether the time format is what we'd expect. Perhaps we expect the function to show a format like <code>time: 04/15/25</code>, but this function gives us <code>15-04-2025</code>, which is not at all what we want, and yet, coverage-wise, every line of the tested code was ran. We just didn't check thoroughly enough.</p> <p>Another way coverage can be misleading is with cases like division, where you can get a <code>ZeroDivisionError</code>, which won't be counted as one of the branch options when measuring coverage, so you might miss it.</p> <p>All in all, it's not only important to consider if all statements or branches were touched at least once with a test, but also if they are extensively tested in all situations that may happen in production.</p>"},{"location":"contributing/guides/unit-tests/#unit-testing-vs-integration-testing","title":"Unit Testing vs Integration Testing","text":"<p>Another restriction of unit testing is that it tests, well, in units. Even if we can guarantee that the units work as they should independently, we have no guarantee that they will actually work well together. Even more, while the mocking described above gives us a lot of flexibility in factoring out external code, we are working under the implicit assumption that we fully understand those external parts and utilize it correctly. What if our mocked <code>fetch_prophecy</code> function returns a response with the <code>message</code> field, but the actual API was changed to now use a <code>prophecy</code> field in a recent update? It could mean our tests are passing, but the code it's testing still doesn't work in production.</p>"},{"location":"contributing/guides/unit-tests/#additional-resources","title":"Additional resources","text":"<ul> <li>Quick guide on using mocks in official python docs</li> <li>Official pytest docs</li> <li>Ned Batchelder's PyCon talk: Getting Started Testing</li> <li>Corey Schafer video about unittest</li> <li>RealPython tutorial on unittest testing</li> <li>RealPython tutorial on mocking</li> </ul>"},{"location":"contributing/guides/unit-tests/#footnotes","title":"Footnotes","text":"<p>This document was heavily inspired by python-discord's tests README</p>"},{"location":"meta/attribution/","title":"Attribution","text":"<p>This document serves as a way to explicitly give credit to projects which made mcproto possible.</p> <p>Note that as with any other project, if there was some code that was directly utilized from these projects, it will be mentioned in <code>LICENSE-THIRD-PARTY.txt</code>, not in here. This file isn't meant to serve as a place to disclose used code and it's licenses, but rather to give proper credit where it is due, and to shout out a few amazing projects that allowed mcproto to exist in the first place.</p> <ul> <li>Minecraft wiki (https://minecraft.wiki/w/Java_Edition_protocol/) (previously <code>wiki.vg</code>): An absolutely amazing   community driven wiki that documents how the minecraft protocol is structured and the changes that occur between the   protocol versions.</li> <li>PyMine-Net: The project that was the main inspiration to this project, being a separation of the minecraft   networking tooling used in PyMine-Server, which is an attempt at implementing a fully working minecraft server purely   in python. However, this project is no longer maintained, and so mcproto was created to be it's replacement.</li> <li>Mcstatus: A library that allows for easy fetching of status/query data from minecraft servers, including parsers and   structures that meaningfully represent the obtained data, but also the logic on how it's actually obtained, some of   which this project took heavy inspiration from.</li> <li>pyCraft: A long abandoned project similar to mcproto, which served as an inspiration for various functionalities in   the library.</li> <li>quarry: A library providing support for basic interactions with the minecraft protocol, though only up to packet reading.   Implementation for reading data from specific packets is not included.</li> </ul> <p>To all of these projects, they deserve a massive thank you, for keeping their code/information open-sourced and available as a source of information, and inspiration freely to anyone.</p>"},{"location":"meta/changelog/","title":"Changelog","text":"<p>Major and minor releases also include the changes specified in prior development releases.</p> <p>Tip</p> <p>Feel free to skip the Internal Changes category if you aren't a contributor / core developer of mcproto.</p> <p> Unreleased Changes </p>"},{"location":"meta/changelog/#exec-1--version-v050-404-gbb256-2025-08-05","title":"Version v0.5.0-404-gbb256 (2025-08-05)","text":""},{"location":"meta/changelog/#exec-1--breaking-changes","title":"Breaking Changes","text":"<ul> <li>#421: Drop support for Python 3.8 (EOL since 2024-09-06)</li> </ul>"},{"location":"meta/changelog/#exec-1--features","title":"Features","text":"<ul> <li>#209: Added <code>InvalidPacketContentError</code> exception, raised when deserializing of a specific packet fails. This error inherits from <code>IOError</code>, making it backwards compatible with the original implementation.</li> <li> <p>#257: Added the <code>NBTag</code> to deal with NBT data</p> <ul> <li>The <code>NBTag</code> class is the base class for all NBT tags and provides the basic functionality to serialize and deserialize NBT data from and to a <code>Buffer</code> object.</li> <li>The classes <code>EndNBT</code>, <code>ByteNBT</code>, <code>ShortNBT</code>, <code>IntNBT</code>, <code>LongNBT</code>, <code>FloatNBT</code>, <code>DoubleNBT</code>, <code>ByteArrayNBT</code>, <code>StringNBT</code>, <code>ListNBT</code>, <code>CompoundNBT</code>, <code>IntArrayNBT</code>and <code>LongArrayNBT</code> were added and correspond to the NBT types described in the NBT specification.</li> <li>NBT tags can be created using the <code>NBTag.from_object()</code> method and a schema that describes the NBT tag structure.     Compound tags are represented as dictionaries, list tags as lists, and primitive tags as their respective Python types.     The implementation allows to add custom classes to the schema to handle custom NBT tags if they inherit the <code>:class: NBTagConvertible</code> class.</li> <li>The <code>NBTag.to_object()</code> method can be used to convert an NBT tag back to a Python object. Use include_schema=True to include the schema in the output, and <code>include_name=True</code> to include the name of the tag in the output. In that case the output will be a dictionary with a single key that is the name of the tag and the value is the object representation of the tag.</li> <li>The <code>NBTag.serialize()</code> can be used to serialize an NBT tag to a new <code>Buffer</code> object.</li> <li>The <code>NBTag.deserialize(buffer)</code> can be used to deserialize an NBT tag from a <code>Buffer</code> object.</li> <li>If the buffer already exists, the <code>NBTag.write_to(buffer, with_type=True, with_name=True)</code> method can be used to write the NBT tag to the buffer (and in that case with the type and name in the right format).</li> <li>The <code>NBTag.read_from(buffer, with_type=True, with_name=True)</code> method can be used to read an NBT tag from the buffer (and in that case with the type and name in the right format).</li> <li>The <code>NBTag.value</code> property can be used to get the value of the NBT tag as a Python object.</li> </ul> </li> <li> <p>#476: Added <code>LoginAcknowledged</code> packet implementation</p> </li> <li>Added further encryption related fucntions used by servers.</li> <li>Update <code>LoginStart</code> packet to latest protocol version (<code>uuid</code> no longer optional)</li> </ul>"},{"location":"meta/changelog/#exec-1--bugfixes","title":"Bugfixes","text":"<ul> <li>#330: Fix behavior of the <code>mcproto.utils.deprecation</code> module, which was incorrectly always using a fallback version, assuming mcproto is at version 0.0.0. This then could've meant that using a deprecated feature that is past the specified deprecation (removal) version still only resulted in a deprecation warning, as opposed to a full runtime error.</li> <li>#427: Fix version comparisons in deprecated functions for PEP440, non-semver compatible versions</li> </ul>"},{"location":"meta/changelog/#exec-1--documentation-improvements","title":"Documentation Improvements","text":"<ul> <li>#179: Enforce presence of docstrings everywhere with pydocstyle. This also adds docstring to all functions and classes that didn't already have one. Minor improvements for consistency were also made to some existing docstrings.</li> <li>#346: Complete documentation rewrite</li> <li>Add protocol and protocol pages (API reference docs)</li> </ul>"},{"location":"meta/changelog/#exec-1--internal-changes","title":"Internal Changes","text":"<ul> <li>#131: Any overridden methods in any classes now have to explicitly use the <code>typing.override</code> decorator (see PEP 698)</li> <li>#258: Fix readthedocs CI</li> <li>#259: Merge dependabot PRs automatically, if they pass all CI checks.</li> <li>#274: Update ruff<ul> <li>Update ruff version (the version we used was very outdated)</li> <li>Drop isort in favor of ruff's built-in isort module in the linter</li> <li>Drop black in favor of ruff's new built-in formatter</li> <li>Update ruff settings, including adding/enabling some new rule-sets</li> </ul> </li> <li>#285: Add <code>gen_serializable_test</code> function to generate tests for serializable classes, covering serialization, deserialization, validation, and error handling.</li> <li>#285: Rework the <code>Serializable</code> class</li> <li>#286: Update the docstring formatting directive in CONTRIBUTING.md to reflect the formatting practices currently in place.</li> <li> <p>#300: Update CI</p> <ul> <li>Fix CI not running unit tests on python 3.8 (only 3.11)</li> <li>Update to use python 3.12 (in validation and as one of the matrix versions in unit-tests workflow)</li> <li>Trigger and run lint and unit-tests workflows form a single main CI workflow.</li> <li>Only send status embed after the main CI workflow finishes (not for both unit-tests and validation)</li> <li>Use <code>--output-format=github</code> for <code>ruff check</code> in the validation workflow</li> <li>Fix the status-embed workflow</li> </ul> </li> <li> <p>#323: Enable various other ruff rules as a part of switching to blacklist model, where we explicitly disable the rules we don't want, rather than enabling dozens of rule groups individually.</p> </li> <li>#329: - Change the type-checker from <code>pyright</code> to <code>basedpyright</code><ul> <li>BasedPyright is a fork of pyright, which provides some additional typing features and re-implements various proprietary features from the closed-source Pylance vscode extension.</li> <li>Overall, it is very similar to pyright with some bonus stuff on top. However, it does mean all contributors who want proper editor support for the project will need to update their editor settings and add basedpyright. The instructions on how to do this are described in the updated <code>CONTRIBUTING.md</code>.</li> </ul> </li> <li>#331: Add <code>.editorconfig</code> file, defining some basic configuration for the project, which editors can automatically pick up on (i.e. indent size).</li> <li>#332: Enable various other (based)pyright rules (in fact, switch to a black-list, having all rules enabled except those explicitly disabled). This introduces a much stricter type checking behavior into the code-base.</li> <li>#347: Fix towncrier after an update (template file isn't ignored by default, so ignore it manually)</li> <li>#379: Remove codeclimate</li> <li>#395: Add CI workflow for marking inactive issues (&gt;60 days) with the stale label</li> <li>#421: Add support for python 3.13, moving the CI to test against it.</li> <li>#493: Change our primary dependency management tool from <code>poetry</code> to <code>uv</code></li> </ul>"},{"location":"meta/changelog/#version-050-2023-08-10","title":"Version 0.5.0 (2023-08-10)","text":""},{"location":"meta/changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li> <p>#130: Renamed \"shared_key\" field to \"shared_secret\" in <code>LoginEncryptionPacket</code>, following the official terminology.</p> <ul> <li>This is a breaking change, <code>LoginEncryptionPacket</code>'s <code>__init__</code> method now uses \"shared_secret\" keyword only argument, not \"shared_key\".</li> </ul> </li> <li> <p>#130: The <code>LoginStart</code> packet now contains a (required) UUID field (which can be explicitly set to <code>None</code>).</p> <ul> <li>For some reason, this field was not added when the login packets were introduced initially, and while the UUID field can indeed be omitted in some cases (it is an optional filed), in vast majority of cases, it will be present, and we should absolutely support it.</li> <li>As this is a new required field, the <code>__init__</code> function of <code>LoginStart</code> now also expects this <code>uuid</code> keyword argument to be present, making this a breaking change.</li> </ul> </li> <li> <p>#159: Fix packet compression handling in the interaction methods.</p> <p>This fixes a bug that didn't allow for specifying an exact compression threshold that the server specified in <code>LoginSetCompression</code> packet, and instead only allowing to toggle between compression on/off, which doesn't really work as server doesn't expect compression for packets below that threshold.</p> <ul> <li><code>sync_write_packet</code>, <code>async_write_pakcet</code>, <code>sync_read_packet</code> and <code>async_read_packet</code> functions now take <code>compression_threshold</code> instead of <code>compressed</code> bool flag</li> </ul> </li> <li> <p>#161: <code>LoginEncryptionRequest</code> now uses <code>cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey</code> to hold the public key, instead of just pure <code>bytes</code>. Encoding and decoding of this key happens automatically during serialize/deserialize. This is a breaking change for anyone relying on the <code>public_key</code> field from this packet being <code>bytes</code>, and for anyone initializing this packet directly with <code>__init__</code>, which now expects <code>RSAPublicKey</code> instance instead.</p> </li> </ul>"},{"location":"meta/changelog/#features","title":"Features","text":"<ul> <li>#129: Added a system for handling Minecraft authentication<ul> <li>Yggdrasil system for unmigrated i.e. non-Microsoft accounts (supportng Minecraft accounts, and the really old Mojang accounts)</li> <li>Microsoft OAuth2 system (Xbox live) for migrated i.e. Microsoft accounts</li> </ul> </li> <li>#160: Re-export the packet classes (or any other objects) from the gamestate modules (<code>mcproto.packets.handshaking</code>/<code>mcproto.packets.login</code>/...) directly. Allowing simpler imports (<code>from mcproto.packets.login import LoginStart</code> instead of <code>from mcproto.packets.login.login import LoginStart</code>)</li> <li>#161: Add support for encryption. Connection classes now have <code>enable_encryption</code> method, and some encryption related functions were added into a new <code>mcproto.encryption</code> module.</li> <li>#168: Add multiplayer related functionalities for requesting and checking joins for original (bought) minecraft accounts. This allows us to join online servers.</li> <li>#171: Add <code>Account.check</code> function, to verify that the access token in use is valid, and the data the Account instance has matches the data minecraft API has.</li> </ul>"},{"location":"meta/changelog/#bugfixes","title":"Bugfixes","text":"<ul> <li>#130: <code>LoginEncryptionResponse</code> now includes the <code>server_id</code> field. This field was previously hard-coded to 20 spaces (blank value), which is what all minecraft clients on minecraft 1.7.x or higher do, however with older versions, this field is set to 20 random characters, which we should respect.<ul> <li>This is not a breaking change, as <code>server_id</code> will default to <code>None</code> in <code>LoginEncryptionResponse</code>'s <code>__init__</code>, meaning any existing code utilizing this packet will still work. It is purely an additional option.</li> </ul> </li> <li>#167: Fix packet reading/writing when compression is enabled (use zlib as expected, instead of gzip which we were using before)</li> <li>#170: Preserve the call parameters and overloads in the typing signature of <code>mcproto.packets.packet_map.generate_packet_map</code> function. (This wasn't the case before, since <code>functools.lru_cache</code> doesn't preserve this data). Note that this loses on the typing information about the cache itself, as now it will appear to be a regular uncached function to the type-checker. We deemed this approach better to the alternative of no typing info for call arguments or overloads, but preserving cache info.</li> </ul>"},{"location":"meta/changelog/#documentation-improvements","title":"Documentation Improvements","text":"<ul> <li>#129: Mention lack of synchronous alternatives for certain functions (see issue #128)</li> <li>#139: Add a warning in version guarantees page, explaining pre-release guarantees (breaking changes in minor versions allowed)</li> <li>#141: Move installation instructions from README to Installation docs page</li> <li> <p>#144: Add attributetable internal sphinx extension for showing all attributes and methods for specified classes.</p> <ul> <li>This adds <code>attributetable</code> sphinx directive, which can be used before autodoc directive. This will create the attribute table, which will get dynamically moved right below the class definition from autodoc (using javascript).</li> <li>This extension was implemented by discord.py, this is just re-using that code, with some modifications to fit our code style and to fit the documentation design (furo theme).</li> </ul> </li> <li> <p>Updated contributing guidelines (restructure and rewrite some categories, to make it more readable)</p> </li> </ul>"},{"location":"meta/changelog/#internal-changes","title":"Internal Changes","text":"<ul> <li>#133: Enable enforcement of some optional pyright rules</li> <li>#153: Replace flake8 linter with ruff (mostly equivalent, but much faster and configurable from pyproject.toml)</li> <li> <p>#154: Enforce various new ruff linter rules:</p> <ul> <li>PGH: pygrep-hooks (replaces pre-commit version)</li> <li>PL: pylint (bunch of typing related linter rules)</li> <li>UP: pyupgrade (forces use of the newest possible standards, depending on target version)</li> <li>RET: flake8-return (various linter rules related to function returns)</li> <li>Q: flake8-quotes (always use double quotes)</li> <li>ASYNC: flake8-async (report blocking operations in async functions)</li> <li>INT: flake-gettext (gettext related linting rules)</li> <li>PTH: flake8-use-pathlib (always prefer pathlib alternatives to the os ones)</li> <li>RUF: ruff custom rules (various additional rules created by the ruff linter team)</li> </ul> </li> </ul>"},{"location":"meta/changelog/#version-040-2023-06-11","title":"Version 0.4.0 (2023-06-11)","text":""},{"location":"meta/changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>#41: Rename <code>mcproto.packets.abc</code> to <code>mcproto.packets.packet</code></li> <li>#116: Restructure the project, moving to a single protocol version model<ul> <li>This change does NOT have a deprecation period, and will very likely break most existing code-bases. However this change is necessary, as multi-version support was unsustainable (see issue #45 for more details)</li> <li>Any packets and types will no longer be present in versioned folders (mcproto.packets.v757.xxx), but rather be directly in the parent directory (mcproto.packets.xxx).</li> <li>This change doesn't affect manual communication with the server, connection, and basic IO writers/readers remain the same.</li> </ul> </li> </ul>"},{"location":"meta/changelog/#version-030-2023-06-08","title":"Version 0.3.0 (2023-06-08)","text":""},{"location":"meta/changelog/#features_1","title":"Features","text":"<ul> <li>#54: Add support for LOGIN state packets<ul> <li><code>LoginStart</code></li> <li><code>LoginEncryptionRequest</code></li> <li><code>LoginEncryptionResponse</code></li> <li><code>LoginSuccess</code></li> <li><code>LoginDisconnect</code></li> <li><code>LoginPluginRequest</code></li> <li><code>LoginPluginResponse</code></li> <li><code>LoginSetCompression</code></li> </ul> </li> </ul>"},{"location":"meta/changelog/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>#75: Increase the stack level of warnings shown on protocol version fallbacks</li> <li>#113: TCP connections now properly shut down the connection gracefully (TCP FIN)</li> </ul>"},{"location":"meta/changelog/#documentation-improvements_1","title":"Documentation Improvements","text":"<ul> <li>#2: Add Sphinx and basic docs layout</li> <li>#18: Rewrite all docstrings into proper Sphinx format, instead of using markdown.</li> <li>#27: Add changelog page to docs, linking <code>CHANGELOG.md</code>, including unreleased changes from fragments.</li> <li>#28: Use furo theme for the documentation</li> <li>#34: Add version guarantees page</li> <li>#40: Move code of conduct to the docs.</li> <li>Improve readability of the changelog readme (changes/README.md)<ul> <li>Mention taskipy <code>changelog-preview</code> shorthand command</li> <li>Add category headers splitting things up, for better readability</li> <li>Explain how to express multiple changes related to a single goal in a changelog fragment.</li> </ul> </li> <li>Include <code>CHANGELOG.md</code> file in project's distribution files.</li> </ul>"},{"location":"meta/changelog/#internal-changes_1","title":"Internal Changes","text":"<ul> <li>#12: Replace HassanAbouelela setup-python action with ItsDrike/setup-python in CI workflows</li> <li>#17: Start using codeclimate to monitor code coverage and it's changes</li> <li>#35: Add more tests</li> <li>#38: Replace our implementation of <code>SemanticVersion</code> with a community-maintained <code>semantic-version</code> package.</li> <li>#53: Mark all packet classes as <code>typing.final</code>, making the type-checker enforce existence of concrete implementations for all abstract methods.</li> <li>#112: Removed <code>codespell</code> linter. This proved too annoying, especially when we already have a lot of linters here. Spelling mistakes can simply be caught in the review process.</li> <li>#114: Use latest poetry version in CI workflows (remove version lock - at 1.3.1)</li> <li>The <code>documentation</code> category of changelog was renamed to shorter <code>docs</code></li> </ul>"},{"location":"meta/changelog/#version-020-2022-12-30","title":"Version 0.2.0 (2022-12-30)","text":""},{"location":"meta/changelog/#features_2","title":"Features","text":"<ul> <li>#14: Add <code>__slots__</code> to most classes in the project<ul> <li>All connection classes are now slotted</li> <li>Classes in <code>mcproto.utils.abc</code> are now slotted</li> </ul> </li> <li>Separate packet interaction functions into <code>mcproto.packets.interactions</code>, (though they're reexported in   <code>mcproto.packets</code>, so no breaking changes)</li> </ul>"},{"location":"meta/changelog/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>#14: Add missing <code>__slots__</code> to <code>ServerBoundPacket</code> and <code>ClientBoundPacket</code> subclasses, which inherited from slotted   <code>Packet</code>, but didn't themselves define <code>__slots__</code>, causing <code>__dict__</code> to be needlessly created.</li> <li>The error message produced by <code>RequiredParamsABCMixin</code> class when a required no MRO class variable isn't present now   includes a previously missing space, making it more readable.</li> </ul>"},{"location":"meta/changelog/#documentation-improvements_2","title":"Documentation Improvements","text":"<ul> <li>#7: Add and start keeping a changelog, managed by towncrier.</li> <li>#13: Add a security policy.</li> </ul>"},{"location":"meta/changelog/#internal-changes_2","title":"Internal Changes","text":"<ul> <li>#6: Rework deprecation system<ul> <li>Drop support for date-based deprecations, versions work better</li> <li>Provide <code>deprecation_warn</code> function, which emits warnings directly, no need for a decorator</li> <li>Add a <code>SemanticVersion</code> class, supporting version comparisons</li> <li>If the project's version is already higher than the specified deprecation removal version, raise a DeprecationWarning   as a full exception (rather than just a warning).</li> </ul> </li> <li>#7: Add towncrier for managing changelog</li> <li>#14: Add slotscheck, ensuring <code>__slots__</code> are defined properly everywhere.</li> <li>#14: Make <code>typing-extensions</code> a runtime dependency and use it directly, don't rely on <code>if typing.TYPE_CHECKING</code> blocks.</li> <li>#15: Add codespell tool, to automatically find spelling mistakes.</li> <li>Add README file into the <code>tests/</code> folder, explaining how we use unit-tests and some basics of testing.</li> <li>Add <code>CustomMockMixin</code> internal class, inheriting from <code>UnpropagatingMockMixin</code>, but also allowing to use <code>spec_set</code> as   class variable, as it will automatically pass it into <code>__init__</code> of the mock class.</li> <li>Add several new flake8 extensions, and rework flake8 config file</li> <li>Add support for specifying what child mock type to propagate in <code>UnpropagatingMockMixin</code> class (for unit-tests).</li> </ul> <p>The changelog was added during development of 0.2.0, so nothing prior is documented here. Try checking the GitHub releases, or git commit history directly.</p>"},{"location":"meta/code-of-conduct/","title":"Code of Conduct","text":"<p>This code of conduct outlines our expectations for the people involved with this project. We, as members, contributors, and leaders, are committed to fostering a welcoming and inspiring project where anyone can participate with the expectation of a harassment-free experience, as outlined in this code of conduct.</p> <p>The goal of this document is to set the overall tone for our community. It is here to outline some of the things you can and can't do if you wish to participate in our community.</p> <p>However, it is not intended as a rulebook containing an exhaustive list of permitted and prohibited actions. Social conduct varies between situations and individuals, but we should all do our best to create a welcoming and positive experience for everyone.</p> <p>We value many things beyond just technical expertise, including collaboration and supporting others within our community. Providing a positive experience for others can have a much more significant impact than simply providing the correct answer.</p>"},{"location":"meta/code-of-conduct/#harassment","title":"Harassment","text":"<p>We share a common understanding of what constitutes harassment as it applies to a professional setting. Although this list cannot be exhaustive, we explicitly honor the following \"protected attributes\": diversity in age, gender, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, disability and personal appearance. We will not tolerate discrimination based on any of the protected characteristics above, including others not explicitly listed here. We consider discrimination of any kind to be unacceptable and immoral.</p> <p>Harassment includes, but is not limited to:</p> <ul> <li>Offensive comments (or \"jokes\") related to any of the above mentioned attributes.</li> <li>Deliberate \"outing\"/\"doxing\" of any aspect of a person's identity, such as physical or electronic address, without   their explicit consent, except as necessary means to protect others from intentional abuse.</li> <li>Unwelcome comments regarding a person's lifestyle choices and practices, including those related to food, health,   parenting, drugs and employment.</li> <li>Deliberate misgendering, including deadnaming or persistently using a pronoun that does not correctly reflect a   person's gender identity. You should do your best to address people by the name/pronoun they give you when not   addressing them by their username or handle.</li> <li>Threats of physical or psychological violence.</li> <li>Incitement of violence towards any individual, including encouraging a person to engage in self-harm.</li> <li>Publishing private communication without consent, even if non-harassing.</li> <li>A pattern of inappropriate behavior, such as unwelcome intimacy or persistent teasing after a request to stop.</li> <li>Continued one-on-one communication after requests to cease.</li> <li>Sabotage of someone else's work or intentionally hindering someone else's performance.</li> </ul>"},{"location":"meta/code-of-conduct/#plagiarism","title":"Plagiarism","text":"<p>Plagiarism is the re-use of someone else's work (e.g., binary content such as images, textual content such as an article, but also source code, or any other copyrightable resources) without the permission or a license right from the author. Claiming someone else's work as your own is not only unethical and disrespectful to the author, but also illegal in most countries. You should always respect the author's wishes, and give credit where credit is due.</p>"},{"location":"meta/code-of-conduct/#intentional-vs-unintentional-plagiarism","title":"Intentional vs. Unintentional Plagiarism","text":"<p>If we find that you've intentionally attempted to add plagiarized content to our code-base, you will likely face a permanent ban from any future contributions to this project's repository. We will, of course, do our best to remove, or properly attribute this plagiarized content as quickly as possible.</p> <p>Unintentional plagiarism will not be punished as harshly, but nevertheless, it is your responsibility as a contributor to check where the code you're submitting comes from, and so, repeated submissions of such content, even after warnings, may still result in a ban.</p>"},{"location":"meta/code-of-conduct/#understanding-code-licensing","title":"Understanding code licensing","text":"<p>Please note that an online repository without a license is presumed to only be source-available, NOT open-source. This means the work is still protected by author's copyright, automatically imposed over it and without any license extending that copyright, you have no legal rights to use such code. Simply finding publicly posted code does not grant permission to reuse it in other projects. This code may be available to be seen by anyone, but that does not mean it's also available to be used by anyone in any way they like.</p> <p>Another important note to keep in mind is that even if a project has an open-source license, that license may have conditions which are incompatible with our codebase. For example, some licenses require that all linked code be licensed under the same terms, which may not align with our project's licensing. Always review and understand a license before using code under it \u2014 simple attribution often isn't enough.</p> Learn more about software licensing <p>If you are new to software licensing, you can check out this article, which does a good job at explaining the basics.</p>"},{"location":"meta/code-of-conduct/#generally-inappropriate-behavior","title":"Generally inappropriate behavior","text":"<p>Outside of just harassment and plagiarism, there are countless other behaviors which we consider unacceptable, as they may be offensive or discourage people from engaging with our community.</p> <p>Examples of generally inappropriate behavior:</p> <ul> <li>The use of sexualized language or imagery of any kind</li> <li>The use of inappropriate images, including in an account's avatar</li> <li>The use of inappropriate language, including in an account's nickname</li> <li>Any form of spamming, flaming, baiting or other attention-stealing / disruptive behavior that derails discussions</li> <li>Discussing topics that are overly polarizing, sensitive, or incite arguments.</li> <li>Responding with \"RTFM\", \"just google it\" or similar response to help requests</li> <li>Other conduct which could be reasonably considered inappropriate</li> </ul> <p>Examples of generally appropriate behavior:</p> <ul> <li>Being kind and courteous to others</li> <li>Collaborating with other community members</li> <li>Gracefully accepting constructive criticism</li> <li>Using welcoming and inclusive language</li> <li>Showing empathy towards other community members</li> </ul>"},{"location":"meta/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, including this repository itself, conversations on any platforms officially connected to this project (such as in GitHub issues, emails or platforms like discord). It also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official social media account, or acting as an appointed representative at an online or offline event.</p> <p>All members involved with the project are expected to follow this Code of Conduct, regardless of their position in the project's hierarchy, this Code of Conduct applies equally to contributors, maintainers, and those seeking help or reporting bugs.</p>"},{"location":"meta/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Whenever a participant has made a mistake, we expect them to take responsibility for their actions. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and to do our best to right the wrong.</p> <p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, harmful, or otherwise undesirable.</p> <p>Community leaders have the authority and responsibility to remove, edit, or reject any contributions \u2014 such as comments, commits, code, wiki edits, issues, or Discord messages \u2014 that violate this Code of Conduct. When appropriate, they will also make sure to communicate the reasons for moderation decisions.</p> <p>If you have experienced or witnessed unacceptable behavior constituting a code of conduct violation or have any other code of conduct concerns, please let us know and we will do our best to resolve this issue.</p>"},{"location":"meta/code-of-conduct/#reporting-a-code-of-conduct-violation","title":"Reporting a Code of Conduct violation","text":"<p>If you think that someone is violating the Code of Conduct, you can report it to any repository maintainer. When doing so, follow these steps:</p> <ol> <li>Contact a repository maintainer via email or Discord DM. Avoid using public channels for these reports.</li> <li>When submitting the report, make sure to provide all the necessary details of the incident, including context and    relevant links/screenshots.</li> <li>We also kindly ask that you maintain confidentiality and avoid any public discussions of the violation.</li> </ol>"},{"location":"meta/code-of-conduct/#sources","title":"Sources","text":"<p>The open-source community has an incredible amount of resources that people have freely provided to others and we all depend on these projects in many ways. This code of conduct article is no exception and there were many open source projects that has helped bring this code of conduct to existence. For that reason, we'd like to thank all of these communities and projects for keeping their content open and available to everyone, but most notably we'd like to thank the projects with established codes of conduct and diversity statements that we used as our inspiration. Below is the list these projects:</p> <ul> <li>Python: https://www.python.org/community/diversity/</li> <li>Contributor Covenant: https://www.contributor-covenant.org/</li> <li>Rust-lang: https://www.rust-lang.org/policies/code-of-conduct</li> <li>Code Fellows: https://github.com/codefellows/code-of-conduct</li> <li>Python Discord: https://www.pythondiscord.com/pages/code-of-conduct/</li> </ul>"},{"location":"meta/license/","title":"License","text":"<p>This project's source code is licensed under the GNU Lesser General Public License (LGPL) version 3.</p> <p>The LGPL license allows you to use mcproto as a library pretty much in any code-base, including in proprietary code-bases. However, if you wish to make a derivative project to mcproto itself, such a project will need to be licensed under LGPL as well.</p> <p>Tip</p> <p>If you want to see a quick glance of what this license allows, prohibits &amp; requires, check it out in tl;dr legal.</p> Full LICENSE text LICENSE.txt<pre><code>                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n</code></pre> <p>Note</p> <p>If you need a copyright header for attribution, you can use:</p> RenderedHTML <p>mcproto</p> <p>Copyright \u00a9 2025 ItsDrike &lt;itsdrike@protonmail.com&gt;</p> <pre><code>&lt;a href=\"https://github.com/py-mine/mcproto\"&gt;mcproto&lt;/a&gt;\n\nCopyright &amp;copy; 2025 ItsDrike &amp;lt;itsdrike@protonmail.com&amp;gt;\n</code></pre>"},{"location":"meta/license/#this-documentation","title":"This documentation","text":"<p>This documentation itself follows a Creative Commons license: CC BY-NC-SA 4.0 </p> <p>Note</p> <p>If you need a copyright header for proper attribution, you can use:</p> RenderedHTML <p>Mcproto Documentation \u00a9 2024 by ItsDrike</p> <p>If you also need the license identifier, use the following:</p> <p>CC BY-NC-SA 4.0 </p> <pre><code>&lt;a href=\"https://py-mine.github.io/mcproto\"&gt;Mcproto Documentation&lt;/a&gt; &amp;copy; 2024 by &lt;a href=\"mailto:itsdrike@protonmail.com\"&gt;ItsDrike&lt;/a&gt;\n</code></pre> <p>If you also need the license identifier, use the following:</p> <pre><code>&lt;a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"&gt;CC BY-NC-SA 4.0&lt;/a&gt; &lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/nc.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\" alt=\"\"&gt;\n</code></pre>"},{"location":"meta/license/#differently-licensed-parts","title":"Differently licensed parts","text":"<p>Some parts of the project follow a different license. See the <code>LICENSE-THIRD-PARTY.txt</code> file, which lists all of these parts and their respective licenses.</p> Full LICENSE-THIRD-PARTY text LICENSE-THIRD-PARTY.txt<pre><code>---------------------------------------------------------------------------------------------------\n                                            MIT License\nApplies to:\n    - Copyright (c) 2021 Python Discord\n      Copyright (C) 2022 Hassan Abouelela &lt;hassan@hassanamr.com&gt;\n      Copyright (C) 2022 Chris Lovering &lt;chris.lovering.95@gmail.com&gt;\n      Copyright (C) 2022 mbaruh &lt;mbaruh@hotmail.com&gt;\n      All rights reserved.\n        - mcproto/utils/version_map.py: portions of VersionMap._walk_submodules function\n    - Copyright (c) 2020 Nekokatt\n      Copyright (c) 2021-present davfsa\n      All rights reserved.\n        - .github/ISSUE_TEMPLATE/bug_report.yml: Template heavily inspired by original\n        - .github/ISSUE_TEMPLATE/feature_request.yml: Template heavily inspired by original\n        - .github/workflows/fragment-check.yml: Entire file\n        - .github/workflows/prepare-release.yml: Workflow heavily inspired by original\n        - .github/scripts/normalize_coverage.py: Entire file\n    - Copyright (c) 2015-present Rapptz\n      All rights reserved.\n        - docs/installation/version-guarantees.rst: Entire file\n    - Copyright (c) 2016-2024 Martin Donath\n      All rights reserved\n         - docs/contributing/reporting-a-bug.md: Majority of the file\n---------------------------------------------------------------------------------------------------\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n---------------------------------------------------------------------------------------------------\n                                            ISC License\n\nApplies to:\n    - Copyright (c) 2021, Timoth\u00e9e Mazzucotelli\n      All rights reserved.\n        - docs/css/mkdocstrings.css: Entire file\n        - docs/css/material.css: Entire file\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n---------------------------------------------------------------------------------------------------\n                                 GNU LESSER GENERAL PUBLIC LICENSE\nApplies to:\n    - Copyright (c) 2022, Milo Weinberg &lt;iapetus011@gmail.com&gt;\n      All rights reserved.\n        - mcproto/packets/packet.py: GameState and PacketDirection enum classes\n---------------------------------------------------------------------------------------------------\nFulltext of the license can be seen in the LICENSE.txt file, as it matches the current license of\nthis project, this file just disclaims the copyrighted sections used in our codebase.\n\n---------------------------------------------------------------------------------------------------\n                                    Apache License version 2.0\nApplies to:\n    - Copyright (c) 2012 Ammar Askar\n      All rights reserved.\n        - mcproto/connection.py: write, read methods in all classes (not _write and _read though)\n        - mcproto/encryption.py: encrypt_token_and_secret, generate_shared_secret functions\n---------------------------------------------------------------------------------------------------\n\n\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"meta/support/","title":"Support","text":"<ul> <li>If you found a bug, or wish to propose a new feature, please follow this guide</li> <li>If you just want to ask a question, feel free to do so on the project's discussion board, or get   in touch through our discord server.</li> <li>In case you have a security concern, or some other problem that requires private resolution, please follow our   security policy to disclose the issue appropriately.</li> </ul>"},{"location":"meta/versioning/","title":"Versioning Practices &amp; Guarantees","text":"<p>Work In Progress</p> <p>This page is missing an explanation on how to figure out which minecraft version a given mcproto version is for. This is because we currenly don't have any way to do so, once this will be decided on, it should be documented here.</p> <p>Pre-release phase</p> <p>Mcproto is currently in the pre-release phase (pre v1.0.0). During this phase, these guarantees will NOT be followed! This means that breaking changes can occur in minor version bumps. That said, micro version bumps are still strictly for bugfixes, and will not include any features or breaking changes.</p> <p>This library follows semantic versioning model, which means the major version is updated every time there is an incompatible (breaking) change made to the public API. In addition to semantic versioning, mcproto has unique versioning practices related to new Minecraft releases.</p>"},{"location":"meta/versioning/#versioning-model-for-minecraft-releases","title":"Versioning Model for Minecraft Releases","text":"<p>Mcproto aims to always be compatible with the latest Minecraft protocol implementation, updating the library as soon as possible after each full Minecraft release (snapshots are not supported).</p> <p>Typically, a new Minecraft release will result in a major version bump for mcproto, since protocol changes are often breaking in nature. That said, it is not impossible for a new Minecraft release not to include breaking changes, in this case, we will not perform this version bump.</p> <p>However, there may be cases where we release a major version that does not correspond to a Minecraft update, depending on the changes made in the library itself.</p> <p>Recap</p> <ul> <li>Minecraft Updates: When a new version of Minecraft is released and introduces breaking changes to the     protocol, mcproto will increment its major version (e.g., from <code>1.x.x</code> to <code>2.0.0</code>).</li> <li>Non-breaking Protocol Changes: If a Minecraft update introduces new features or protocol adjustments that do     not break the existing public API, we may opt to release a minor version (e.g., from <code>1.0.x</code> to <code>1.1.0</code>).</li> <li>Non-protocol Major Releases: Major releases may also happen due to significant internal changes or     improvements in the library that are independent of Minecraft protocol updates.</li> </ul> <p>Warning</p> <p>While mcproto strives to stay updated with Minecraft releases, this project is maintained by unpaid volunteers. We do our best to release updates in a timely manner after a new Minecraft version, but delays may occur.</p>"},{"location":"meta/versioning/#examples-of-breaking-changes","title":"Examples of Breaking Changes","text":"<p>First thing to keep in mind is that breaking changes only apply to publicly documented API. Internal features, including any attributes that start with an underscore or those explicitly mentioned as internal are not a part of the public API and are subject to change without warning.</p> <p>Here are examples of what constitutes a breaking change:</p> <ul> <li>Changing the default parameter value of a function to something else.</li> <li>Renaming (or removing) a function without deprecation</li> <li>Adding or removing parameters of a function.</li> <li>Removing deprecated alias to a renamed function.</li> <li>Protocol changes that affect how public methods or classes behave.</li> </ul> <p>Note</p> <p>The examples above are non-exhaustive.</p>"},{"location":"meta/versioning/#examples-of-non-breaking-changes","title":"Examples of Non-Breaking Changes","text":"<p>The following changes are considered non-breaking under mcproto\u2019s versioning model:</p> <ul> <li>Changing function's name, while providing a deprecated alias.</li> <li>Renaming (or removing) internal attributes or methods, such as those prefixed with an underscore.</li> <li>Adding new functionality that doesn\u2019t interfere with existing function signatures or behavior.</li> <li>Changing the behavior of a function to fix a bug. (1)</li> <li>Changes in the typing definitions of the public API.</li> <li>Changes in the documentation.</li> <li>Modifying the internal protocol connection handling.</li> <li>Adding an element into <code>__slots__</code> of a data class.</li> <li>Updating the dependencies to a newer version, major or otherwise.</li> </ul> <ol> <li>This only includes changes that don't affect users in a breaking way, unless you're relying on the bug\u2014in which    case, that's on you, and it's probably time to rethink your life choices.</li> </ol>"},{"location":"meta/versioning/#special-considerations","title":"Special Considerations","text":"<p>Given that mcproto is tied closely to the evolving Minecraft protocol, we may have to make breaking changes more frequently than a typical Python library.</p> <p>While we aim to provide deprecation warnings for changes, particularly in protocol-independent core library features, there are certain limitations due to the nature of Minecraft protocol updates. When a major update is released as a result of a Minecraft protocol change, we will not provide deprecations for affected features, as the protocol itself has changed in a way that necessitates immediate adaptation.</p> <p>However, for internal major updates that are independent of Minecraft protocol changes, we will make every effort to deprecate old behavior, giving users time to transition smoothly before removing legacy functionality.</p> <p>Specifically, the protocol dependant code includes code in <code>mcproto.packets</code> and <code>mcproto.types</code> packages. Lower level protocol abstractions present in <code>mcproto.protocol</code>, <code>mcproto.buffer</code>, <code>mcproto.connection</code>, <code>mcproto.encryption</code>, <code>mcproto.multiplayer</code> and <code>mcproto.auth</code> will go through proper deprecations. This should allow you to safely use these lower level features to communicate to servers at any protocol version.</p>"},{"location":"meta/versioning/#communicating-deprecations-breaking-changes","title":"Communicating deprecations &amp; breaking changes","text":"<p>When a breaking change occurs, you will always find it listed at the top of the changelog. Here, will also find detailed notes about any migration instructions and a brief reason for the change.</p> <p>When a feature is deprecated, we will notify users through:</p> <ul> <li>Warnings in the code (via <code>DeprecationWarning</code>): These warnings will contain details about what was deprecated,   including a replacement option (if there is one) and a version number for when this deprecation will be removed.</li> <li>Entries in the changelog: This includes any migration instructions and a brief reason for deprecation.</li> </ul>"},{"location":"reference/abc/","title":"Abstract Base Classes","text":""},{"location":"reference/abc/#mcproto.utils.abc.Serializable","title":"mcproto.utils.abc.Serializable","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for any type that should be (de)serializable into/from <code>Buffer</code> data.</p> <p>Any class that inherits from this class and adds parameters should use the <code>attrs.define</code> decorator.</p>"},{"location":"reference/abc/#mcproto.utils.abc.Serializable.__attrs_post_init__","title":"mcproto.utils.abc.Serializable.__attrs_post_init__","text":"<pre><code>__attrs_post_init__() -&gt; None\n</code></pre> <p>Run the validation method after the object is initialized.</p> <p>This function is responsible for conversion/transformation of given values right after initialization (often for example to convert an int initialization param into a specific enum variant)</p> Note <p>If you override this method, make sure to call the superclass method at some point to ensure that the validation is run.</p>"},{"location":"reference/abc/#mcproto.utils.abc.Serializable.deserialize","title":"mcproto.utils.abc.Serializable.deserialize  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>deserialize(buf: Buffer) -&gt; Self\n</code></pre> <p>Construct the object from a <code>Buffer</code> (transmittable sequence of bytes).</p>"},{"location":"reference/abc/#mcproto.utils.abc.Serializable.serialize","title":"mcproto.utils.abc.Serializable.serialize","text":"<pre><code>serialize() -&gt; Buffer\n</code></pre> <p>Represent the object as a <code>Buffer</code> (transmittable sequence of bytes).</p>"},{"location":"reference/abc/#mcproto.utils.abc.Serializable.serialize_to","title":"mcproto.utils.abc.Serializable.serialize_to  <code>abstractmethod</code>","text":"<pre><code>serialize_to(buf: Buffer) -&gt; None\n</code></pre> <p>Write the object to a <code>Buffer</code>.</p>"},{"location":"reference/abc/#mcproto.utils.abc.Serializable.validate","title":"mcproto.utils.abc.Serializable.validate","text":"<pre><code>validate() -&gt; None\n</code></pre> <p>Validate the object's attributes, raising an exception if they are invalid.</p> <p>By default, this method does nothing. Override it in your subclass to add validation logic.</p> Note <p>This method is called by <code>__attrs_post_init__</code></p>"},{"location":"reference/authentication/","title":"Authentication","text":""},{"location":"reference/authentication/#mcproto.auth.account.Account","title":"mcproto.auth.account.Account","text":"<p>Base class for an authenticated Minecraft account.</p>"},{"location":"reference/authentication/#mcproto.auth.account.Account.check","title":"mcproto.auth.account.Account.check  <code>async</code>","text":"<pre><code>check(client: AsyncClient) -&gt; None\n</code></pre> <p>Check with minecraft API whether the account information stored is valid.</p> <p>Raises:</p> Type Description <code>MismatchedAccountInfoError</code> <p>If the information received from the minecraft API didn't match the information currently stored in the account instance.</p> <code>InvalidAccountAccessTokenError</code> <p>If the access token is not valid.</p>"},{"location":"reference/authentication/#mcproto.auth.account.InvalidAccountAccessTokenError","title":"mcproto.auth.account.InvalidAccountAccessTokenError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when the access token of the account was reported as invalid.</p>"},{"location":"reference/authentication/#mcproto.auth.account.MismatchedAccountInfoError","title":"mcproto.auth.account.MismatchedAccountInfoError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when info stored in the account instance doesn't match one from API.</p>"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.AuthServerApiError","title":"mcproto.auth.yggdrasil.AuthServerApiError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised on a failure from the authserver API.</p>"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.AuthServerApiError.msg","title":"mcproto.auth.yggdrasil.AuthServerApiError.msg  <code>property</code>","text":"<pre><code>msg: str\n</code></pre> <p>Produce a message for this error.</p>"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.AuthServerApiErrorType","title":"mcproto.auth.yggdrasil.AuthServerApiErrorType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for various different kinds of exceptions that the authserver API can report.</p>"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.AuthServerApiErrorType.from_status_error","title":"mcproto.auth.yggdrasil.AuthServerApiErrorType.from_status_error  <code>classmethod</code>","text":"<pre><code>from_status_error(code: int, short_msg: str, full_msg: str, cause_msg: str | None) -&gt; AuthServerApiErrorType\n</code></pre> <p>Determine the error kind based on the error data.</p>"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount","title":"mcproto.auth.yggdrasil.YggdrasilAccount","text":"<p>               Bases: <code>Account</code></p> <p>Minecraft account logged into using Yggdrasil (legacy/unmigrated) auth system.</p>"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount.authenticate","title":"mcproto.auth.yggdrasil.YggdrasilAccount.authenticate  <code>async</code> <code>classmethod</code>","text":"<pre><code>authenticate(client: AsyncClient, login: str, password: str) -&gt; Self\n</code></pre> <p>Authenticate using the Yggdrasil system (for non-Microsoft accounts).</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>E-Mail of your Minecraft account, or username for (really old) Mojang accounts.</p> required <code>str</code> <p>Plaintext account password.</p> required"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount.authenticate(login)","title":"<code>login</code>","text":""},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount.authenticate(password)","title":"<code>password</code>","text":""},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount.refresh","title":"mcproto.auth.yggdrasil.YggdrasilAccount.refresh  <code>async</code>","text":"<pre><code>refresh(client: AsyncClient) -&gt; None\n</code></pre> <p>Refresh the Yggdrasil access token.</p> <p>This method can be called when the access token expires, to obtain a new one without having to go through a complete re-login. This can happen after some time period, or for example when someone else logs in to this minecraft account elsewhere.</p>"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount.signout","title":"mcproto.auth.yggdrasil.YggdrasilAccount.signout  <code>async</code>","text":"<pre><code>signout(client: AsyncClient, username: str, password: str) -&gt; None\n</code></pre> <p>Sign out using the Yggdrasil system (for non-Microsoft accounts).</p> <p>Parameters:</p> Name Type Description Default <p>E-Mail of your Minecraft account, or username for (really old) Mojang accounts.</p> required <code>str</code> <p>Plaintext account password.</p> required"},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount.signout(login)","title":"<code>login</code>","text":""},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount.signout(password)","title":"<code>password</code>","text":""},{"location":"reference/authentication/#mcproto.auth.yggdrasil.YggdrasilAccount.validate","title":"mcproto.auth.yggdrasil.YggdrasilAccount.validate  <code>async</code>","text":"<pre><code>validate(client: AsyncClient) -&gt; bool\n</code></pre> <p>Check if the access token is (still) usable for authentication with a Minecraft server.</p> <p>If this method fails, the stored access token is no longer usable for for authentcation with a Minecraft server, but should still be good enough for <code>refresh</code>.</p> <p>This mainly happens when one has used another client (e.g. another launcher).</p>"},{"location":"reference/authentication/#mcproto.auth.msa.MSAAccount","title":"mcproto.auth.msa.MSAAccount","text":"<p>               Bases: <code>Account</code></p> <p>Minecraft account logged into using Microsoft OAUth2 auth system.</p>"},{"location":"reference/authentication/#mcproto.auth.msa.MSAAccount._get_access_token_from_xbox","title":"mcproto.auth.msa.MSAAccount._get_access_token_from_xbox  <code>async</code> <code>staticmethod</code>","text":"<pre><code>_get_access_token_from_xbox(client: AsyncClient, user_hash: str, xsts_token: str) -&gt; str\n</code></pre> <p>Obtain access token from an XSTS token from Xbox Live auth (for Microsoft accounts).</p>"},{"location":"reference/authentication/#mcproto.auth.msa.MSAAccount.from_xbox_access_token","title":"mcproto.auth.msa.MSAAccount.from_xbox_access_token  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_xbox_access_token(client: AsyncClient, access_token: str) -&gt; Self\n</code></pre> <p>Construct the account from the xbox access token, using it to get the rest of the profile information.</p> <p>See <code>_get_access_token_from_xbox</code> for how to obtain the <code>access_token</code>. Note that in most cases, you'll want to use <code>xbox_auth</code> rather than this method directly.</p>"},{"location":"reference/authentication/#mcproto.auth.msa.MSAAccount.xbox_auth","title":"mcproto.auth.msa.MSAAccount.xbox_auth  <code>async</code> <code>classmethod</code>","text":"<pre><code>xbox_auth(client: AsyncClient, user_hash: str, xsts_token: str) -&gt; Self\n</code></pre> <p>Authenticate using an XSTS token from Xbox Live auth (for Microsoft accounts).</p> <p>See <code>mcproto.auth.microsoft.xbox.xbox_auth</code> for how to obtain the <code>user_hash</code> and <code>xsts_token</code>.</p>"},{"location":"reference/authentication/#mcproto.auth.msa.ServicesAPIError","title":"mcproto.auth.msa.ServicesAPIError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised on a failure from the Minecraft services API.</p>"},{"location":"reference/authentication/#mcproto.auth.msa.ServicesAPIError.msg","title":"mcproto.auth.msa.ServicesAPIError.msg  <code>property</code>","text":"<pre><code>msg: str\n</code></pre> <p>Produce a message for this error.</p>"},{"location":"reference/authentication/#mcproto.auth.msa.ServicesAPIErrorType","title":"mcproto.auth.msa.ServicesAPIErrorType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for various different kinds of exceptions that the Minecraft services API can report.</p>"},{"location":"reference/authentication/#mcproto.auth.msa.ServicesAPIErrorType.from_status_error","title":"mcproto.auth.msa.ServicesAPIErrorType.from_status_error  <code>classmethod</code>","text":"<pre><code>from_status_error(code: int, err_msg: str | None) -&gt; ServicesAPIErrorType\n</code></pre> <p>Determine the error kind based on the error data.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.MicrosoftOauthRequestData","title":"mcproto.auth.microsoft.oauth.MicrosoftOauthRequestData","text":"<p>               Bases: <code>TypedDict</code></p> <p>Data obtained from Microsoft OAuth2 API after making a new authentication request.</p> <p>This data specifies where (URL) we can check with the Microsoft OAuth2 servers for a client confirmation of this authentication request, how often we should check with this server, and when this request expires.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.MicrosoftOauthResponseData","title":"mcproto.auth.microsoft.oauth.MicrosoftOauthResponseData","text":"<p>               Bases: <code>TypedDict</code></p> <p>Data obtained from Microsoft OAuth2 API after a successful authentication.</p> <p>This data contains the access and refresh tokens, giving us the requested account access and the expiry information.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.MicrosoftOauthResponseError","title":"mcproto.auth.microsoft.oauth.MicrosoftOauthResponseError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised on a failure from the Microsoft OAuth2 API.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.MicrosoftOauthResponseError.msg","title":"mcproto.auth.microsoft.oauth.MicrosoftOauthResponseError.msg  <code>property</code>","text":"<pre><code>msg: str\n</code></pre> <p>Produce a message for this error.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.MicrosoftOauthResponseErrorType","title":"mcproto.auth.microsoft.oauth.MicrosoftOauthResponseErrorType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for various different kinds of exceptions that the Microsoft OAuth2 API can report.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.MicrosoftOauthResponseErrorType.from_status_error","title":"mcproto.auth.microsoft.oauth.MicrosoftOauthResponseErrorType.from_status_error  <code>classmethod</code>","text":"<pre><code>from_status_error(error: str) -&gt; MicrosoftOauthResponseErrorType\n</code></pre> <p>Determine the error kind based on the error data.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.full_microsoft_oauth","title":"mcproto.auth.microsoft.oauth.full_microsoft_oauth  <code>async</code>","text":"<pre><code>full_microsoft_oauth(client: AsyncClient, client_id: str) -&gt; MicrosoftOauthResponseData\n</code></pre> <p>Perform full Microsoft Oauth2 sequence, waiting for user to authenticated (from the browser).</p> <p>See <code>microsoft_oauth_request</code> (OAuth2 start) and <code>microsoft_oauth_authenticate</code> (OAuth2 end).</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.microsoft_oauth_authenticate","title":"mcproto.auth.microsoft.oauth.microsoft_oauth_authenticate  <code>async</code>","text":"<pre><code>microsoft_oauth_authenticate(client: AsyncClient, client_id: str, device_code: str) -&gt; MicrosoftOauthResponseData\n</code></pre> <p>Complete Microsoft Oauth2 flow and authenticate.</p> <p>This function should be called after <code>microsoft_oauth_request</code>. If the user has authorized the request, we will get an access token back, allowing us to perform certain actions on behalf of the microsoft user that has authorized this request. Alternatively, this function will fail with <code>MicrosoftOauthResponseError</code>.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.oauth.microsoft_oauth_request","title":"mcproto.auth.microsoft.oauth.microsoft_oauth_request  <code>async</code>","text":"<pre><code>microsoft_oauth_request(client: AsyncClient, client_id: str) -&gt; MicrosoftOauthRequestData\n</code></pre> <p>Initiate Microsoft Oauth2 flow.</p> <p>This requires a <code>client_id</code>, which can be obtained by creating an application on Microsoft Azure, with 'Allow public client flows' set to 'Yes' (can be set from the 'Authentication' tab).</p> <p>This will create a device id, used to identify our request and a user code, which the user can manually enter to https://www.microsoft.com/link and confirm, after that, <code>microsoft_oauth_authenticate</code> should be called, with the returned device id as an argument.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.xbox.XSTSErrorType","title":"mcproto.auth.microsoft.xbox.XSTSErrorType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for various different kinds of exceptions that the Xbox Secure Token Server (XSTS) API can report.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.xbox.XSTSErrorType.from_status_error","title":"mcproto.auth.microsoft.xbox.XSTSErrorType.from_status_error  <code>classmethod</code>","text":"<pre><code>from_status_error(xerr_no: int) -&gt; XSTSErrorType\n</code></pre> <p>Determine the error kind based on the error data.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.xbox.XSTSRequestError","title":"mcproto.auth.microsoft.xbox.XSTSRequestError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised on a failure from the Xbox Secure Token Server (XSTS) API.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.xbox.XSTSRequestError.msg","title":"mcproto.auth.microsoft.xbox.XSTSRequestError.msg  <code>property</code>","text":"<pre><code>msg: str\n</code></pre> <p>Produce a message for this error.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.xbox.XboxData","title":"mcproto.auth.microsoft.xbox.XboxData","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Xbox authentication data.</p>"},{"location":"reference/authentication/#mcproto.auth.microsoft.xbox.xbox_auth","title":"mcproto.auth.microsoft.xbox.xbox_auth  <code>async</code>","text":"<pre><code>xbox_auth(client: AsyncClient, microsoft_access_token: str, bedrock: bool = False) -&gt; XboxData\n</code></pre> <p>Authenticate into Xbox Live account and obtain user hash and XSTS token.</p> <p>See <code>full_microsoft_oauth</code> for info on <code>microsoft_access_token</code>.</p>"},{"location":"reference/encryption/","title":"Encryption utilities","text":"<p>The following components are used for encryption related interacions (generally needed during the communication with the server, after an encryption request during the login process)</p>"},{"location":"reference/encryption/#mcproto.encryption.decrypt_token_and_secret","title":"mcproto.encryption.decrypt_token_and_secret","text":"<pre><code>decrypt_token_and_secret(private_key: RSAPrivateKey, verification_token: bytes, shared_secret: bytes) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Decrypts the verification token and shared secret with the server's private key.</p> <p>Parameters:</p> Name Type Description Default <code>RSAPrivateKey</code> <p>The RSA private key generated by the server</p> required <code>bytes</code> <p>The verification token encrypted and sent by the client</p> required <code>bytes</code> <p>The shared secret encrypted and sent by the client</p> required <p>Returns:</p> Type Description <code>tuple[bytes, bytes]</code> <p>A tuple containing (decrypted token, decrypted secret)</p>"},{"location":"reference/encryption/#mcproto.encryption.decrypt_token_and_secret(private_key)","title":"<code>private_key</code>","text":""},{"location":"reference/encryption/#mcproto.encryption.decrypt_token_and_secret(verification_token)","title":"<code>verification_token</code>","text":""},{"location":"reference/encryption/#mcproto.encryption.decrypt_token_and_secret(shared_secret)","title":"<code>shared_secret</code>","text":""},{"location":"reference/encryption/#mcproto.encryption.encrypt_token_and_secret","title":"mcproto.encryption.encrypt_token_and_secret","text":"<pre><code>encrypt_token_and_secret(public_key: RSAPublicKey, verification_token: bytes, shared_secret: bytes) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Encrypts the verification token and shared secret with the server's public key.</p> <p>Parameters:</p> Name Type Description Default <code>RSAPublicKey</code> <p>The RSA public key provided by the server</p> required <code>bytes</code> <p>The verification token provided by the server</p> required <code>bytes</code> <p>The generated shared secret</p> required <p>Returns:</p> Type Description <code>tuple[bytes, bytes]</code> <p>A tuple containing (encrypted token, encrypted secret)</p>"},{"location":"reference/encryption/#mcproto.encryption.encrypt_token_and_secret(public_key)","title":"<code>public_key</code>","text":""},{"location":"reference/encryption/#mcproto.encryption.encrypt_token_and_secret(verification_token)","title":"<code>verification_token</code>","text":""},{"location":"reference/encryption/#mcproto.encryption.encrypt_token_and_secret(shared_secret)","title":"<code>shared_secret</code>","text":""},{"location":"reference/encryption/#mcproto.encryption.generate_rsa_key","title":"mcproto.encryption.generate_rsa_key","text":"<pre><code>generate_rsa_key() -&gt; RSAPrivateKey\n</code></pre> <p>Generate a random RSA key pair for server.</p> <p>This key pair will be used for <code>LoginEncryptionRequest</code> packet, where the client will be sent the public part of this key pair, which will be used to encrypt the shared secret (and verification token) sent in <code>LoginEncryptionResponse</code> packet. The server will then use the private part of this key pair to decrypt that.</p> <p>This will be a 1024-bit RSA key pair.</p>"},{"location":"reference/encryption/#mcproto.encryption.generate_shared_secret","title":"mcproto.encryption.generate_shared_secret","text":"<pre><code>generate_shared_secret() -&gt; bytes\n</code></pre> <p>Generate a random shared secret for client.</p> <p>This secret will be sent to the server in <code>LoginEncryptionResponse</code> packet, and used to encrypt all future communication afterwards.</p> <p>This will be symetric encryption using AES/CFB8 stream cipher. And this shared secret will be 16-bytes long.</p>"},{"location":"reference/encryption/#mcproto.encryption.generate_verify_token","title":"mcproto.encryption.generate_verify_token","text":"<pre><code>generate_verify_token() -&gt; bytes\n</code></pre> <p>Generate a random verify token.</p> <p>This token will be sent by the server in <code>LoginEncryptionRequest</code>, to be encrypted by the client as a form of verification.</p> <p>This token doesn't need to be cryptographically secure, it's just a sanity check that the client has encrypted the data correctly.</p>"},{"location":"reference/multiplayer/","title":"Multiplayer utilities","text":"<p>The following components are used for various multiplayer interacions (generally needed during the server joining process).</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.JoinAcknowledgeData","title":"mcproto.multiplayer.JoinAcknowledgeData","text":"<p>               Bases: <code>TypedDict</code></p> <p>Response from <code>join_check</code> (hasJoined minecraft API endpoint).</p> <p>This response contains information on the user has submitted the <code>join_request</code>. (uuid, name, and player skin properties)</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.JoinAcknowledgeProperty","title":"mcproto.multiplayer.JoinAcknowledgeProperty","text":"<p>               Bases: <code>TypedDict</code></p> <p>Skin blob data from <code>JoinAcknowledgeData</code>.</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.UserJoinCheckFailedError","title":"mcproto.multiplayer.UserJoinCheckFailedError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when <code>join_check</code> fails.</p> <p>This signifies that the Minecraft session API server didn't contain a join request for the <code>server_hash</code> and <code>client_username</code>, and it therefore didn't acknowledge the join.</p> <p>This means the user didn't confirm this join with Minecraft API (didn't call <code>join_request</code>), hence the validity of this account can't be verified. The server should kick the user and end the join flow.</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.UserJoinRequestErrorKind","title":"mcproto.multiplayer.UserJoinRequestErrorKind","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for various different kinds of exceptions that can occur during <code>join_request</code>.</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.UserJoinRequestErrorKind.from_status_error","title":"mcproto.multiplayer.UserJoinRequestErrorKind.from_status_error  <code>classmethod</code>","text":"<pre><code>from_status_error(code: int, err_msg: str | None) -&gt; UserJoinRequestErrorKind\n</code></pre> <p>Determine the error kind based on the status code and error message.</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.UserJoinRequestFailedError","title":"mcproto.multiplayer.UserJoinRequestFailedError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when <code>join_request</code> fails.</p> <p>This can be caused by various reasons. See: <code>UserJoinRequestErrorKind</code> enum class, containing all the possible reasons. The most likely case for this error is invalid authentication token, or the user being banned from multiplayer.</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.UserJoinRequestFailedError.msg","title":"mcproto.multiplayer.UserJoinRequestFailedError.msg  <code>property</code>","text":"<pre><code>msg: str\n</code></pre> <p>Produce a message for this error.</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.compute_server_hash","title":"mcproto.multiplayer.compute_server_hash","text":"<pre><code>compute_server_hash(server_id: str, shared_secret: bytes, server_public_key: RSAPublicKey) -&gt; str\n</code></pre> <p>Compute a hash to be sent as 'serverId' field to Mojang session server.</p> <p>This function is used for <code>join_request</code> and <code>join_check</code> functions, which require this hash value.</p> <p>This SHA1 hash is computed based on the <code>server_id</code>, <code>server_public_key</code> and <code>shared_secret</code>. Together, these values ensure that there can't be any middle-man listening in after encryption is established.</p> <p>This is because a middle man/proxy who would want to listed into the encrypted communication would need to know the encryption key (<code>shared_secret</code>). A proxy can capture this key, as the client sends it over to the server in <code>LoginEncryptionResponse</code> packet, however it is sent encrypted. The client performs this encryption with a public key, which it got from the server, in <code>LoginEncryptionRequest</code> packet.</p> <p>That mans that for a proxy to be able to actually obtain this shared secret value, it would need to be able to capture the encryption response, and decrypt the shared secret value. That means it would need to send a spoofed version of the encryption request packet, with the server's public key replaced by one that the proxy owns a private key for. This will work, and the proxy could indeed decrypt the sent shared secret now. All it would need to do now is send this shared secret to the server. That's easy, just re-encrypt it with the server's original public key, and send it in a custom encryption request!</p> <p>So then it seems that it's possible to intercept the client-server communication and spy in, and indeed, this will work with offline mode (warez) servers, however with online mode servers, that's where this function comes in!</p> <p>Online mode servers rely on an API server from Mojang's (session server), which the client informs of the join. The server then queries this server for an acknowledgement of this join, and only if this session server confirms that the client did indeed inform it of this join will the server allow this client to join.</p> <p>The trick is, this request to inform the session server of the join can only be performed by the client directly, a proxy can't simulate it, because this request requires a token for the minecraft account, which only the launcher has. The client never sends this token to the server, only to the Mojang's session server, so a proxy wouldn't have it.</p> <p>This join request then contains those 3 variables, one of which being the public key itself, so if the proxy sent a different key, the server would no longer arrive at the same server hash, and the check would fail, so the server wouldn't allow this client to join.</p>"},{"location":"reference/multiplayer/#mcproto.multiplayer.join_check","title":"mcproto.multiplayer.join_check  <code>async</code>","text":"<pre><code>join_check(client: AsyncClient, client_username: str, server_hash: str, client_ip: str | None = None) -&gt; JoinAcknowledgeData\n</code></pre> <p>Check with the Mojang session server if a join request was made.</p> <p>This function is called by the server in online mode (non-warez), to verify that the joining client really does have an official minecraft account. The client will first inform the server about this join request (<code>join_request</code>), server then runs this check confirming the client is who they say they are.</p> <p>This request should be performed after receiving the after receiving the <code>LoginEncryptionResponse</code> packet.</p> <p>This request uses a <code>server_hash</code>, this is the value under which the client has submitted their join request, and we'll now be checking for that submission with that same value. This is a hash composed of various values, which together serve as a way to prevent any MITMA (man in the middle attacks). To obtain this hash, see <code>compute_server_hash</code>. This function's docstring also includes description for why and how this prevents a MITMA.</p> <p>Parameters:</p> Name Type Description Default <code>AsyncClient</code> <p>HTTPX async client to make the HTTP request with.</p> required <code>str</code> <p>Must match joining the username of the joining client (case sensitive).</p> <p>Note: This is the in-game nickname of the selected profile, not Mojang account name (which is never sent to the server). Servers should use the name in \"name\" field which was received in the <code>LoginStart</code> packet.</p> required <code>str</code> <p>SHA1 hash of the server (see <code>compute_server_hash</code>)</p> required <code>str | None</code> <p>IP address of the connecting player (optional)</p> <p>Servers only include this when 'prevent-proxy-connections' is set to true in server.properties</p> <code>None</code>"},{"location":"reference/multiplayer/#mcproto.multiplayer.join_check(client)","title":"<code>client</code>","text":""},{"location":"reference/multiplayer/#mcproto.multiplayer.join_check(client_username)","title":"<code>client_username</code>","text":""},{"location":"reference/multiplayer/#mcproto.multiplayer.join_check(server_hash)","title":"<code>server_hash</code>","text":""},{"location":"reference/multiplayer/#mcproto.multiplayer.join_check(client_ip)","title":"<code>client_ip</code>","text":""},{"location":"reference/multiplayer/#mcproto.multiplayer.join_request","title":"mcproto.multiplayer.join_request  <code>async</code>","text":"<pre><code>join_request(client: AsyncClient, account: Account, server_hash: str) -&gt; None\n</code></pre> <p>Inform the Mojang session server about this new user join.</p> <p>This function is called by the client, when joining an online mode (non-warez) server. This is required and the server will check that this request was indeed made (<code>join_check</code>).</p> <p>This request should be performed after receiving the <code>LoginEncryptionRequest</code> packet, but before sending the <code>LoginEncryptionResponse</code>.</p> <p>Performing this request requires an <code>Account</code> instance, as this request is here to ensure that only original Minceraft accounts (officially bought accounts) can join.</p> <p>This request uses a <code>server_hash</code> to identify which server is the client attempting to join. This hash is composed of various values, which together serve as a way to prevent any MITMA (man in the middle attacks). To obtain this hash, see <code>compute_server_hash</code>. This function's docstring also includes description for why and how this prevents a MITMA.</p> <p>Parameters:</p> Name Type Description Default <code>AsyncClient</code> <p>HTTPX async client to make the HTTP request with.</p> required <code>Account</code> <p>Instance of an account containing the minecraft token necessary for this request.</p> required <code>str</code> <p>SHA1 hash of the server (see <code>compute_server_hash</code>)</p> required"},{"location":"reference/multiplayer/#mcproto.multiplayer.join_request(client)","title":"<code>client</code>","text":""},{"location":"reference/multiplayer/#mcproto.multiplayer.join_request(account)","title":"<code>account</code>","text":""},{"location":"reference/multiplayer/#mcproto.multiplayer.join_request(server_hash)","title":"<code>server_hash</code>","text":""},{"location":"reference/packets/","title":"Packets","text":"<p>Pending rewrite of this page</p> <p>This page will be rewritten in the near future and split it into multiple pages for the individual game states, with the play state possibly being subdivided into even more pages. Currently, this page shows all implemented packets in mcproto. This split will happen once play state packets are introduced.</p>"},{"location":"reference/packets/#base-classes-and-interaction-functions","title":"Base classes and interaction functions","text":""},{"location":"reference/packets/#mcproto.packets.ClientBoundPacket","title":"mcproto.packets.ClientBoundPacket","text":"<p>               Bases: <code>Packet</code>, <code>ABC</code></p> <p>Packet bound to a client (Server -&gt; Client).</p>"},{"location":"reference/packets/#mcproto.packets.GameState","title":"mcproto.packets.GameState","text":"<p>               Bases: <code>IntEnum</code></p> <p>All possible game states in minecraft.</p>"},{"location":"reference/packets/#mcproto.packets.Packet","title":"mcproto.packets.Packet","text":"<p>               Bases: <code>Serializable</code>, <code>RequiredParamsABCMixin</code>, <code>ABC</code></p> <p>Base class for all packets.</p>"},{"location":"reference/packets/#mcproto.packets.PacketDirection","title":"mcproto.packets.PacketDirection","text":"<p>               Bases: <code>IntEnum</code></p> <p>Represents whether a packet targets (is bound to) a client or server.</p>"},{"location":"reference/packets/#mcproto.packets.ServerBoundPacket","title":"mcproto.packets.ServerBoundPacket","text":"<p>               Bases: <code>Packet</code>, <code>ABC</code></p> <p>Packet bound to a server (Client -&gt; Server).</p>"},{"location":"reference/packets/#mcproto.packets.async_read_packet","title":"mcproto.packets.async_read_packet  <code>async</code>","text":"<pre><code>async_read_packet(reader: BaseAsyncReader, packet_map: Mapping[int, type[T_Packet]], *, compression_threshold: int = -1) -&gt; T_Packet\n</code></pre> <p>Read a packet.</p> <p>Parameters:</p> Name Type Description Default <code>BaseAsyncReader</code> <p>The connection/reader to receive this packet from.</p> required <code>Mapping[int, type[T_Packet]]</code> <p>A mapping of packet id (number) -&gt; Packet (class).</p> <p>This mapping should contain all of the packets for the current gamestate and direction. See <code>generate_packet_map</code></p> required <code>int</code> <p>A threshold packet length, which if crossed compression should be enabled.</p> <p>You can get this number from <code>LoginSetCompression</code> packet. If this packet wasn't sent by the server, set this to -1 (default).</p> <p>Note that during reading, we don't actually need to know the specific threshold, just whether or not is is non-negative (whether compression is enabled), as the packet format fundamentally changes when it is. That means you can pass any positive number here to enable compression, regardless of what it actually is.</p> <code>-1</code>"},{"location":"reference/packets/#mcproto.packets.async_read_packet(reader)","title":"<code>reader</code>","text":""},{"location":"reference/packets/#mcproto.packets.async_read_packet(packet_map)","title":"<code>packet_map</code>","text":""},{"location":"reference/packets/#mcproto.packets.async_read_packet(compression_threshold)","title":"<code>compression_threshold</code>","text":""},{"location":"reference/packets/#mcproto.packets.async_write_packet","title":"mcproto.packets.async_write_packet  <code>async</code>","text":"<pre><code>async_write_packet(writer: BaseAsyncWriter, packet: Packet, *, compression_threshold: int = -1) -&gt; None\n</code></pre> <p>Write given <code>packet</code>.</p> <p>Parameters:</p> Name Type Description Default <code>BaseAsyncWriter</code> <p>The connection/writer to send this packet to.</p> required <code>Packet</code> <p>The packet to be sent.</p> required <code>int</code> <p>A threshold packet length, which if crossed compression should be enabled.</p> <p>You can get this number from <code>LoginSetCompression</code> packet. If this packet wasn't sent by the server, set this to -1 (default).</p> <code>-1</code>"},{"location":"reference/packets/#mcproto.packets.async_write_packet(writer)","title":"<code>writer</code>","text":""},{"location":"reference/packets/#mcproto.packets.async_write_packet(packet)","title":"<code>packet</code>","text":""},{"location":"reference/packets/#mcproto.packets.async_write_packet(compression_threshold)","title":"<code>compression_threshold</code>","text":""},{"location":"reference/packets/#mcproto.packets.generate_packet_map","title":"mcproto.packets.generate_packet_map  <code>cached</code>","text":"<pre><code>generate_packet_map(direction: Literal[SERVERBOUND], state: GameState) -&gt; Mapping[int, type[ServerBoundPacket]]\n</code></pre><pre><code>generate_packet_map(direction: Literal[CLIENTBOUND], state: GameState) -&gt; Mapping[int, type[ClientBoundPacket]]\n</code></pre> <pre><code>generate_packet_map(direction: PacketDirection, state: GameState) -&gt; Mapping[int, type[Packet]]\n</code></pre> <p>Dynamically generated a packet map for given <code>direction</code> and <code>state</code>.</p> <p>This generation is done by dynamically importing all of the modules containing these packets, filtering them to only contain those packets with the specified parameters, and storing those into a dictionary, using the packet id as key, and the packet class itself being the value.</p> <p>As this function is likely to be called quite often, and it uses dynamic importing to obtain the packet classes, this function is cached, which means the logic only actually runs once, after which, for the same arguments, the same dict will be returned.</p>"},{"location":"reference/packets/#mcproto.packets.sync_read_packet","title":"mcproto.packets.sync_read_packet","text":"<pre><code>sync_read_packet(reader: BaseSyncReader, packet_map: Mapping[int, type[T_Packet]], *, compression_threshold: int = -1) -&gt; T_Packet\n</code></pre> <p>Read a packet.</p> <p>Parameters:</p> Name Type Description Default <code>BaseSyncReader</code> <p>The connection/reader to receive this packet from.</p> required <code>Mapping[int, type[T_Packet]]</code> <p>A mapping of packet id (number) -&gt; Packet (class).</p> <p>This mapping should contain all of the packets for the current gamestate and direction. See <code>generate_packet_map</code></p> required <code>int</code> <p>A threshold packet length, which if crossed compression should be enabled.</p> <p>You can get this number from <code>LoginSetCompression</code> packet. If this packet wasn't sent by the server, set this to -1 (default).</p> <p>Note that during reading, we don't actually need to know the specific threshold, just whether or not is is non-negative (whether compression is enabled), as the packet format fundamentally changes when it is. That means you can pass any positive number here to enable compression, regardless of what it actually is.</p> <code>-1</code>"},{"location":"reference/packets/#mcproto.packets.sync_read_packet(reader)","title":"<code>reader</code>","text":""},{"location":"reference/packets/#mcproto.packets.sync_read_packet(packet_map)","title":"<code>packet_map</code>","text":""},{"location":"reference/packets/#mcproto.packets.sync_read_packet(compression_threshold)","title":"<code>compression_threshold</code>","text":""},{"location":"reference/packets/#mcproto.packets.sync_write_packet","title":"mcproto.packets.sync_write_packet","text":"<pre><code>sync_write_packet(writer: BaseSyncWriter, packet: Packet, *, compression_threshold: int = -1) -&gt; None\n</code></pre> <p>Write given <code>packet</code>.</p> <p>Parameters:</p> Name Type Description Default <code>BaseSyncWriter</code> <p>The connection/writer to send this packet to.</p> required <code>Packet</code> <p>The packet to be sent.</p> required <code>int</code> <p>A threshold packet length, which if crossed compression should be enabled.</p> <p>You can get this number from <code>LoginSetCompression</code> packet. If this packet wasn't sent by the server, set this to -1 (default).</p> <code>-1</code>"},{"location":"reference/packets/#mcproto.packets.sync_write_packet(writer)","title":"<code>writer</code>","text":""},{"location":"reference/packets/#mcproto.packets.sync_write_packet(packet)","title":"<code>packet</code>","text":""},{"location":"reference/packets/#mcproto.packets.sync_write_packet(compression_threshold)","title":"<code>compression_threshold</code>","text":""},{"location":"reference/packets/#handshaking-gamestate","title":"Handshaking gamestate","text":""},{"location":"reference/packets/#mcproto.packets.handshaking.handshake.Handshake","title":"mcproto.packets.handshaking.handshake.Handshake","text":"<p>               Bases: <code>ServerBoundPacket</code></p> <p>Initializes connection between server and client. (Client -&gt; Server).</p> <p>Initialize the Handshake packet.</p> <p>Parameters:</p> Name Type Description Default <p>Protocol version number to be used.</p> required <p>The host/address the client is connecting to.</p> required <p>The port the client is connecting to.</p> required <p>The next state for the server to move into.</p> required"},{"location":"reference/packets/#mcproto.packets.handshaking.handshake.Handshake(protocol_version)","title":"<code>protocol_version</code>","text":""},{"location":"reference/packets/#mcproto.packets.handshaking.handshake.Handshake(server_address)","title":"<code>server_address</code>","text":""},{"location":"reference/packets/#mcproto.packets.handshaking.handshake.Handshake(server_port)","title":"<code>server_port</code>","text":""},{"location":"reference/packets/#mcproto.packets.handshaking.handshake.Handshake(next_state)","title":"<code>next_state</code>","text":""},{"location":"reference/packets/#mcproto.packets.handshaking.handshake.Handshake.serialize_to","title":"mcproto.packets.handshaking.handshake.Handshake.serialize_to","text":"<pre><code>serialize_to(buf: Buffer) -&gt; None\n</code></pre> <p>Serialize the packet.</p>"},{"location":"reference/packets/#mcproto.packets.handshaking.handshake.NextState","title":"mcproto.packets.handshaking.handshake.NextState","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enum of all possible next game states we can transition to from the <code>Handshake</code> packet.</p>"},{"location":"reference/packets/#status-gamestate","title":"Status gamestate","text":""},{"location":"reference/packets/#mcproto.packets.status.ping.PingPong","title":"mcproto.packets.status.ping.PingPong","text":"<p>               Bases: <code>ClientBoundPacket</code>, <code>ServerBoundPacket</code></p> <p>Ping request/Pong response (Server &lt;-&gt; Client).</p> <p>Initialize the PingPong packet.</p> <p>Parameters:</p> Name Type Description Default <p>Random number to test out the connection. Ideally, this number should be quite big, however it does need to fit within the limit of a signed long long (-2 ** 63 to 2 ** 63 - 1).</p> required"},{"location":"reference/packets/#mcproto.packets.status.ping.PingPong(payload)","title":"<code>payload</code>","text":""},{"location":"reference/packets/#mcproto.packets.status.status.StatusRequest","title":"mcproto.packets.status.status.StatusRequest","text":"<p>               Bases: <code>ServerBoundPacket</code></p> <p>Request from the client to get information on the server. (Client -&gt; Server).</p>"},{"location":"reference/packets/#mcproto.packets.status.status.StatusResponse","title":"mcproto.packets.status.status.StatusResponse","text":"<p>               Bases: <code>ClientBoundPacket</code></p> <p>Response from the server to requesting client with status data information. (Server -&gt; Client).</p> <p>Initialize the StatusResponse packet.</p> <p>Parameters:</p> Name Type Description Default <p>JSON response data sent back to the client.</p> required"},{"location":"reference/packets/#mcproto.packets.status.status.StatusResponse(data)","title":"<code>data</code>","text":""},{"location":"reference/packets/#login-gamestate","title":"Login gamestate","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginAcknowledged","title":"mcproto.packets.login.login.LoginAcknowledged","text":"<p>               Bases: <code>ServerBoundPacket</code></p> <p>Sent by client to acknowledge <code>LoginSuccess</code> from server. (Client -&gt; Server).</p> <p>This packet has no fields - it's just an empty acknowledgment.</p>"},{"location":"reference/packets/#mcproto.packets.login.login.LoginAcknowledged._deserialize","title":"mcproto.packets.login.login.LoginAcknowledged._deserialize  <code>classmethod</code>","text":"<pre><code>_deserialize(buf: Buffer) -&gt; Self\n</code></pre> <p>Deserialize the packet (no data to deserialize).</p>"},{"location":"reference/packets/#mcproto.packets.login.login.LoginAcknowledged.serialize_to","title":"mcproto.packets.login.login.LoginAcknowledged.serialize_to","text":"<pre><code>serialize_to(buf: Buffer) -&gt; None\n</code></pre> <p>Serialize the packet (no data to serialize).</p>"},{"location":"reference/packets/#mcproto.packets.login.login.LoginDisconnect","title":"mcproto.packets.login.login.LoginDisconnect","text":"<p>               Bases: <code>ClientBoundPacket</code></p> <p>Sent by the server to kick a player while in the login state. (Server -&gt; Client).</p> <p>Initialize the LoginDisconnect packet.</p> <p>Parameters:</p> Name Type Description Default <p>The reason for disconnection (kick).</p> required"},{"location":"reference/packets/#mcproto.packets.login.login.LoginDisconnect(reason)","title":"<code>reason</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginEncryptionRequest","title":"mcproto.packets.login.login.LoginEncryptionRequest","text":"<p>               Bases: <code>ClientBoundPacket</code></p> <p>Used by the server to ask the client to encrypt the login process. (Server -&gt; Client).</p> <p>Initialize the LoginEncryptionRequest packet.</p> <p>Parameters:</p> Name Type Description Default <p>Server's public key.</p> required <p>Sequence of random bytes generated by server for verification.</p> required <p>Empty on minecraft versions 1.7.X and higher (20 random chars pre 1.7).</p> required"},{"location":"reference/packets/#mcproto.packets.login.login.LoginEncryptionRequest(public_key)","title":"<code>public_key</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginEncryptionRequest(verify_token)","title":"<code>verify_token</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginEncryptionRequest(server_id)","title":"<code>server_id</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginEncryptionResponse","title":"mcproto.packets.login.login.LoginEncryptionResponse","text":"<p>               Bases: <code>ServerBoundPacket</code></p> <p>Response from the client to <code>LoginEncryptionRequest</code> packet. (Client -&gt; Server).</p> <p>Initialize the LoginEncryptionResponse packet.</p> <p>Parameters:</p> Name Type Description Default <p>Shared secret value, encrypted with server's public key.</p> required <p>Verify token value, encrypted with same public key.</p> required"},{"location":"reference/packets/#mcproto.packets.login.login.LoginEncryptionResponse(shared_secret)","title":"<code>shared_secret</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginEncryptionResponse(verify_token)","title":"<code>verify_token</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginEncryptionResponse.serialize_to","title":"mcproto.packets.login.login.LoginEncryptionResponse.serialize_to","text":"<pre><code>serialize_to(buf: Buffer) -&gt; None\n</code></pre> <p>Serialize the packet.</p>"},{"location":"reference/packets/#mcproto.packets.login.login.LoginPluginRequest","title":"mcproto.packets.login.login.LoginPluginRequest","text":"<p>               Bases: <code>ClientBoundPacket</code></p> <p>Sent by the server to implement a custom handshaking flow. (Server -&gt; Client).</p> <p>Initialize the LoginPluginRequest.</p> <p>Parameters:</p> Name Type Description Default <p>Message id, generated by the server, should be unique to the connection.</p> required <p>Channel identifier, name of the plugin channel used to send data.</p> required <p>Data that is to be sent.</p> required"},{"location":"reference/packets/#mcproto.packets.login.login.LoginPluginRequest(message_id)","title":"<code>message_id</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginPluginRequest(channel)","title":"<code>channel</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginPluginRequest(data)","title":"<code>data</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginPluginResponse","title":"mcproto.packets.login.login.LoginPluginResponse","text":"<p>               Bases: <code>ServerBoundPacket</code></p> <p>Response to LoginPluginRequest from client. (Client -&gt; Server).</p> <p>Initialize the LoginPluginRequest packet.</p> <p>Parameters:</p> Name Type Description Default <p>Message id, generated by the server, should be unique to the connection.</p> required <p>Optional response data, present if client understood request.</p> required"},{"location":"reference/packets/#mcproto.packets.login.login.LoginPluginResponse(message_id)","title":"<code>message_id</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginPluginResponse(data)","title":"<code>data</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginSetCompression","title":"mcproto.packets.login.login.LoginSetCompression","text":"<p>               Bases: <code>ClientBoundPacket</code></p> <p>Sent by the server to specify whether to use compression on future packets or not (Server -&gt; Client).</p> <p>Initialize the LoginSetCompression packet.</p> <p>Parameters:</p> Name Type Description Default <p>Maximum size of a packet before it is compressed. All packets smaller than this will remain uncompressed. To disable compression completely, threshold can be set to -1.</p> required Note <p>This packet is optional, and if not set, the compression will not be enabled at all.</p>"},{"location":"reference/packets/#mcproto.packets.login.login.LoginSetCompression(threshold)","title":"<code>threshold</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginStart","title":"mcproto.packets.login.login.LoginStart","text":"<p>               Bases: <code>ServerBoundPacket</code></p> <p>Packet from client asking to start login process. (Client -&gt; Server).</p> <p>Initialize the LoginStart packet.</p> <p>Parameters:</p> Name Type Description Default <p>Username of the client who sent the request.</p> required <p>UUID of the player logging in (if the player doesn't have a UUID, this can be <code>None</code>)</p> required"},{"location":"reference/packets/#mcproto.packets.login.login.LoginStart(username)","title":"<code>username</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginStart(uuid)","title":"<code>uuid</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginSuccess","title":"mcproto.packets.login.login.LoginSuccess","text":"<p>               Bases: <code>ClientBoundPacket</code></p> <p>Sent by the server to denote a successful login. (Server -&gt; Client).</p> <p>Initialize the LoginSuccess packet.</p> <p>Parameters:</p> Name Type Description Default <p>The UUID of the connecting player/client.</p> required <p>The username of the connecting player/client.</p> required"},{"location":"reference/packets/#mcproto.packets.login.login.LoginSuccess(uuid)","title":"<code>uuid</code>","text":""},{"location":"reference/packets/#mcproto.packets.login.login.LoginSuccess(username)","title":"<code>username</code>","text":""},{"location":"reference/packets/#play-gamestate","title":"Play gamestate","text":"<p>Work In Progress</p> <p>Packets for the Play gamestate aren't yet implemented.</p>"},{"location":"reference/protocol/","title":"Protocol documentation","text":"<p>This is the documentation for components related to interactions with the minecraft protocol and connection establishing.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader","title":"mcproto.protocol.base_io.BaseAsyncReader","text":"<p>               Bases: <code>ABC</code></p> <p>Base class holding asynchronous read buffer/connection interactions.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader._read_varuint","title":"mcproto.protocol.base_io.BaseAsyncReader._read_varuint  <code>async</code>","text":"<pre><code>_read_varuint(*, max_bits: int | None = None) -&gt; int\n</code></pre> <p>Read an arbitrarily big unsigned integer in a variable length format.</p> <p>This is a standard way of transmitting ints, and it allows smaller numbers to take less bytes.</p> <p>Reading will be limited up to integer values of <code>max_bits</code> bits, and trying to read bigger values will raise an <code>IOError</code>. Note that setting <code>max_bits</code> to for example 32 bits doesn't mean that at most 4 bytes will be read, in this case we would actually read at most 5 bytes, due to the variable encoding overhead.</p> <p>Varints send bytes where 7 least significant bits are value bits, and the most significant bit is continuation flag bit. If this continuation bit is set (1), it indicates that there will be another varint byte sent after this one. The least significant group is written first, followed by each of the more significant groups, making varints little-endian, however in groups of 7 bits, not 8.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader.read","title":"mcproto.protocol.base_io.BaseAsyncReader.read  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>read(length: int) -&gt; bytes\n</code></pre> <p>Underlying read method, obtaining the raw data.</p> <p>All of the reader functions will eventually call this method.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader.read_ascii","title":"mcproto.protocol.base_io.BaseAsyncReader.read_ascii  <code>async</code>","text":"<pre><code>read_ascii() -&gt; str\n</code></pre> <p>Read ISO-8859-1 encoded string, until we encounter NULL (0x00) at the end indicating string end.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader.read_bytearray","title":"mcproto.protocol.base_io.BaseAsyncReader.read_bytearray  <code>async</code>","text":"<pre><code>read_bytearray() -&gt; bytes\n</code></pre> <p>Read an arbitrary sequence of bytes, prefixed with a varint of it's size.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader.read_optional","title":"mcproto.protocol.base_io.BaseAsyncReader.read_optional  <code>async</code>","text":"<pre><code>read_optional(reader: Callable[[], Awaitable[R]]) -&gt; R | None\n</code></pre> <p>Read a bool showing if a value is present, if so, also reads this value with <code>reader</code> function.</p> <ul> <li>When <code>False</code> is read, the function will not read anything and <code>None</code> is returned.</li> <li>When <code>True</code> is read, the <code>reader</code> function is called, and it's return value is forwarded.</li> </ul>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader.read_utf","title":"mcproto.protocol.base_io.BaseAsyncReader.read_utf  <code>async</code>","text":"<pre><code>read_utf() -&gt; str\n</code></pre> <p>Read a UTF-8 encoded string, prefixed with a varint of it's size (in bytes).</p> <p>The maximum amount of UTF-8 characters is limited to 32767.</p> <p>Individual UTF-8 characters can take up to 4 bytes, however most of the common ones take up less. Assuming the worst case of 4 bytes per every character, at most 131068 data bytes will be read + 3 additional bytes from the varint encoding overhead.</p> <p>Raises:</p> Type Description <code>IOError</code> <ul> <li>If the prefix varint is bigger than the maximum (131068) bytes, the string will not be read at all,   and <code>IOError</code> will be raised immediately.</li> <li>If the received string has more than the maximum amount of characters (32767). Note that in this   case, the string will still get read in it's entirety, since it fits into the maximum bytes limit   (131068), which was simply read at once. This limitation is here only to replicate the behavior of   minecraft's implementation.</li> </ul>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader.read_value","title":"mcproto.protocol.base_io.BaseAsyncReader.read_value  <code>async</code>","text":"<pre><code>read_value(fmt: INT_FORMATS_TYPE) -&gt; int\n</code></pre><pre><code>read_value(fmt: FLOAT_FORMATS_TYPE) -&gt; float\n</code></pre><pre><code>read_value(fmt: Literal[BOOL]) -&gt; bool\n</code></pre><pre><code>read_value(fmt: Literal[CHAR]) -&gt; str\n</code></pre> <pre><code>read_value(fmt: StructFormat) -&gt; object\n</code></pre> <p>Read a value as given struct format (<code>fmt</code>) in big-endian mode.</p> <p>The amount of bytes to read will be determined based on the struct format automatically.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader.read_varint","title":"mcproto.protocol.base_io.BaseAsyncReader.read_varint  <code>async</code>","text":"<pre><code>read_varint() -&gt; int\n</code></pre> <p>Read a 32-bit signed integer in a variable length format.</p> <p>For more information about variable length format check <code>_read_varuint</code>.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncReader.read_varlong","title":"mcproto.protocol.base_io.BaseAsyncReader.read_varlong  <code>async</code>","text":"<pre><code>read_varlong() -&gt; int\n</code></pre> <p>Read a 64-bit signed integer in a variable length format.</p> <p>For more information about variable length format check <code>_read_varuint</code>.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter","title":"mcproto.protocol.base_io.BaseAsyncWriter","text":"<p>               Bases: <code>ABC</code></p> <p>Base class holding asynchronous write buffer/connection interactions.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter._write_varuint","title":"mcproto.protocol.base_io.BaseAsyncWriter._write_varuint  <code>async</code>","text":"<pre><code>_write_varuint(value: int, /, *, max_bits: int | None = None) -&gt; None\n</code></pre> <p>Write an arbitrarily big unsigned integer in a variable length format.</p> <p>This is a standard way of transmitting ints, and it allows smaller numbers to take less bytes.</p> <p>Writing will be limited up to integer values of <code>max_bits</code> bits, and trying to write bigger values will raise a <code>ValueError</code>. Note that setting <code>max_bits</code> to for example 32 bits doesn't mean that at most 4 bytes will be sent, in this case it would actually take at most 5 bytes, due to the variable encoding overhead.</p> <p>Varints send bytes where 7 least significant bits are value bits, and the most significant bit is continuation flag bit. If this continuation bit is set (1), it indicates that there will be another varint byte sent after this one. The least significant group is written first, followed by each of the more significant groups, making varints little-endian, however in groups of 7 bits, not 8.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter.write","title":"mcproto.protocol.base_io.BaseAsyncWriter.write  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>write(data: bytes | bytearray) -&gt; None\n</code></pre> <p>Underlying write method, sending/storing the data.</p> <p>All of the writer functions will eventually call this method.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter.write_ascii","title":"mcproto.protocol.base_io.BaseAsyncWriter.write_ascii  <code>async</code>","text":"<pre><code>write_ascii(value: str) -&gt; None\n</code></pre> <p>Write ISO-8859-1 encoded string, with NULL (0x00) at the end to indicate string end.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter.write_bytearray","title":"mcproto.protocol.base_io.BaseAsyncWriter.write_bytearray  <code>async</code>","text":"<pre><code>write_bytearray(data: bytes | bytearray) -&gt; None\n</code></pre> <p>Write an arbitrary sequence of bytes, prefixed with a varint of it's size.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter.write_optional","title":"mcproto.protocol.base_io.BaseAsyncWriter.write_optional  <code>async</code>","text":"<pre><code>write_optional(value: T | None, /, writer: Callable[[T], Awaitable[R]]) -&gt; R | None\n</code></pre> <p>Write a bool showing if a <code>value</code> is present, if so, also writes this value with <code>writer</code> function.</p> <ul> <li>When <code>value</code> is <code>None</code>, a bool of <code>False</code> will be written, and <code>None</code> is returned.</li> <li>When <code>value</code> is not <code>None</code>, a bool of <code>True</code> is written, after which the <code>writer</code> function is called,   and the return value is forwarded.</li> </ul>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter.write_utf","title":"mcproto.protocol.base_io.BaseAsyncWriter.write_utf  <code>async</code>","text":"<pre><code>write_utf(value: str) -&gt; None\n</code></pre> <p>Write a UTF-8 encoded string, prefixed with a varint of it's size (in bytes).</p> <p>The maximum amount of UTF-8 characters is limited to 32767.</p> <p>Individual UTF-8 characters can take up to 4 bytes, however most of the common ones take up less. Assuming the worst case of 4 bytes per every character, at most 131068 data bytes will be written + 3 additional bytes from the varint encoding overhead.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the given string <code>value</code> has more characters than the allowed maximum (32767).</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter.write_value","title":"mcproto.protocol.base_io.BaseAsyncWriter.write_value  <code>async</code>","text":"<pre><code>write_value(fmt: INT_FORMATS_TYPE, value: int) -&gt; None\n</code></pre><pre><code>write_value(fmt: FLOAT_FORMATS_TYPE, value: float) -&gt; None\n</code></pre><pre><code>write_value(fmt: Literal[BOOL], value: bool) -&gt; None\n</code></pre><pre><code>write_value(fmt: Literal[CHAR], value: str) -&gt; None\n</code></pre> <pre><code>write_value(fmt: StructFormat, value: object) -&gt; None\n</code></pre> <p>Write a given <code>value</code> as given struct format (<code>fmt</code>) in big-endian mode.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter.write_varint","title":"mcproto.protocol.base_io.BaseAsyncWriter.write_varint  <code>async</code>","text":"<pre><code>write_varint(value: int) -&gt; None\n</code></pre> <p>Write a 32-bit signed integer in a variable length format.</p> <p>For more information about variable length format check <code>_write_varuint</code>.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseAsyncWriter.write_varlong","title":"mcproto.protocol.base_io.BaseAsyncWriter.write_varlong  <code>async</code>","text":"<pre><code>write_varlong(value: int) -&gt; None\n</code></pre> <p>Write a 64-bit signed integer in a variable length format.</p> <p>For more information about variable length format check <code>_write_varuint</code>.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader","title":"mcproto.protocol.base_io.BaseSyncReader","text":"<p>               Bases: <code>ABC</code></p> <p>Base class holding synchronous read buffer/connection interactions.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader._read_varuint","title":"mcproto.protocol.base_io.BaseSyncReader._read_varuint","text":"<pre><code>_read_varuint(*, max_bits: int | None = None) -&gt; int\n</code></pre> <p>Read an arbitrarily big unsigned integer in a variable length format.</p> <p>This is a standard way of transmitting ints, and it allows smaller numbers to take less bytes.</p> <p>Reading will be limited up to integer values of <code>max_bits</code> bits, and trying to read bigger values will raise an <code>IOError</code>. Note that setting <code>max_bits</code> to for example 32 bits doesn't mean that at most 4 bytes will be read, in this case we would actually read at most 5 bytes, due to the variable encoding overhead.</p> <p>Varints send bytes where 7 least significant bits are value bits, and the most significant bit is continuation flag bit. If this continuation bit is set (1), it indicates that there will be another varint byte sent after this one. The least significant group is written first, followed by each of the more significant groups, making varints little-endian, however in groups of 7 bits, not 8.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader.read","title":"mcproto.protocol.base_io.BaseSyncReader.read  <code>abstractmethod</code>","text":"<pre><code>read(length: int) -&gt; bytes\n</code></pre> <p>Underlying read method, obtaining the raw data.</p> <p>All of the reader functions will eventually call this method.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader.read_ascii","title":"mcproto.protocol.base_io.BaseSyncReader.read_ascii","text":"<pre><code>read_ascii() -&gt; str\n</code></pre> <p>Read ISO-8859-1 encoded string, until we encounter NULL (0x00) at the end indicating string end.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader.read_bytearray","title":"mcproto.protocol.base_io.BaseSyncReader.read_bytearray","text":"<pre><code>read_bytearray() -&gt; bytes\n</code></pre> <p>Read an arbitrary sequence of bytes, prefixed with a varint of it's size.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader.read_optional","title":"mcproto.protocol.base_io.BaseSyncReader.read_optional","text":"<pre><code>read_optional(reader: Callable[[], R]) -&gt; R | None\n</code></pre> <p>Read a bool showing if a value is present, if so, also reads this value with <code>reader</code> function.</p> <ul> <li>When <code>False</code> is read, the function will not read anything and <code>None</code> is returned.</li> <li>When <code>True</code> is read, the <code>reader</code> function is called, and it's return value is forwarded.</li> </ul>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader.read_utf","title":"mcproto.protocol.base_io.BaseSyncReader.read_utf","text":"<pre><code>read_utf() -&gt; str\n</code></pre> <p>Read a UTF-8 encoded string, prefixed with a varint of it's size (in bytes).</p> <p>The maximum amount of UTF-8 characters is limited to 32767.</p> <p>Individual UTF-8 characters can take up to 4 bytes, however most of the common ones take up less. Assuming the worst case of 4 bytes per every character, at most 131068 data bytes will be read + 3 additional bytes from the varint encoding overhead.</p> <p>Raises:</p> Type Description <code>IOError</code> <ul> <li>If the prefix varint is bigger than the maximum (131068) bytes, the string will not be read at all,   and <code>IOError</code> will be raised immediately.</li> <li>If the received string has more than the maximum amount of characters (32767). Note that in this   case, the string will still get read in it's entirety, since it fits into the maximum bytes limit   (131068), which was simply read at once. This limitation is here only to replicate the behavior of   minecraft's implementation.</li> </ul>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader.read_value","title":"mcproto.protocol.base_io.BaseSyncReader.read_value","text":"<pre><code>read_value(fmt: INT_FORMATS_TYPE) -&gt; int\n</code></pre><pre><code>read_value(fmt: FLOAT_FORMATS_TYPE) -&gt; float\n</code></pre><pre><code>read_value(fmt: Literal[BOOL]) -&gt; bool\n</code></pre><pre><code>read_value(fmt: Literal[CHAR]) -&gt; str\n</code></pre> <pre><code>read_value(fmt: StructFormat) -&gt; object\n</code></pre> <p>Read a value into given struct format in big-endian mode.</p> <p>The amount of bytes to read will be determined based on the struct format automatically.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader.read_varint","title":"mcproto.protocol.base_io.BaseSyncReader.read_varint","text":"<pre><code>read_varint() -&gt; int\n</code></pre> <p>Read a 32-bit signed integer in a variable length format.</p> <p>For more information about variable length format check <code>_read_varuint</code>.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncReader.read_varlong","title":"mcproto.protocol.base_io.BaseSyncReader.read_varlong","text":"<pre><code>read_varlong() -&gt; int\n</code></pre> <p>Read a 64-bit signed integer in a variable length format.</p> <p>For more information about variable length format check <code>_read_varuint</code>.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter","title":"mcproto.protocol.base_io.BaseSyncWriter","text":"<p>               Bases: <code>ABC</code></p> <p>Base class holding synchronous write buffer/connection interactions.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter._write_varuint","title":"mcproto.protocol.base_io.BaseSyncWriter._write_varuint","text":"<pre><code>_write_varuint(value: int, /, *, max_bits: int | None = None) -&gt; None\n</code></pre> <p>Write an arbitrarily big unsigned integer in a variable length format.</p> <p>This is a standard way of transmitting ints, and it allows smaller numbers to take less bytes.</p> <p>Writing will be limited up to integer values of <code>max_bits</code> bits, and trying to write bigger values will raise a <code>ValueError</code>. Note that setting <code>max_bits</code> to for example 32 bits doesn't mean that at most 4 bytes will be sent, in this case it would actually take at most 5 bytes, due to the variable encoding overhead.</p> <p>Varints send bytes where 7 least significant bits are value bits, and the most significant bit is continuation flag bit. If this continuation bit is set (1), it indicates that there will be another varint byte sent after this one. The least significant group is written first, followed by each of the more significant groups, making varints little-endian, however in groups of 7 bits, not 8.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter.write","title":"mcproto.protocol.base_io.BaseSyncWriter.write  <code>abstractmethod</code>","text":"<pre><code>write(data: bytes | bytearray) -&gt; None\n</code></pre> <p>Underlying write method, sending/storing the data.</p> <p>All of the writer functions will eventually call this method.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter.write_ascii","title":"mcproto.protocol.base_io.BaseSyncWriter.write_ascii","text":"<pre><code>write_ascii(value: str) -&gt; None\n</code></pre> <p>Write ISO-8859-1 encoded string, with NULL (0x00) at the end to indicate string end.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter.write_bytearray","title":"mcproto.protocol.base_io.BaseSyncWriter.write_bytearray","text":"<pre><code>write_bytearray(data: bytes | bytearray) -&gt; None\n</code></pre> <p>Write an arbitrary sequence of bytes, prefixed with a varint of it's size.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter.write_optional","title":"mcproto.protocol.base_io.BaseSyncWriter.write_optional","text":"<pre><code>write_optional(value: T | None, /, writer: Callable[[T], R]) -&gt; R | None\n</code></pre> <p>Write a bool showing if a <code>value</code> is present, if so, also writes this value with <code>writer</code> function.</p> <ul> <li>When <code>value</code> is <code>None</code>, a bool of <code>False</code> will be written, and <code>None</code> is returned.</li> <li>When <code>value</code> is not <code>None</code>, a bool of <code>True</code> is written, after which the <code>writer</code> function is called,   and the return value is forwarded.</li> </ul>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter.write_utf","title":"mcproto.protocol.base_io.BaseSyncWriter.write_utf","text":"<pre><code>write_utf(value: str) -&gt; None\n</code></pre> <p>Write a UTF-8 encoded string, prefixed with a varint of it's size (in bytes).</p> <p>The maximum amount of UTF-8 characters is limited to 32767.</p> <p>Individual UTF-8 characters can take up to 4 bytes, however most of the common ones take up less. Assuming the worst case of 4 bytes per every character, at most 131068 data bytes will be written + 3 additional bytes from the varint encoding overhead.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the given string <code>value</code> has more characters than the allowed maximum (32767).</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter.write_value","title":"mcproto.protocol.base_io.BaseSyncWriter.write_value","text":"<pre><code>write_value(fmt: INT_FORMATS_TYPE, value: int) -&gt; None\n</code></pre><pre><code>write_value(fmt: FLOAT_FORMATS_TYPE, value: float) -&gt; None\n</code></pre><pre><code>write_value(fmt: Literal[BOOL], value: bool) -&gt; None\n</code></pre><pre><code>write_value(fmt: Literal[CHAR], value: str) -&gt; None\n</code></pre> <pre><code>write_value(fmt: StructFormat, value: object) -&gt; None\n</code></pre> <p>Write a given <code>value</code> as given struct format (<code>fmt</code>) in big-endian mode.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter.write_varint","title":"mcproto.protocol.base_io.BaseSyncWriter.write_varint","text":"<pre><code>write_varint(value: int) -&gt; None\n</code></pre> <p>Write a 32-bit signed integer in a variable length format.</p> <p>For more information about variable length format check <code>_write_varuint</code>.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.BaseSyncWriter.write_varlong","title":"mcproto.protocol.base_io.BaseSyncWriter.write_varlong","text":"<pre><code>write_varlong(value: int) -&gt; None\n</code></pre> <p>Write a 64-bit signed integer in a variable length format.</p> <p>For more information about variable length format check <code>_write_varuint</code>.</p>"},{"location":"reference/protocol/#mcproto.protocol.base_io.StructFormat","title":"mcproto.protocol.base_io.StructFormat","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>All possible write/read struct types.</p> See Also <p><code>struct</code> module documentation.</p>"},{"location":"reference/protocol/#mcproto.buffer.Buffer","title":"mcproto.buffer.Buffer","text":"<p>               Bases: <code>BaseSyncWriter</code>, <code>BaseSyncReader</code>, <code>bytearray</code></p> <p>In-memory bytearray-like buffer supporting the common read/write operations.</p>"},{"location":"reference/protocol/#mcproto.buffer.Buffer.remaining","title":"mcproto.buffer.Buffer.remaining  <code>property</code>","text":"<pre><code>remaining: int\n</code></pre> <p>Get the amount of bytes that's still remaining in the buffer to be read.</p>"},{"location":"reference/protocol/#mcproto.buffer.Buffer.clear","title":"mcproto.buffer.Buffer.clear","text":"<pre><code>clear(only_already_read: bool = False) -&gt; None\n</code></pre> <p>Clear out the stored data and reset position.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>When set to <code>True</code>, only the data that was already marked as read will be cleared, and the position will be reset (to start at the remaining data). This can be useful for avoiding needlessly storing large amounts of data in memory, if this data is no longer useful.</p> <p>Otherwise, if set to <code>False</code>, all of the data is cleared, and the position is reset, essentially resulting in a blank buffer.</p> <code>False</code>"},{"location":"reference/protocol/#mcproto.buffer.Buffer.clear(only_already_read)","title":"<code>only_already_read</code>","text":""},{"location":"reference/protocol/#mcproto.buffer.Buffer.flush","title":"mcproto.buffer.Buffer.flush","text":"<pre><code>flush() -&gt; bytes\n</code></pre> <p>Read all of the remaining data in the buffer and clear it out.</p>"},{"location":"reference/protocol/#mcproto.buffer.Buffer.read","title":"mcproto.buffer.Buffer.read","text":"<pre><code>read(length: int) -&gt; bytes\n</code></pre> <p>Read data stored in the buffer.</p> <p>Reading data doesn't remove that data, rather that data is treated as already read, and next read will start from the first unread byte. If freeing the data is necessary, check the <code>clear</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>Amount of bytes to be read.</p> <p>If the requested amount can't be read (buffer doesn't contain that much data/buffer doesn't contain any data), an <code>IOError</code> will be reaised.</p> <p>If there were some data in the buffer, but it was less than requested, this remaining data will still be depleted and the partial data that was read will be a part of the error message in the <code>IOError</code>. This behavior is here to mimic reading from a real socket connection.</p> required"},{"location":"reference/protocol/#mcproto.buffer.Buffer.read(length)","title":"<code>length</code>","text":""},{"location":"reference/protocol/#mcproto.buffer.Buffer.reset","title":"mcproto.buffer.Buffer.reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the position in the buffer.</p> <p>Since the buffer doesn't automatically clear the already read data, it is possible to simply reset the position and read the data it contains again.</p>"},{"location":"reference/protocol/#mcproto.buffer.Buffer.write","title":"mcproto.buffer.Buffer.write","text":"<pre><code>write(data: bytes | bytearray) -&gt; None\n</code></pre> <p>Write/Store given <code>data</code> into the buffer.</p>"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection","title":"mcproto.connection.AsyncConnection","text":"<p>               Bases: <code>BaseAsyncReader</code>, <code>BaseAsyncWriter</code>, <code>ABC</code></p> <p>Base class for all classes handling asynchronous connections.</p>"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection._close","title":"mcproto.connection.AsyncConnection._close  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>_close() -&gt; None\n</code></pre> <p>Close the underlying connection.</p>"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection._read","title":"mcproto.connection.AsyncConnection._read  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>_read(length: int) -&gt; bytes\n</code></pre> <p>Receive raw data from this specific connection.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>Amount of bytes to be received. If the requested amount can't be received (server didn't send that much data/server didn't send any data), an <code>IOError</code> will be raised.</p> required"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection._read(length)","title":"<code>length</code>","text":""},{"location":"reference/protocol/#mcproto.connection.AsyncConnection._write","title":"mcproto.connection.AsyncConnection._write  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>_write(data: bytes) -&gt; None\n</code></pre> <p>Send raw <code>data</code> through this specific connection.</p>"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.close","title":"mcproto.connection.AsyncConnection.close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the connection (it cannot be used after this).</p>"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.enable_encryption","title":"mcproto.connection.AsyncConnection.enable_encryption","text":"<pre><code>enable_encryption(shared_secret: bytes) -&gt; None\n</code></pre> <p>Enable encryption for this connection, using the <code>shared_secret</code>.</p> <p>After calling this method, the reading and writing process for this connection will be altered, and any future communication will be encrypted/decrypted there.</p> <p>You will need to call this method after sending the <code>LoginEncryptionResponse</code> packet.</p> <p>Parameters:</p> Name Type Description Default <code>bytes</code> <p>This is the cipher key for the AES symetric cipher used for the encryption.</p> <p>See <code>generate_shared_secret</code>.</p> required"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.enable_encryption(shared_secret)","title":"<code>shared_secret</code>","text":""},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.make_client","title":"mcproto.connection.AsyncConnection.make_client  <code>abstractmethod</code> <code>async</code> <code>classmethod</code>","text":"<pre><code>make_client(address: tuple[str, int], timeout: float) -&gt; Self\n</code></pre> <p>Construct a client connection (Client -&gt; Server) to given server <code>address</code>.</p> <p>Parameters:</p> Name Type Description Default <code>tuple[str, int]</code> <p>Address of the server to connection to.</p> required <code>float</code> <p>Amount of seconds to wait for the connection to be established.</p> <p>If a connection can't be established within this time, <code>TimeoutError</code> will be raised.</p> <p>This timeout is then also used for any further data receiving.</p> required"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.make_client(address)","title":"<code>address</code>","text":""},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.make_client(timeout)","title":"<code>timeout</code>","text":""},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.read","title":"mcproto.connection.AsyncConnection.read  <code>async</code>","text":"<pre><code>read(length: int) -&gt; bytes\n</code></pre> <p>Receive data sent through the connection.</p> <p>Depending on <code>encryption_enabled</code> flag (set from <code>enable_encryption</code>), this might also perform a decryption of the received data.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>Amount of bytes to be received. If the requested amount can't be received (server didn't send that much data/server didn't send any data), an <code>IOError</code> will be raised.</p> required"},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.read(length)","title":"<code>length</code>","text":""},{"location":"reference/protocol/#mcproto.connection.AsyncConnection.write","title":"mcproto.connection.AsyncConnection.write  <code>async</code>","text":"<pre><code>write(data: bytes | bytearray) -&gt; None\n</code></pre> <p>Send given <code>data</code> over the connection.</p> <p>Depending on <code>encryption_enabled</code> flag (set from <code>enable_encryption</code>), this might also perform an encryption of the input data.</p>"},{"location":"reference/protocol/#mcproto.connection.SyncConnection","title":"mcproto.connection.SyncConnection","text":"<p>               Bases: <code>BaseSyncReader</code>, <code>BaseSyncWriter</code>, <code>ABC</code></p> <p>Base class for all classes handling synchronous connections.</p>"},{"location":"reference/protocol/#mcproto.connection.SyncConnection._close","title":"mcproto.connection.SyncConnection._close  <code>abstractmethod</code>","text":"<pre><code>_close() -&gt; None\n</code></pre> <p>Close the underlying connection.</p>"},{"location":"reference/protocol/#mcproto.connection.SyncConnection._read","title":"mcproto.connection.SyncConnection._read  <code>abstractmethod</code>","text":"<pre><code>_read(length: int) -&gt; bytes\n</code></pre> <p>Receive raw data from this specific connection.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>Amount of bytes to be received. If the requested amount can't be received (server didn't send that much data/server didn't send any data), an <code>IOError</code> will be raised.</p> required"},{"location":"reference/protocol/#mcproto.connection.SyncConnection._read(length)","title":"<code>length</code>","text":""},{"location":"reference/protocol/#mcproto.connection.SyncConnection._write","title":"mcproto.connection.SyncConnection._write  <code>abstractmethod</code>","text":"<pre><code>_write(data: bytes) -&gt; None\n</code></pre> <p>Send raw <code>data</code> through this specific connection.</p>"},{"location":"reference/protocol/#mcproto.connection.SyncConnection.close","title":"mcproto.connection.SyncConnection.close","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the connection (it cannot be used after this).</p>"},{"location":"reference/protocol/#mcproto.connection.SyncConnection.enable_encryption","title":"mcproto.connection.SyncConnection.enable_encryption","text":"<pre><code>enable_encryption(shared_secret: bytes) -&gt; None\n</code></pre> <p>Enable encryption for this connection, using the <code>shared_secret</code>.</p> <p>After calling this method, the reading and writing process for this connection will be altered, and any future communication will be encrypted/decrypted there.</p> <p>You will need to call this method after sending the <code>LoginEncryptionResponse</code> packet.</p> <p>Parameters:</p> Name Type Description Default <code>bytes</code> <p>This is the cipher key for the AES symetric cipher used for the encryption.</p> <p>See <code>generate_shared_secret</code>.</p> required"},{"location":"reference/protocol/#mcproto.connection.SyncConnection.enable_encryption(shared_secret)","title":"<code>shared_secret</code>","text":""},{"location":"reference/protocol/#mcproto.connection.SyncConnection.make_client","title":"mcproto.connection.SyncConnection.make_client  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>make_client(address: tuple[str, int], timeout: float) -&gt; Self\n</code></pre> <p>Construct a client connection (Client -&gt; Server) to given server <code>address</code>.</p> <p>Parameters:</p> Name Type Description Default <code>tuple[str, int]</code> <p>Address of the server to connection to.</p> required <code>float</code> <p>Amount of seconds to wait for the connection to be established.</p> <p>If a connection can't be established within this time, <code>TimeoutError</code> will be raised.</p> <p>This timeout is then also used for any further data receiving.</p> required"},{"location":"reference/protocol/#mcproto.connection.SyncConnection.make_client(address)","title":"<code>address</code>","text":""},{"location":"reference/protocol/#mcproto.connection.SyncConnection.make_client(timeout)","title":"<code>timeout</code>","text":""},{"location":"reference/protocol/#mcproto.connection.SyncConnection.read","title":"mcproto.connection.SyncConnection.read","text":"<pre><code>read(length: int) -&gt; bytes\n</code></pre> <p>Receive data sent through the connection.</p> <p>Depending on <code>encryption_enabled</code> flag (set from <code>enable_encryption</code>), this might also perform a decryption of the received data.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>Amount of bytes to be received. If the requested amount can't be received (server didn't send that much data/server didn't send any data), an <code>IOError</code> will be raised.</p> required"},{"location":"reference/protocol/#mcproto.connection.SyncConnection.read(length)","title":"<code>length</code>","text":""},{"location":"reference/protocol/#mcproto.connection.SyncConnection.write","title":"mcproto.connection.SyncConnection.write","text":"<pre><code>write(data: bytes | bytearray) -&gt; None\n</code></pre> <p>Send given <code>data</code> over the connection.</p> <p>Depending on <code>encryption_enabled</code> flag (set from <code>enable_encryption</code>), this might also perform an encryption of the input data.</p>"},{"location":"reference/protocol/#mcproto.connection.TCPAsyncConnection","title":"mcproto.connection.TCPAsyncConnection","text":"<p>               Bases: <code>AsyncConnection</code>, <code>Generic[T_STREAMREADER, T_STREAMWRITER]</code></p> <p>Asynchronous TCP connection using <code>StreamWriter</code> and <code>StreamReader</code>.</p>"},{"location":"reference/protocol/#mcproto.connection.TCPAsyncConnection.socket","title":"mcproto.connection.TCPAsyncConnection.socket  <code>property</code>","text":"<pre><code>socket: socket\n</code></pre> <p>Obtain the underlying socket behind the <code>Transport</code>.</p>"},{"location":"reference/protocol/#mcproto.connection.TCPSyncConnection","title":"mcproto.connection.TCPSyncConnection","text":"<p>               Bases: <code>SyncConnection</code>, <code>Generic[T_SOCK]</code></p> <p>Synchronous connection using a TCP <code>socket</code>.</p>"},{"location":"reference/protocol/#mcproto.connection.UDPAsyncConnection","title":"mcproto.connection.UDPAsyncConnection","text":"<p>               Bases: <code>AsyncConnection</code>, <code>Generic[T_DATAGRAM_CLIENT]</code></p> <p>Asynchronous UDP connection using <code>asyncio_dgram.DatagramClient</code>.</p>"},{"location":"reference/protocol/#mcproto.connection.UDPSyncConnection","title":"mcproto.connection.UDPSyncConnection","text":"<p>               Bases: <code>SyncConnection</code>, <code>Generic[T_SOCK]</code></p> <p>Synchronous connection using a UDP <code>socket</code>.</p>"},{"location":"reference/types/","title":"Types","text":""},{"location":"reference/types/#mcproto.types.abc","title":"mcproto.types.abc","text":""},{"location":"reference/types/#mcproto.types.abc.MCType","title":"mcproto.types.abc.MCType","text":"<p>               Bases: <code>Serializable</code>, <code>ABC</code></p> <p>Base class for a minecraft type structure.</p>"},{"location":"reference/types/#mcproto.types.chat","title":"mcproto.types.chat","text":""},{"location":"reference/types/#mcproto.types.chat.ChatMessage","title":"mcproto.types.chat.ChatMessage","text":"<p>               Bases: <code>MCType</code></p> <p>Minecraft chat message representation.</p>"},{"location":"reference/types/#mcproto.types.chat.ChatMessage.__eq__","title":"mcproto.types.chat.ChatMessage.__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Check equality between two chat messages.</p> Warning <p>This is purely using the <code>raw</code> field, which means it's possible that a chat message that appears the same, but was representing in a different way will fail this equality check.</p>"},{"location":"reference/types/#mcproto.types.chat.ChatMessage.as_dict","title":"mcproto.types.chat.ChatMessage.as_dict","text":"<pre><code>as_dict() -&gt; RawChatMessageDict\n</code></pre> <p>Convert received <code>raw</code> into a standard <code>dict</code> form.</p>"},{"location":"reference/types/#mcproto.types.chat.RawChatMessageDict","title":"mcproto.types.chat.RawChatMessageDict","text":"<p>               Bases: <code>TypedDict</code></p> <p>Dictionary structure of JSON chat messages when serialized.</p>"},{"location":"reference/types/#mcproto.types.nbt","title":"mcproto.types.nbt","text":""},{"location":"reference/types/#mcproto.types.nbt.FromObjectSchema","title":"mcproto.types.nbt.FromObjectSchema  <code>module-attribute</code>","text":"<pre><code>FromObjectSchema: TypeAlias = Union['type[NBTag]', 'type[NBTagConvertible]', 'Sequence[FromObjectSchema]', 'Mapping[str, FromObjectSchema]']\n</code></pre> <p>Represents the type of a schema, used to define how an object should be converted to an NBT tag(s).</p>"},{"location":"reference/types/#mcproto.types.nbt.FromObjectType","title":"mcproto.types.nbt.FromObjectType  <code>module-attribute</code>","text":"<pre><code>FromObjectType: TypeAlias = Union[int, float, bytes, str, 'NBTagConvertible', 'Sequence[FromObjectType]', 'Mapping[str, FromObjectType]']\n</code></pre> <p>Represents any object holding some data that can be converted to an NBT tag(s).</p>"},{"location":"reference/types/#mcproto.types.nbt.PayloadType","title":"mcproto.types.nbt.PayloadType  <code>module-attribute</code>","text":"<pre><code>PayloadType: TypeAlias = Union[int, float, bytes, str, 'NBTag', 'Sequence[PayloadType]', 'Mapping[str, PayloadType]']\n</code></pre> <p>Represents the type of a payload that can be stored in an NBT tag.</p>"},{"location":"reference/types/#mcproto.types.nbt.__all__","title":"mcproto.types.nbt.__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = ['ByteArrayNBT', 'ByteNBT', 'CompoundNBT', 'DoubleNBT', 'EndNBT', 'FloatNBT', 'IntArrayNBT', 'IntNBT', 'ListNBT', 'LongArrayNBT', 'LongNBT', 'NBTag', 'NBTagConvertible', 'NBTagType', 'ShortNBT', 'StringNBT']\n</code></pre> <p>Implementation of the NBT (Named Binary Tag) format used in Minecraft as described in the NBT specification</p> <p>Source: Minecraft NBT Spec Named Binary Tag specification</p> <p>NBT (Named Binary Tag) is a tag based binary format designed to carry large amounts of binary data with smaller amounts of additional data. An NBT file consists of a single GZIPped Named Tag of type TAG_Compound.</p> <p>A Named Tag has the following format:</p> <pre><code>byte tagType\nTAG_String name\n\\[payload\\]\n</code></pre> <ul> <li>The tagType is a single byte defining the contents of the payload of the tag.</li> <li>The name is a descriptive name, and can be anything (eg \"cat\", \"banana\", \"Hello World!\").   The purpose for this name is to name tags so parsing is easier and can be made to only look for certain recognized   tag names. Exception: If tagType is TAG_End, the name is skipped and assumed to be \"\".</li> <li>The [payload] varies by tagType.</li> </ul> <p>Note that ONLY Named Tags carry the name and tagType data. Explicitly identified Tags (such as TAG_String) only contains the payload.</p>"},{"location":"reference/types/#mcproto.types.nbt.ByteArrayNBT","title":"mcproto.types.nbt.ByteArrayNBT","text":"<p>               Bases: <code>NBTag</code></p> <p>NBT tag representing an array of bytes. The length of the array is stored as a signed 32-bit integer.</p>"},{"location":"reference/types/#mcproto.types.nbt.ByteArrayNBT.__bytes__","title":"mcproto.types.nbt.ByteArrayNBT.__bytes__","text":"<pre><code>__bytes__() -&gt; bytes\n</code></pre> <p>Get the bytes value of the ByteArrayNBT tag.</p>"},{"location":"reference/types/#mcproto.types.nbt.ByteNBT","title":"mcproto.types.nbt.ByteNBT","text":"<p>               Bases: <code>_NumberNBTag</code></p> <p>NBT tag representing a single byte value, represented as a signed 8-bit integer.</p>"},{"location":"reference/types/#mcproto.types.nbt.CompoundNBT","title":"mcproto.types.nbt.CompoundNBT","text":"<p>               Bases: <code>NBTag</code></p> <p>NBT tag representing a compound of named tags.</p>"},{"location":"reference/types/#mcproto.types.nbt.CompoundNBT.__eq__","title":"mcproto.types.nbt.CompoundNBT.__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Check equality between two CompoundNBT tags.</p> <p>Parameters:</p> Name Type Description Default <code>object</code> <p>The other CompoundNBT tag to compare to.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the tags are equal, False otherwise.</p> Note <p>The order of the tags is not guaranteed, but the names of the tags must match. This function assumes that there are no duplicate tags in the compound.</p>"},{"location":"reference/types/#mcproto.types.nbt.CompoundNBT.__eq__(other)","title":"<code>other</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.CompoundNBT.__iter__","title":"mcproto.types.nbt.CompoundNBT.__iter__","text":"<pre><code>__iter__()\n</code></pre> <p>Iterate over the tags in the compound.</p>"},{"location":"reference/types/#mcproto.types.nbt.DoubleNBT","title":"mcproto.types.nbt.DoubleNBT","text":"<p>               Bases: <code>_FloatingNBTag</code></p> <p>NBT tag representing a double-precision floating-point value, represented as a 64-bit IEEE 754-2008 binary64.</p>"},{"location":"reference/types/#mcproto.types.nbt.EndNBT","title":"mcproto.types.nbt.EndNBT","text":"<p>               Bases: <code>NBTag</code></p> <p>Sentinel tag used to mark the end of a TAG_Compound.</p>"},{"location":"reference/types/#mcproto.types.nbt.FloatNBT","title":"mcproto.types.nbt.FloatNBT","text":"<p>               Bases: <code>_FloatingNBTag</code></p> <p>NBT tag representing a floating-point value, represented as a 32-bit IEEE 754-2008 binary32 value.</p>"},{"location":"reference/types/#mcproto.types.nbt.IntArrayNBT","title":"mcproto.types.nbt.IntArrayNBT","text":"<p>               Bases: <code>_NumberArrayNBTag</code></p> <p>NBT tag representing an array of integers. The length of the array is stored as a signed 32-bit integer.</p>"},{"location":"reference/types/#mcproto.types.nbt.IntNBT","title":"mcproto.types.nbt.IntNBT","text":"<p>               Bases: <code>_NumberNBTag</code></p> <p>NBT tag representing an integer value, represented as a signed 32-bit integer.</p>"},{"location":"reference/types/#mcproto.types.nbt.ListNBT","title":"mcproto.types.nbt.ListNBT","text":"<p>               Bases: <code>NBTag</code></p> <p>NBT tag representing a list of tags. All tags in the list must be of the same type.</p>"},{"location":"reference/types/#mcproto.types.nbt.ListNBT.__iter__","title":"mcproto.types.nbt.ListNBT.__iter__","text":"<pre><code>__iter__() -&gt; Iterator[NBTag]\n</code></pre> <p>Iterate over the tags in the list.</p>"},{"location":"reference/types/#mcproto.types.nbt.LongArrayNBT","title":"mcproto.types.nbt.LongArrayNBT","text":"<p>               Bases: <code>_NumberArrayNBTag</code></p> <p>NBT tag representing an array of longs. The length of the array is stored as a signed 32-bit integer.</p>"},{"location":"reference/types/#mcproto.types.nbt.LongNBT","title":"mcproto.types.nbt.LongNBT","text":"<p>               Bases: <code>_NumberNBTag</code></p> <p>NBT tag representing a long value, represented as a signed 64-bit integer.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag","title":"mcproto.types.nbt.NBTag","text":"<p>               Bases: <code>MCType</code>, <code>NBTagConvertible</code>, <code>ABC</code></p> <p>Base class for NBT tags.</p> <p>In MC v1.20.2+ the type and name of the root tag is not written to the buffer, and unless specified, the type of the tag is assumed to be TAG_Compound.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag.value","title":"mcproto.types.nbt.NBTag.value  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>value: PayloadType\n</code></pre> <p>Get the payload of the NBT tag in a python-friendly format.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag._read_header","title":"mcproto.types.nbt.NBTag._read_header  <code>classmethod</code>","text":"<pre><code>_read_header(buf: Buffer, read_type: bool = True, with_name: bool = True) -&gt; tuple[str, NBTagType]\n</code></pre> <p>Read the header of the NBT tag.</p> <p>Parameters:</p> Name Type Description Default <code>Buffer</code> <p>The buffer to read from.</p> required <code>bool</code> <p>Whether to read the type of the tag from the buffer.</p> <ul> <li>If <code>True</code>, the tag type will be read from the buffer</li> <li>If <code>False</code> and called from a subclass, the tag type will be inferred from the subclass.</li> <li>If <code>False</code> and called from the base class, the tag type will be TAG_Compound.</li> </ul> <code>True</code> <code>bool</code> <p>Whether to read the name of the tag. If set to <code>False</code>, the tag will have the name <code>\"\"</code>.</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[str, NBTagType]</code> <p>A tuple containing the name and the tag type.</p> Note <p>It is possible that this function reads nothing from the buffer if both <code>with_name</code> and <code>read_type</code> are set to <code>False</code>.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag._read_header(buf)","title":"<code>buf</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag._read_header(read_type)","title":"<code>read_type</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag._read_header(with_name)","title":"<code>with_name</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag._write_header","title":"mcproto.types.nbt.NBTag._write_header","text":"<pre><code>_write_header(buf: Buffer, with_type: bool = True, with_name: bool = True) -&gt; None\n</code></pre> <p>Write the header of the NBT tag to the buffer.</p> <p>Parameters:</p> Name Type Description Default <code>Buffer</code> <p>The buffer to write to.</p> required <code>bool</code> <p>Whether to include the type of the tag in the serialization.</p> <code>True</code> <code>bool</code> <p>Whether to include the name of the tag in the serialization.</p> <code>True</code>"},{"location":"reference/types/#mcproto.types.nbt.NBTag._write_header(buf)","title":"<code>buf</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag._write_header(with_type)","title":"<code>with_type</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag._write_header(with_name)","title":"<code>with_name</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.deserialize","title":"mcproto.types.nbt.NBTag.deserialize  <code>classmethod</code>","text":"<pre><code>deserialize(buf: Buffer, with_name: bool = True, with_type: bool = True) -&gt; NBTag\n</code></pre> <p>Deserialize the NBT tag.</p> <p>Parameters:</p> Name Type Description Default <code>Buffer</code> <p>The buffer to read from.</p> required <code>bool</code> <p>Whether to read the name of the tag. (Passed to <code>_read_header</code>)</p> <code>True</code> <code>bool</code> <p>Whether to read the type of the tag. (Passed to <code>_read_header</code>)</p> <code>True</code> <p>Returns:</p> Type Description <code>NBTag</code> <p>The deserialized NBT tag.</p> <code>NBTag</code> <p>This tag will be an instance of the class, that is associated with the tag type</p> <code>NBTag</code> <p>obtained from <code>_read_header</code> (see: [<code>ASSOCIATED_TYPES</code>][mcproto.types.nbt.ASSOCIATED_TYPES]).</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag.deserialize(buf)","title":"<code>buf</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.deserialize(with_name)","title":"<code>with_name</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.deserialize(with_type)","title":"<code>with_type</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.from_object","title":"mcproto.types.nbt.NBTag.from_object  <code>staticmethod</code>","text":"<pre><code>from_object(data: FromObjectType, schema: FromObjectSchema, name: str = '') -&gt; NBTag\n</code></pre> <p>Create an NBT tag from a python object and a schema.</p> <p>Parameters:</p> Name Type Description Default <code>FromObjectType</code> <p>The python object to create the NBT tag from.</p> required <code>FromObjectSchema</code> <p>The schema used to create the NBT tags.</p> <p>This is a description of the types of the <code>data</code> in the python object. It can be a subclass of <code>NBTag</code> (e.g. <code>IntNBT</code>, <code>StringNBT</code>, <code>CompoundNBT</code>, etc.), a <code>dict</code>, a <code>list</code>, a <code>tuple</code>, or any class that has a <code>to_nbt</code> method.</p> <p>Example of schema:</p> <pre><code>```python\nschema = {\n    \"string\": StringNBT,\n    \"list_of_floats\": [FloatNBT],\n    \"list_of_compounds\": [{\n        \"key\": StringNBT,\n        \"value\": IntNBT,\n    }],\n    \"list_of_lists\": [[IntNBT], [StringNBT]],\n}\n```\n\nThis would be translated into a [`CompoundNBT`][mcproto.types.nbt.CompoundNBT].\n</code></pre> required <code>str</code> <p>The name of the NBT tag.</p> <code>''</code> <p>Returns:</p> Type Description <code>NBTag</code> <p>The NBT tag created from the python object.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag.from_object(data)","title":"<code>data</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.from_object(schema)","title":"<code>schema</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.from_object(name)","title":"<code>name</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.read_from","title":"mcproto.types.nbt.NBTag.read_from  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>read_from(buf: Buffer, with_type: bool = True, with_name: bool = True) -&gt; NBTag\n</code></pre> <p>Read the NBT tag from the buffer.</p> <p>Implementation shortcut used in <code>deserialize</code>. (Subclasses can override this, avoiding some repetition when compared to overriding <code>deserialize</code> directly.)</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag.serialize","title":"mcproto.types.nbt.NBTag.serialize","text":"<pre><code>serialize(with_type: bool = True, with_name: bool = True) -&gt; Buffer\n</code></pre> <p>Serialize the NBT tag to a new buffer.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Whether to include the type of the tag in the serialization. (Passed to <code>_write_header</code>)</p> <code>True</code> <code>bool</code> <p>Whether to include the name of the tag in the serialization. (Passed to <code>_write_header</code>)</p> <code>True</code> <p>Returns;     The buffer containing the serialized NBT tag.</p> Note <p>The <code>with_type</code> and <code>with_name</code> parameters only control the first level of serialization.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag.serialize(with_type)","title":"<code>with_type</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.serialize(with_name)","title":"<code>with_name</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.serialize_to","title":"mcproto.types.nbt.NBTag.serialize_to  <code>abstractmethod</code>","text":"<pre><code>serialize_to(buf: Buffer, with_type: bool = True, with_name: bool = True) -&gt; None\n</code></pre> <p>Serialize the NBT tag to a buffer.</p> <p>Parameters:</p> Name Type Description Default <code>Buffer</code> <p>The buffer to write to.</p> required <code>bool</code> <p>Whether to include the type of the tag in the serialization.</p> <code>True</code> <code>bool</code> <p>Whether to include the name of the tag in the serialization.</p> <code>True</code> See Also <p><code>serialize</code></p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag.serialize_to(buf)","title":"<code>buf</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.serialize_to(with_type)","title":"<code>with_type</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.serialize_to(with_name)","title":"<code>with_name</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.to_nbt","title":"mcproto.types.nbt.NBTag.to_nbt","text":"<pre><code>to_nbt(name: str = '') -&gt; NBTag\n</code></pre> <p>Convert the object to an NBT tag.</p> Warning <p>This is already an NBT tag, so it will modify the name of the tag and return itself.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag.to_object","title":"mcproto.types.nbt.NBTag.to_object","text":"<pre><code>to_object(include_schema: bool = False, include_name: bool = False) -&gt; PayloadType | Mapping[str, PayloadType] | tuple[PayloadType | Mapping[str, PayloadType], FromObjectSchema]\n</code></pre> <p>Convert the NBT tag to a python object.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Whether to return a schema describing the types of the original tag.</p> <code>False</code> <code>bool</code> <p>Whether to include the name of the tag in the output.</p> <p>If the tag has no name, the name will be set to <code>\"\"</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>PayloadType | Mapping[str, PayloadType] | tuple[PayloadType | Mapping[str, PayloadType], FromObjectSchema]</code> <p>Either of: * A python object representing the payload of the tag. (default) * A dictionary containing the name associated with a python object representing the payload of the tag. * A tuple which includes one of the above and a schema describing the types of the original tag.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTag.to_object(include_schema)","title":"<code>include_schema</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTag.to_object(include_name)","title":"<code>include_name</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTagConvertible","title":"mcproto.types.nbt.NBTagConvertible","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that can be converted to an NBT tag.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagConvertible.to_nbt","title":"mcproto.types.nbt.NBTagConvertible.to_nbt","text":"<pre><code>to_nbt(name: str = '') -&gt; NBTag\n</code></pre> <p>Convert the object to an NBT tag.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the tag.</p> <code>''</code> <p>Returns:</p> Type Description <code>NBTag</code> <p>The NBT tag created from the object.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagConvertible.to_nbt(name)","title":"<code>name</code>","text":""},{"location":"reference/types/#mcproto.types.nbt.NBTagType","title":"mcproto.types.nbt.NBTagType","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enumeration of the different types of NBT tags.</p> <p>See the documentation of the individual variants for more information.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.BYTE","title":"mcproto.types.nbt.NBTagType.BYTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BYTE = 1\n</code></pre> <p>A single signed byte (8 bits).</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.BYTE_ARRAY","title":"mcproto.types.nbt.NBTagType.BYTE_ARRAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BYTE_ARRAY = 7\n</code></pre> <p>The payload is a TAG_Int representing the length, followed by an array of  bytes."},{"location":"reference/types/#mcproto.types.nbt.NBTagType.COMPOUND","title":"mcproto.types.nbt.NBTagType.COMPOUND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPOUND = 10\n</code></pre> <p>A sequential list of Named Tags. This array keeps going until a TAG_End is found.</p> <ul> <li>If there's a nested TAG_Compound within this tag, that one will also have a TAG_End,   so simply reading until the next TAG_End will not work.</li> <li>The names of the named tags have to be unique within each TAG_Compound.</li> <li>The order of the tags is not guaranteed.</li> </ul>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.DOUBLE","title":"mcproto.types.nbt.NBTagType.DOUBLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOUBLE = 6\n</code></pre> <p>A floating point value (64 bits, big endian, IEEE 754-2008, binary64).</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.END","title":"mcproto.types.nbt.NBTagType.END  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>END = 0\n</code></pre> <p>This tag is used to mark the end of a list. It doesn't carry any payload, and it cannot be named!</p> <p>If this type appears where a Named Tag is expected, the name is assumed to be <code>\"\"</code>. (In other words, this Tag is always just a single <code>0x00</code> byte when named, and nothing in all other cases)</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.FLOAT","title":"mcproto.types.nbt.NBTagType.FLOAT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FLOAT = 5\n</code></pre> <p>A floating point value (32 bits, big endian, IEEE 754-2008, binary32).</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.INT","title":"mcproto.types.nbt.NBTagType.INT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INT = 3\n</code></pre> <p>A signed integer (32 bits, big endian).</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.INT_ARRAY","title":"mcproto.types.nbt.NBTagType.INT_ARRAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INT_ARRAY = 11\n</code></pre> <p>The payload is a TAG_Int representing the length, followed by an array of  TAG_Int elements."},{"location":"reference/types/#mcproto.types.nbt.NBTagType.LIST","title":"mcproto.types.nbt.NBTagType.LIST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIST = 9\n</code></pre> <p>The payload is a TAG_Byte representing the type of the items in the list, followed by a TAG_Int representing the length of the list, followed by an array of  NBTags. <p>All the tags in the list must be of the same type.</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.LONG","title":"mcproto.types.nbt.NBTagType.LONG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LONG = 4\n</code></pre> <p>A signed long (64 bits, big endian).</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.LONG_ARRAY","title":"mcproto.types.nbt.NBTagType.LONG_ARRAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LONG_ARRAY = 12\n</code></pre> <p>The payload is a TAG_Int representing the length, followed by an array of  TAG_Long elements."},{"location":"reference/types/#mcproto.types.nbt.NBTagType.SHORT","title":"mcproto.types.nbt.NBTagType.SHORT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SHORT = 2\n</code></pre> <p>A signed short (16 bits, big endian).</p>"},{"location":"reference/types/#mcproto.types.nbt.NBTagType.STRING","title":"mcproto.types.nbt.NBTagType.STRING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STRING = 8\n</code></pre> <p>The payload is a TAG_Short representing the length, followed by an array of  bytes, holding a string in UTF-8 format."},{"location":"reference/types/#mcproto.types.nbt.ShortNBT","title":"mcproto.types.nbt.ShortNBT","text":"<p>               Bases: <code>_NumberNBTag</code></p> <p>NBT tag representing a short value, represented as a signed 16-bit integer.</p>"},{"location":"reference/types/#mcproto.types.nbt.StringNBT","title":"mcproto.types.nbt.StringNBT","text":"<p>               Bases: <code>NBTag</code></p> <p>NBT tag representing an UTF-8 string value. The length of the string is stored as a signed 16-bit integer.</p>"},{"location":"reference/types/#mcproto.types.nbt._FloatingNBTag","title":"mcproto.types.nbt._FloatingNBTag","text":"<p>               Bases: <code>NBTag</code>, <code>RequiredParamsABCMixin</code></p> <p>Base class for NBT tags representing a floating-point number.</p>"},{"location":"reference/types/#mcproto.types.nbt._NumberArrayNBTag","title":"mcproto.types.nbt._NumberArrayNBTag","text":"<p>               Bases: <code>NBTag</code>, <code>RequiredParamsABCMixin</code></p> <p>Base class for NBT tags representing an array of numbers.</p>"},{"location":"reference/types/#mcproto.types.nbt._NumberNBTag","title":"mcproto.types.nbt._NumberNBTag","text":"<p>               Bases: <code>NBTag</code>, <code>RequiredParamsABCMixin</code></p> <p>Base class for NBT tags representing a number.</p> <p>This class is not meant to be used directly, but rather through its subclasses.</p>"},{"location":"reference/types/#mcproto.types.nbt._get_tag_type","title":"mcproto.types.nbt._get_tag_type","text":"<pre><code>_get_tag_type(tag: NBTag | type[NBTag]) -&gt; NBTagType\n</code></pre> <p>Get the tag type of an NBTag object or class.</p>"},{"location":"reference/types/#mcproto.types.uuid","title":"mcproto.types.uuid","text":""},{"location":"reference/types/#mcproto.types.uuid.UUID","title":"mcproto.types.uuid.UUID","text":"<p>               Bases: <code>UUID</code>, <code>MCType</code></p> <p>Minecraft UUID type.</p> <p>In order to support potential future changes in protocol version, and implement <code>MCType</code>, this is a custom subclass, however it is currently compatible with the stdlib's <code>UUID</code>.</p>"},{"location":"usage/","title":"Usage","text":"<p>This part of the documentation contains various guides and explanations on how to use the different parts of mcproto.</p> <p>Work In Progress</p> <p>This category is still being written. Many pages are missing.</p> <p>Didn't find what you were looking for?</p> <p>If you were looking for a guide on something, but you didn't find it documented here and you feel like it's something that others would benefit from seeing too, you can create a github issue and ask us to write one.</p>"},{"location":"usage/authentication/","title":"Minecraft account authentication","text":"<p>Mcproto has first party support to handle authentication, allowing you to use your own minecraft account. This is needed if you wish to login to \"online mode\" (non-warez) servers as a client (player).</p>"},{"location":"usage/authentication/#microsoft-migrated-accounts","title":"Microsoft (migrated) accounts","text":"<p>This is how authentication works for already migrated minecraft accounts, using Microsoft accounts for authentication. (This will be most accounts. Any newly created minecraft accounts - after 2021 will always be Microsoft linked accounts.)</p>"},{"location":"usage/authentication/#creating-azure-application","title":"Creating Azure application","text":"<p>To authenticate with a microsoft account, you will need to go through the entire OAuth2 flow. Mcproto has functions to hide pretty much all of this away, however you will need to create a new Microsoft Azure application, that mcproto will use to obtain an access token.</p> <p>We know this is annoying, but it's a necessary step, as Microsoft only allows these applications to request OAuth2 authentication, and to avoid potential abuse, we can't really just use our registered application (like with say MultiMC), as this token would have to be embedded into our source-code, and since this is python, that would mean just including it here in plain text, and because mcproto is a low level library that can be used for any kind of interactions, we can't trust that you won't abuse this token.</p> <p>Instead, everyone using mcproto should register a new application, and get their own MSA token for your application that uses mcproto in the back.</p> <p>To create a new application, follow these steps (this is a simplified guide, for a full guide, feel free to check the Microsoft documentation):</p> <ol> <li>Go to the Azure portal and log in (create an account if you need to).</li> <li>Search for and select Azure Active Directory.</li> <li>On the left navbar, under Manage section, click on App registrations.</li> <li>Click on New registration on top navbar.</li> <li>Pick a name for the application. Anyone using your app to authenticate will see this name.</li> <li>Choose Personal Microsoft accounts only from the Supported account types.</li> <li>Leave the Redirect URI (optional) empty.</li> <li>Click on Register.</li> </ol> <p>From there, you will need to enable this application to be used for OAuth2 flows. To do that, follow these steps:</p> <ol> <li>On the left navbar, under Manage section, click on Authentication.</li> <li>Set Allow public content flows to Yes.</li> <li>Click Save.</li> </ol> <p>After that, you can go back to the app (click Overview from the left navbar), and you'll want to copy the Application (client) ID. This is the ID you will need to pass to mcproto. (You will also need the Display name, and the Directory (Tenant) ID for [Registering the application with Minecraft] - first time only)</p> <p>If you ever need to access this application again, follow these steps (as Microsoft Azure is pretty unintuitive, we document this too):</p> <ol> <li>Go to the Azure portal and log in.</li> <li>Click on Azure Active Directory (if you can't find it on the main page, you can use the search).</li> <li>On the left navbar, under Manage section, click on App registrations.</li> <li>Click on View all applications from personal account (assuming you registered the app from a personal account).</li> <li>Click on your app.</li> </ol>"},{"location":"usage/authentication/#registering-the-application-with-minecraft","title":"Registering the application with Minecraft","text":"<p>Previously, this step wasn't required, however due to people maliciously creating these applications to steal accounts, Mojang have recently started to limit access to the https://api.minecraftservices.com, and only allow explicitly white listed Client IDs to use this API.</p> <p>This API is absolutely crucial step in getting the final minecraft token, and so you will need to register your Client ID to be white listed by Mojang. Thankfully, it looks like Mojang is generally pretty lenient and at least for me, they didn't cause any unnecessary hassles when I asked for my application to be registered, for development purposes and work on mcproto.</p> <p>That said, you will need to wait a while (about a week, though it could be more), until Mojang reviews your application and approves it. There isn't much we can do about this.</p> <p>To get your Azure application registered, you will need to fill out a simple form, where you accept the EULA, provide your E-Mail, Application name, Application Client ID and Tennant ID.</p> <p>More annoyingly you will additionally also need to provide an associated website or domain for your project/brand. (This application is generally designed for more user-facing programs, such as full launchers. When registering mcproto, I just used the GitHub URL). Lastly, you'll want to describe why you need access to this API in the Justification section.</p> <p>Visit the Mojang article describing this process. There is also a link to the form to fill out.</p>"},{"location":"usage/authentication/#the-code","title":"The code","text":"<p>Finally, after you've managed to register your application and get it approved by Mojang, you can use it with mcproto, go through the Microsoft OAuth2 flow and authorize this application to access your Microsoft account, which mcproto will then use to get the minecraft token you'll then need to login to online servers.</p> <pre><code>import httpx\nfrom mcproto.auth.microsoft.oauth import full_microsoft_oauth\nfrom mcproto.auth.microsoft.xbox import xbox_auth\nfrom mcproto.auth.msa import MSAAccount\n\nMY_MSA_CLIENT_ID = \"[REDACTED]\"  # Paste your own Client ID here\n\nasync def authenticate() -&gt; MSAAccount:\n    async with httpx.AsyncClient() as client:\n        microsoft_token = await full_microsoft_oauth(client, MY_MSA_CLIENT_ID)\n        user_hash, xsts_token = xbox_auth(client, microsoft_token)\n        return MSAAccount.xbox_auth(cilent, user_hash, xsts_token)\n</code></pre> <p>Note that the <code>full_microsoft_oauth</code> function will print a message containing the URL you should visit in your browser, and a one time code to type in once you reach this URL. That will then prompt you to log in to your Microsoft account, and then allow you to authorize the application to use your account.</p>"},{"location":"usage/authentication/#caching","title":"Caching","text":"<p>You will very likely want to set up caching here, and store at least the <code>microsoft_token</code> somewhere, so you don't have to log in each time your code will run. Here's some example code that caches every step of the way, always resorting to the \"closest\" functional token. Note that this is using <code>pickle</code> to store the tokens, you may want to use JSON or other format instead, as it would be safer. Also, be aware that these are sensitive and if compromised, someone could gain access to your minecraft account (though only for playing, they shouldn't be able to change your password or anything like that), so you might want to consider encrypting these cache files before storing:</p> <pre><code>from __future__ import annotations\n\nimport logging\nimport pickle\nfrom pathlib import Path\n\nimport httpx\n\nfrom mcproto.auth.microsoft.oauth import full_microsoft_oauth\nfrom mcproto.auth.microsoft.xbox import XSTSRequestError, xbox_auth\nfrom mcproto.auth.msa import MSAAccount, ServicesAPIError\n\nlog = logging.getLogger(__name__)\n\nMY_MSA_CLIENT_ID = \"[REDACTED]\"  # Paste your own Client ID here\nCACHE_DIR = Path(\".cache/\")\n\n\nasync def microsoft_login(client: httpx.AsyncClient) -&gt; MSAAccount:  # noqa: PLR0912,PLR0915\n    \"\"\"Obtain minecraft account using Microsoft authentication.\n\n    This function performs full caching of every step along the way, allowing for recovery\n    without manual intervention for as long as at least the root token (from Microsoft OAuth2)\n    is valid. Any later tokens will be refreshed and re-cached once invalid.\n\n    If all tokens are invalid, or this function was ran for the first time (without any cached\n    data), you will be shown a URL and a code. You have to go to this URL with your browser and\n    enter the code, completing the OAuth2 flow, obtaining the root token.\n    \"\"\"\n    CACHE_DIR.mkdir(parents=True, exist_ok=True)\n\n    access_token_cache = CACHE_DIR.joinpath(\"xbox_access_token.pickle\")\n    if access_token_cache.exists():\n        with access_token_cache.open(\"rb\") as f:\n            access_token: str = pickle.load(f)  # noqa: S301\n\n        try:\n            account = await MSAAccount.from_xbox_access_token(client, access_token)\n            log.info(\"Logged in with cached xbox minecraft access token\")\n            return account\n        except httpx.HTTPStatusError as exc:\n            log.warning(f\"Cached xbox minecraft access token is invalid: {exc!r}\")\n    else:\n        log.warning(\"No cached access token available, trying Xbox Secure Token Service (XSTS) token\")\n\n    # Access token either doesn't exist, or isn't valid, try XSTS (Xbox) token\n    xbox_token_cache = CACHE_DIR.joinpath(\"xbox_xsts_token.pickle\")\n    if xbox_token_cache.exists():\n        with xbox_token_cache.open(\"rb\") as f:\n            user_hash, xsts_token = pickle.load(f)  # noqa: S301\n\n        try:\n            access_token = await MSAAccount._get_access_token_from_xbox(client, user_hash, xsts_token)\n        except ServicesAPIError as exc:\n            log.warning(f\"Invalid cached Xbox Secure Token Service (XSTS) token: {exc!r}\")\n        else:\n            log.info(\"Obtained xbox access token from cached Xbox Secure Token Service (XSTS) token\")\n            log.info(\"Storing xbox minecraft access token to cache and restarting auth\")\n            with access_token_cache.open(\"wb\") as f:\n                pickle.dump(access_token, f)\n            return await microsoft_login(client)\n    else:\n        log.warning(\"No cached Xbox Secure Token Service (XSTS) token available, trying Microsoft OAuth2 token\")\n\n    # XSTS token either doesn't exist, or isn't valid, try Microsoft OAuth2 token\n    microsoft_token_cache = CACHE_DIR.joinpath(\"microsoft_token.pickle\")\n    if microsoft_token_cache.exists():\n        with microsoft_token_cache.open(\"rb\") as f:\n            microsoft_token = pickle.load(f)  # noqa: S301\n\n        try:\n            user_hash, xsts_token = await xbox_auth(client, microsoft_token)\n        except (httpx.HTTPStatusError, XSTSRequestError) as exc:\n            log.warning(f\"Invalid cached Microsoft OAuth2 token {exc!r}\")\n        else:\n            log.info(\"Obtained Xbox Secure Token Service (XSTS) token from cached Microsoft OAuth2 token\")\n            log.info(\"Storing Xbox Secure Token Service (XSTS) token to cache and restarting auth\")\n            with xbox_token_cache.open(\"wb\") as f:\n                pickle.dump((user_hash, xsts_token), f)\n            return await microsoft_login(client)\n    else:\n        log.warning(\"No cached microsoft token\")\n\n    # Microsoft OAuth2 token either doesn't exist, or isn't valid, request user auth\n    log.info(\"Running Microsoft OAuth2 flow, requesting user authentication\")\n    microsoft_token = await full_microsoft_oauth(client, MY_MSA_CLIENT_ID)\n    log.info(\"Obtained Microsoft OAuth2 token from user authentication\")\n    log.info(\"Storing Microsoft OAuth2 token and restarting auth\")\n    with microsoft_token_cache.open(\"wb\") as f:\n        pickle.dump(microsoft_token[\"access_token\"], f)\n    return await microsoft_login(client)\n</code></pre>"},{"location":"usage/authentication/#minecraft-non-migrated-accounts","title":"Minecraft (non-migrated) accounts","text":"<p>If you haven't migrated your account into a Microsoft account, follow this guide for authentication. (Any newly created Minecraft accounts will be using Microsoft accounts already.) This method of authentication is called \"yggdrasil\".</p> <p>Warning</p> <p>The account migration process has been concluded in  September 19, 2023. See: https://www.minecraft.net/en-us/article/account-migration-last-call</p> <p>That means that it's no longer possible to migrate this old account into a microsoft account and it's only a matter of time until the authentication servers handling these accounts are turned off entirely.</p> <p>Mcproto will remove support for this old authentication methods once this happens.</p> <p>This method of authentication doesn't require any special app registrations, however it is significantly less secure, as you need to enter your login and password directly.</p> <pre><code>import httpx\nfrom mcproto.auth.yggdrasil import YggdrasilAccount\n\nLOGIN = \"mail@example.com\"\nPASSWORD = \"my_password\"\n\nasync def authenticate() -&gt; YggdrasilAccount:\n    async with httpx.AsyncClient() as client:\n        return YggdrasilAccount.authenticate(client, login=LOGIN, password=PASSWORD)\n</code></pre> <p>The Account instance you will obtain here will contain a refresh token, and a shorter lived access token, received from Mojang APIs from the credentials you entered. Just like with Microsoft accounts, you may want to cache these tokens to avoid needless calls to request new ones and go through authentication again. That said, since doing so doesn't necessarily require user interaction, if you make the credentials accessible from your code directly, this is a lot less annoying.</p> <p>If you will decide to use caching, or if you plan on using these credentials in a long running program, you may see the access token expire. You can check whether the token is expired with the <code>YggdrasilAccount.validate</code> method, and if it is (call returned <code>False</code>), you can call <code>YggdrasilAccount.refresh</code> to use the refresh token to obtain a new access token. The refresh token is much more long lived than the access token, so this should generally be enough for you, although if you login from elsewhere, or after a really long time, the refresh token might be invalidated, in that case, you'll need to go through the full login again.</p>"},{"location":"usage/authentication/#legacy-mojang-accounts","title":"Legacy Mojang accounts","text":"<p>If your minecraft account is still using the (really old) Mojang authentication, you can simply follow the non-migrated guide, as it will work with these legacy accounts too, the only change you will need to make is to use your username, instead of an email.</p>"},{"location":"usage/first-steps/","title":"Manual communication with the server","text":"<p>This example demonstrates how to interact with a Minecraft server using mcproto at it's lowest-level interface. It avoids the built-in packet classes to show how to manually handle data through mcproto's connection and buffer classes. Although this isn\u2019t the typical use case for mcproto, it provides insight into the underlying Minecraft protocol, which is crucial to understand before transitioning to using the higher-level packet handling.</p> <p>In this example, we'll retrieve a server's status \u2014 information displayed in the multiplayer server list, such as the server's MOTD, icon, and player count.</p>"},{"location":"usage/first-steps/#step-by-step-guide","title":"Step-by-step guide","text":""},{"location":"usage/first-steps/#handshake-with-the-server","title":"Handshake with the server","text":"<p>The first step when doing pretty much any kind of communication with the server is establishing a connection and sending a \"handshake\" packet.</p> What even is a packet? <p>A packet is a structured piece of data sent across a network to encode an action or message. In games, packets allow different kinds of information \u2014 such as a player's movement, an item pickup, or a chat message \u2014 to be communicated in a structured way, with each packet tailored for a specific purpose.</p> <p>Every packet has a set structure with fields that identify it and hold its data, making it clear what action or event the packet is meant to represent. While packets may carry different types of information, they usually follow a similar format, so the game\u2019s client and server can read and respond to them easily.</p> <p>To do this, we first need to understand Minecraft packets structure in general, then focus on the specific handshake packet format. To find this out, we recommend using minecraft.wiki, which is a fantastic resource, detailing all of the Minecraft protocol logic.</p> <p>So, according to the Packet Format page, a Minecraft packet has three fields:</p> <ul> <li>Packet length: the total size of the Packet ID and Data fields (in bytes). Sent in a variable length integer   format.</li> <li>Packet ID: uniquely identifies which packet this is. Also sent in the varint format.</li> <li>Data: the packet's actual content. This will differ depending on the packet type.</li> </ul> <p>Another important information to know is that Minecraft protocol operates in \u201cstates,\u201d each with its own set of packets and IDs. For example, the same packet ID in one state may represent a completely different packet in another state. Upon establishing a connection with a Minecraft server, you'll begin in the \"handshaking\" state, with only one packet available: the handshake packet. This packet tells the server which state to enter next.</p> <p>In our case, we\u2019ll request to enter the \"status\" state, used for obtaining server information (in contrast, the \"login\" state would be used to join the server).</p> <p>Next, let\u2019s look at the specifics of the handshake packet on minecraft.wiki here.</p> <p>From here, we can see that the handshake packet has an ID of <code>0</code> and should contain the following data (fields):</p> <ul> <li>Protocol Version: The version of minecraft protocol (for compatibility), sent as a varint.</li> <li>Server Address: The hostname or IP that was used to connect to the server, sent as a string with max length of   255 characters.</li> <li>Server Port: The port number (usually 25565), sent as unsigned short.</li> <li>Next State: The desired state to transition to, sent as a varint. (1 for \"status\".)</li> </ul> <p>Armed with this information, we can start writing code to send the handshake:</p> <pre><code>from mcproto.buffer import Buffer\nfrom mcproto.connection import TCPAsyncConnection\nfrom mcproto.protocol.base_io import StructFormat\n\n\nasync def handshake(conn: TCPAsyncConnection, ip: str, port: int = 25565) -&gt; None:\n    handshake = Buffer()\n    # We use 47 for the protocol version, as which is quite old. We do that to make sure that this code\n    # will work with almost any server, including older ones. Using a newer protocol number may result\n    # in older servers refusing to respond.\n    handshake.write_varint(47)\n    handshake.write_utf(ip)\n    handshake.write_value(StructFormat.USHORT, port)\n    handshake.write_varint(1)  # The next state should be \"status\"\n\n    # Nice! Now we have the packet data, stored in a buffer object.\n    # This is the data field in the packet format specification.\n\n    # Let's prepare another buffer that will contain the last 2 packet format fields (packet id and data).\n    # We do this since the first field will require us to know the size of these two combined,\n    # so let's put them into 1 buffer first:\n    packet = Buffer()\n    packet.write_varint(0)  # Handshake packet ID\n    packet.write(handshake)  # The entire handshake data, from our previous buffer.\n\n    # And finally, it's time to send it!\n    await conn.write_varint(len(packet))  # First field (size of packet id + data)\n    await conn.write(packet)  # Second + Third fields (packet id + data)\n</code></pre>"},{"location":"usage/first-steps/#running-the-code","title":"Running the code","text":"<p>Now, you may be wondering how to actually run this code, what is <code>TCPAsyncConnection</code>? Essentially, it's just a wrapper around a socket connection, designed specifically for communication with Minecraft servers.</p> <p>To create an instance of this connection, you'll want to use an <code>async with</code> statement, like so:</p> <pre><code>import asyncio\n\nfrom mcproto.connection import TCPAsyncConnection\n\nasync def main():\n    ip = \"mc.hypixel.net\"\n    port = 25565\n\n    async with (await TCPAsyncConnection.make_client((ip, port), 2)) as connection:\n        await handshake(connection, ip, port)\n\ndef start():\n    # Just some boilerplate code that we can run our asynchronous main function\n    asyncio.run(main())\n</code></pre> <p>Currently, this code only establishes a connection and requests a state transition to \"status\", so when running it you won't see any meaningful result just yet.</p> <p>Synchronous handling</p> <p>Even though we're using asynchronous connection in this example, mcproto does also provide a synchronous version: <code>TCPSyncConnection</code>.</p> <p>While you can use this synchronous option, we recommend the asynchronous approach as it highlights blocking operations with the <code>await</code> keyword and allows other tasks to run concurrently, while these blocking operations are waiting.</p>"},{"location":"usage/first-steps/#obtaining-server-status","title":"Obtaining server status","text":"<p>Now comes the interesting part, we'll request a status from the server, and read the response that it sends us. Since we're already in the status game state by now, we'll want to take a look at the packets that are available in this state. Once again, minecraft.wiki details all of this for us here.</p> <p>We can notice that the packets are split into 2 categories: client-bound and server-bound. We'll first want to look at the server-bound ones (i.e. packets targeted to the server, sent by the client - us). There are 2 packets listed here: Ping Request and Status request. Ping is only here to check if the server is online, and allow us to measure how long the response took, getting the latency, we're not that interested in doing this now, we want to see some actual useful data from the server, so we'll choose the Status request packet.</p> <p>Since this packet just tells the server to send us the status, it actually doesn't contain any data fields for us to add, so the packet itself will be empty:</p> <pre><code>from mcproto.buffer import Buffer\nfrom mcproto.connection import TCPAsyncConnection\n\nasync def status_request(conn: TCPAsyncConnection) -&gt; None:\n    # Let's construct a buffer with the packet ID &amp; packet data (like we saw in the handshake example already)\n    # However, since the status request packet doesn't contain any data, we just need to set the packet id.\n    packet = Buffer()\n    packet.write_varint(0)  # Status request packet ID\n\n    await conn.write_varint(len(packet))\n    await conn.write(packet)\n</code></pre> <p>After we send this request, the server should respond back to us. But what will it respond with? Well, let's find out:</p> <pre><code>from mcproto.buffer import Buffer\nfrom mcproto.connection import TCPAsyncConnection\n\nasync def read_status_response(conn: TCPAsyncConnection) -&gt; None:\n    # Remember, the packet format states that we first receive a length, then packet id, then data\n    _response_len = await conn.read_varint()\n    _response = await conn.read(_response_len)  # will give us a bytearray\n\n    # Amazing, we've just received data from the server! But it's just bytes, let's turn it into\n    # a Buffer object, which includes helpful methods that allow us to read from it\n    response = Buffer(_response)\n    packet_id = response.read_varint()  # Remember, 2nd field is the packet ID, encoded as a varint\n\n    print(packet_id)\n</code></pre> <p>Adjusting our main function to run the new logic:</p> <pre><code>async def main():\n    ip = \"mc.hypixel.net\"\n    port = 25565\n\n    async with (await TCPAsyncConnection.make_client((ip, port), 2)) as connection:\n        await handshake(connection, ip, port)\n        await status_request(connection)\n        await read_status_response(connection)\n</code></pre> <p>Running the code now, we can see it print <code>0</code>. Aha! That's our packet ID, so let's see what the server sent us. So, looking through the list of client-bound packets in the wiki, this is the Status Response Packet!</p> <p>Note</p> <p>Interesting, this packet has an ID of 0, wasn't that the status request packet?</p> <p>Indeed, packets can have the same ID in different directions, so packet ID <code>0</code> for a client-bound response is distinct from packet ID <code>0</code> for a server-bound request.</p> <p>Alright then, let's see what the status response packet contains: The wiki says it just has a single UTF-8 string field, which contains JSON data. Let's adjust our function a bit, and read that data:</p> <pre><code>import json\n\nfrom mcproto.buffer import Buffer\nfrom mcproto.connection import TCPAsyncConnection\n\nasync def read_status_response(conn: TCPAsyncConnection) -&gt; dict:  # We're now returning a dict\n    _response_len = await conn.read_varint()\n    _response = await conn.read(_response_len)\n\n    response = Buffer(_response)\n    packet_id = response.read_varint()\n\n    # Let's always make sure we got the status response packet here.\n    assert packet_id == 0\n\n    # Let's now read that single UTF8 string field, it should still be in our buffer:\n    received_string = response.read_utf()\n\n    # Now, let's just use the json built-in library, convert the JSON string into a python object\n    # (in this case, it will be a dict)\n    data = json.loads(received_string)\n\n    # Cool, we now have the actual status data that the server has provided, we should return them\n    # from the function now.\n    # Before we do that though, let's just do a sanity-check and ensure that the buffer doesn't contain\n    # any more data.\n    assert response.remaining == 0  # 0 bytes (everything was read)\n    return data\n</code></pre> <p>Finally, we'll adjust the main function to show some of the status data that we obtained:</p> <pre><code>async def main():\n    ip = \"mc.hypixel.net\"\n    port = 25565\n\n    async with (await TCPAsyncConnection.make_client((ip, port), 2)) as connection:\n        await handshake(connection, ip, port)\n        await status_request(connection)\n        data = await read_status_response(connection)\n\n    # Wohoo, we got the status data! Let's see it\n    print(data[\"players\"][\"max\"])  # This is the server's max player amount (slots)\n    print(data[\"players\"][\"online\"])  # This is how many people are currently online\n    print(data[\"description\"])  # And here's the motd\n\n    # There's a bunch of other things in this data, try it out, see what you can find!\n</code></pre>"},{"location":"usage/packet-communication/","title":"Packet communication","text":"<p>This guide explains how to communicate with the server using our packet classes. It will go over the same example from previous page, showing how to obtain the server status, but instead of using the low level interactions, this guide will simplify a lot of that logic with the use of packet classes.</p> <p>Packets Target the Latest Minecraft Version</p> <p>Mcproto's packet classes are designed to support the latest Minecraft release. While packets in the handshaking and status game states usually remain compatible across versions, mcproto does NOT guarantee cross-version packet compatibility. Using packets in the play game state, for example, will very likely lead to compatibility issues if you're working with older Minecraft versions.</p> <p>Only the low level interactions are guaranteed to remain compatible across protocol updates, if you need support for and older minecraft version, consider downgrading to an older version of mcproto, or using the low level interactions.</p>"},{"location":"usage/packet-communication/#obtaining-the-packet-map","title":"Obtaining the packet map","text":"<p>Every packet has a unique ID based on its direction (client to server or server to client) and game state (such as status, handshaking, login, or play). This ID lets us recognize packet types in different situations, which is crucial for correctly receiving packets.</p> <p>To make this process easier, mcproto provides a packet map\u2014essentially a dictionary mapping packet IDs to packet classes. Here\u2019s how to generate a packet map:</p> <pre><code>from mcproto.packets import generate_packet_map, GameState, PacketDirection\n\nSTATUS_CLIENTBOUND_MAP = generate_packet_map(PacketDirection.CLIENTBOUND, GameState.STATUS)\n</code></pre> <p>Printing <code>STATUS_CLIENTBOUND_MAP</code> would display something like this:</p> <pre><code>{\n    0: &lt;class 'mcproto.packets.status.status.StatusResponse'&gt;\n    1: &lt;class 'mcproto.packets.status.ping.PingPong'&gt;,\n}\n</code></pre> <p>Telling us that in the STATUS gamestate, for the clientbound direction, these are the only packet we can receive, and mapping the actual packet classes for every supported packet ID number.</p>"},{"location":"usage/packet-communication/#using-packets","title":"Using packets","text":"<p>The first packet we send to the server is always a Handshake packet. This is the only packet in the entire handshaking state, and it's a \"gateway\", after which we get moved to a different state, in our case, that will be the STATUS state.</p> <pre><code>from mcproto.packets.handshaking.handshake import Handshake, NextState\n\nmy_handshake = Handshake(\n    # Once again, we use an old protocol version so that even older servers will respond\n    protocol_version=47,\n    server_address=\"mc.hypixel.net\",\n    server_port=25565,\n    next_state=NextState.STATUS,\n)\n</code></pre> <p>That's it! We've now constructed a full handshake packet with all of the data it should contain. You might remember from the previous low-level example, that we originally had to look at the protocol specification, find the handshake packet and construct it's data as a Buffer with all of these variables.</p> <p>With these packet classes, you can simply follow your editor's autocompletion to see what this packet requires, pass it in and the data will be constructed for you from these attributes, without constantly cross-checking with the wiki.</p> <p>For completion, let's also construct the status request packet that we were sending to instruct the server to send us back the status response packet.</p> <pre><code>from mcproto.packets.status.status import StatusRequest\n\nmy_status_request = StatusRequest()\n</code></pre> <p>This one was even easier, as the status request packet alone doesn't contain any special data, it's just a request to the server to send us some data back.</p>"},{"location":"usage/packet-communication/#sending-packets","title":"Sending packets","text":"<p>To actually send out a packet to the server, we'll need to create a connection, and use mcproto's <code>async_write_packet</code> function, responsible for sending packets. Let's see it:</p> <pre><code>from mcproto.packets import async_write_packet\nfrom mcproto.connection import TCPAsyncConnection\n\nasync def main():\n    ip = \"mc.hypixel.net\"\n    port = 25565\n\n    async with (await TCPAsyncConnection.make_client((ip, port), timeout=2)) as connection:\n        # Let's send the handshake packet that we've created in the example before\n        await async_write_packet(connection, my_handshake)\n        # Followed by the status request\n        await async_write_packet(connection, my_status_request)\n</code></pre> <p>Much easier than the manual version, isn't it?</p>"},{"location":"usage/packet-communication/#receiving-packets","title":"Receiving packets","text":"<p>Alright, we might now know how to send a packet, but how do we receive one?</p> <p>Let's see, but this time, let's also try out using the synchronous connection, just for fun:</p> <pre><code>from mcproto.connection import TCPSyncConnection\n\n# With a synchronous connection, comes synchronous reader/writer functions\nfrom mcproto.packets import sync_read_packet, sync_write_packet\n\n# We'll also need the packet classes from the status game-state\nfrom mcproto.packets.status.status import StatusResponse\nfrom mcproto.packets.status.ping import PingPong\n\ndef main():\n    ip = \"mc.hypixel.net\"\n    port = 25565\n\n    with TCPSyncConnection.make_client((\"mc.hypixel.net\", 25565), 2) as conn:\n        # First, send the handshake &amp; status request, just like before, but synchronously\n        await sync_write_packet(connection, my_handshake)\n        await sync_write_packet(connection, my_status_request)\n\n        # To read a packet, we'll also need to have the packet map, telling us which IDs represent\n        # which actual packet types. Let's pass in the map that we've constructed before:\n        packet = sync_read_packet(conn, STATUS_CLIENTBOUND_MAP)\n\n    # Now that we've got back the packet, we no longer need the connection, we won't be sending\n    # anything else, so let's get out of the context manager.\n\n    # Finally, let's handle the received packet:\n    if isinstance(packet, StatusResponse):\n        ...\n    elif isinstance(packet, PingPong):\n        ...\n    else:\n        raise Exception(\"Impossible, there are no other client bound packets in the STATUS game state\")\n</code></pre>"},{"location":"usage/packet-communication/#requesting-status","title":"Requesting status","text":"<p>Alright, so let's actually try to put all of this knowledge together, and create something meaningful. Let's replicate the status obtaining logic from the manual example, but with these new packet classes:</p> <pre><code>from mcproto.connection import TCPAsyncConnection\nfrom mcproto.packets import async_write_packet, async_read_packet, generate_packet_map\nfrom mcproto.packets.packet import PacketDirection, GameState\nfrom mcproto.packets.handshaking.handshake import Handshake, NextState\nfrom mcproto.packets.status.status import StatusRequest, StatusResponse\n\nSTATUS_CLIENTBOUND_MAP = generate_packet_map(PacketDirection.CLIENTBOUND, GameState.STATUS)\n\n\nasync def get_status(ip: str, port: int) -&gt; dict:\n    handshake_packet = Handshake(\n        protocol_version=47,\n        server_address=ip,\n        server_port=port,\n        next_state=NextState.STATUS,\n    )\n    status_req_packet = StatusRequest()\n\n    async with (await TCPAsyncConnection.make_client((ip, port), 2)) as connection:\n        # We start out at HANDSHAKING game state\n        await async_write_packet(connection, handshake_packet)\n        # After sending the handshake, we told the server to now move us into the STATUS game state\n        await async_write_packet(connection, status_req_packet)\n        # Since we're still in STATUS game state, we use the status packet map when reading\n        packet = await async_read_packet(connection, STATUS_CLIENTBOUND_MAP)\n\n    # Now, we should always first make sure it really is the packet we expected\n    if not isinstance(packet, StatusResponse):\n        raise ValueError(f\"We've got an unexpected packet back: {packet!r}\")\n\n    # Since we know we really are dealing with a status response, let's get out it's data, and return it\n    # this is the same JSON data that we obtained from the first example with the manual interactions\n    return packet.data\n</code></pre> <p>As you can see, this approach is more convenient and eliminates much of the manual packet handling, letting you focus on higher-level logic!</p>"}]}