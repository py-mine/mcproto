---
name: Publish to PyPI / GitHub

on:
  push:
    tags:
      # This pattern is not a typical regular expression, see:
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - "v*"
    branches:
      # Also run on every commit to main. This allows us to test the build & release pipeline and eventually leads to a
      # Test PyPI release. Unlike with a tag push, this will not release a full PyPI release, nor create a GitHub release.
      - main

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.13"

jobs:
  build:
    name: "Build the project"
    runs-on: ubuntu-latest

    outputs:
      prerelease: ${{ steps.check-version.outputs.prerelease }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          python-version: ${{ env.PYTHON_VERSION }}
          activate-environment: true
          enable-cache: true
          cache-suffix: "build"

      - name: Install dependencies
        run: |
          uv sync --no-default-groups --group release

      - name: Build project for distribution
        run: uv build

      - name: Upload build files
        uses: actions/upload-artifact@v4
        with:
          name: "dist"
          path: "dist/"
          if-no-files-found: error
          retention-days: 5

      - name: Check pre-release status
        id: check-version
        run: |
          version="$(uv pip list --format json | jq -r '.[] | select(.name == "mcproto") | .version')"
          echo "version=$version" >> "$GITHUB_OUTPUT"

          if [[ "$version" =~ "^[0-9]+\.[0-9]+\.[0-9]+$" ]]; then
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      # Get content of the changelog for the latest release, so that we can use it as the body for a GitHub tag
      - name: Obtain latest changelog
        if: startsWith(github.ref, 'refs/tags/') # only on proper releases
        # Our CHANGELOG.md uses `---` separators between each published
        # version. The command below obtains all content until that separator,
        # leaving us with just the content for the latest version. We then
        # remove first 2 lines, being level 2 header with version and date,
        # and a blank line under it, and also the last 2 lines, being the
        # separator itself, and a blank line above it.
        run: |
          awk '1;/---/{exit}' CHANGELOG.md | tail -n +3 | head -n -2 \
            > changelog.txt

      - name: Obtain preview changelog
        if: "!startsWith(github.ref, 'refs/tags/') # only on proper releases"
        env:
          VERSION: ${{ steps.check-version.outputs.version }}
        run: |
          # Generate a draft changelog from the pending unreleased change fragments.
          # Similarly to the above, this then gets rid of the separator and version header,
          # leaving a clean changelog
          towncrier build --draft --version "$VERSION" | tail -n +3 | hean -n -4 \
            > changelog.txt

      - name: Upload release changelog
        uses: actions/upload-artifact@v4
        with:
          name: "changelog"
          path: "changelog.txt"
          if-no-files-found: error
          retention-days: 5

  publish-github:
    name: "Publish a GitHub release"
    if: startsWith(github.ref, 'refs/tags/') # only publish to GitHub on tag pushes
    needs: build
    runs-on: ubuntu-latest
    environment: release

    steps:
      - name: Download the distribution files from PR artifact
        uses: actions/download-artifact@v5
        with:
          name: "dist"
          path: "dist/"

      - name: Download the changelog from PR artifact
        uses: actions/download-artifact@v5
        with:
          name: "changelog"

      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.PYMINE_BOT_APP_ID }}
          private-key: ${{ secrets.PYMINE_BOT_PRIVATE_KEY }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ steps.generate_token.outputs.token }}
          bodyFile: changelog.txt
          draft: false
          prerelease: ${{ needs.build.outputs.prerelease == 'true' }}

  publish-test-pypi:
    name: "Publish to Test PyPI"
    if: "!startsWith(github.ref, 'refs/tags/')" # publish to Test PyPI index on every commit to main
    needs: build
    runs-on: ubuntu-latest
    environment: test-pypi
    permissions:
      # Used to authenticate to Test PyPI via OIDC.
      id-token: write

    steps:
      - name: Download the distribution files from PR artifact
        uses: actions/download-artifact@v5
        with:
          name: "dist"
          path: "dist/"

      # Upload to Test PyPI first, in case something fails.
      - name: Upload to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # the "legacy" in the URL doesn't mean it's deprecated
          repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    name: "Publish to PyPI"
    if: startsWith(github.ref, 'refs/tags/') # only publish to primary PyPI index on tag pushes
    needs: build
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # Used to authenticate to PyPI via OIDC.
      id-token: write

    steps:
      - name: Download the distribution files from PR artifact
        uses: actions/download-artifact@v5
        with:
          name: "dist"
          path: "dist/"

      # Upload to Test PyPI first, in case something fails.
      - name: Upload to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # the "legacy" in the URL doesn't mean it's deprecated
          repository-url: https://test.pypi.org/legacy/

      # This uses PyPI's trusted publishing, so no token is required
      - name: Release to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-docs:
    name: "Publish release docs"
    if: startsWith(github.ref, 'refs/tags/') # only publish release docs on tag pushes
    needs: build
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write

    steps:
      - name: Generate token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.PYMINE_BOT_APP_ID }}
          private-key: ${{ secrets.PYMINE_BOT_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"
          # Fetch the entire git history (all branches + tags)
          # We do this because the docs use git describe, which requires having all
          # the commits up to the latest version tag.
          # We also need the gh-pages branch to push the docs to.
          fetch-depth: 0

      # Make the github application be the committer
      # (see: https://stackoverflow.com/a/74071223 on how to obtain the committer email)
      - name: Setup git config
        run: |
          git config --global user.name "py-mine-ci-bot"
          git config --global user.email "121461646+py-mine-ci-bot[bot]@users.noreply.github.com"

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          python-version: ${{ env.PYTHON_VERSION }}
          activate-environment: true
          enable-cache: true
          cache-suffix: "docs" # matches mkdocs.yml suffix

      - name: Install dependencies
        run: |
          uv sync --no-default-groups --group docs

      - name: Build the documentation (mike)
        run: |
          version="$(uv pip list --format json | jq -r '.[] | select(.name == "mcproto") | .version')"
          mike deploy --update-aliases "$version" release

      - name: Deploy docs - release
        run: git push origin gh-pages
