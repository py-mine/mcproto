---
name: Publish to PyPI / GitHub

on:
  push:
    tags:
      # This pattern is not a typical regular expression, see:
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - "v*"
    branches:
      # Also run on every commit to main. This allows us to test the build & release pipeline and eventually leads to a
      # Test PyPI release. Unlike with a tag push, this will not release a full PyPI release, nor create a GitHub release.
      - main

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.13"

jobs:
  build:
    name: "Build the project"
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.check-version.outputs.version }}
      prerelease: ${{ steps.check-version.outputs.prerelease }}
      tagged_release: ${{ steps.check-version.outputs.tagged_release }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Do a full clone for uv-dynamic-versioning to pick up the git version
          fetch-depth: 0

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          python-version: ${{ env.PYTHON_VERSION }}
          activate-environment: true
          enable-cache: true
          cache-suffix: "build"

      - name: Install dependencies
        run: |
          uv sync --no-default-groups --group release

      - name: Check version status
        id: check-version
        run: |
          version="$(hatchling version)"

          echo "Project version: $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

          # Determine whether we're doing a tagged release e.g. this workflow
          # was triggered by a git tag ref that matches the project's current
          # version, so a full PyPI release should be made, alongside all of
          # the other release steps. If this isn't the case, only a Test PyPI
          # release will be performed.
          if [[ "${GITHUB_REF}" == "refs/tags/v${version}" ]]; then
            echo "This is a new tagged release"
            echo "tagged_release=true" >> "$GITHUB_OUTPUT"
          else
            echo "This is an untagged dev release"
            echo "tagged_release=false" >> "$GITHUB_OUTPUT"
          fi

          # This is used to mark the version as prerelease on PyPI if it doesn't
          # follow the full release x.y.z format (e.g. if it's 1.2.4a1)
          if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "This is a stable version release"
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          else
            echo "This is a pre-release version"
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build project for distribution
        run: uv build --all-packages

      - name: Upload build files
        uses: actions/upload-artifact@v4
        with:
          name: "dist"
          path: "dist/"
          if-no-files-found: error
          retention-days: 5

      # Get content of the changelog for the latest release, so that we can use it as the body for a GitHub tag
      - name: Obtain latest changelog
        if: startsWith(github.ref, 'refs/tags/') # only on proper releases
        # Our CHANGELOG.md uses `---` separators between each published
        # version. The command below obtains all content until that separator,
        # leaving us with just the content for the latest version. We then
        # remove first 2 lines, being level 2 header with version and date,
        # and a blank line under it, and also the last 2 lines, being the
        # separator itself, and a blank line above it.
        run: |
          awk '1;/---/{exit}' CHANGELOG.md | tail -n +3 | head -n -2 \
            > changelog.txt

      - name: Obtain preview changelog
        if: "!startsWith(github.ref, 'refs/tags/')" # only on dev/untagged releases
        env:
          VERSION: ${{ steps.check-version.outputs.version }}
        run: |
          # Generate a draft changelog from the pending unreleased change fragments.
          # Similarly to the above, this then gets rid of the separator and version header,
          # leaving a clean changelog
          towncrier build --draft --version "$VERSION" | tail -n +3 | head -n -4 \
            > changelog.txt

      - name: Upload release changelog
        uses: actions/upload-artifact@v4
        with:
          name: "changelog"
          path: "changelog.txt"
          if-no-files-found: error
          retention-days: 5

  publish-github:
    name: "Publish a GitHub release"
    if: needs.build.outputs.tagged_release == 'true' # only publish to GitHub on tagged releases
    needs: build
    runs-on: ubuntu-latest
    environment: release # requires approval

    steps:
      - name: Download the distribution files from build artifact
        uses: actions/download-artifact@v5
        with:
          name: "dist"
          path: "dist/"

      - name: Download the changelog from build artifact
        uses: actions/download-artifact@v5
        with:
          name: "changelog"

      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.PYMINE_BOT_APP_ID }}
          private-key: ${{ secrets.PYMINE_BOT_PRIVATE_KEY }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ steps.generate_token.outputs.token }}
          bodyFile: changelog.txt
          draft: false
          prerelease: ${{ needs.build.outputs.prerelease == 'true' }}

  publish-test-pypi:
    name: "Publish to Test PyPI"
    # No if condition here, publish both tagged and untagged releases to Test PyPI.
    needs: build
    runs-on: ubuntu-latest
    environment: test-pypi # no approval
    permissions:
      # Used to authenticate to Test PyPI via OIDC.
      id-token: write

    steps:
      - name: Download the distribution files from build artifact
        uses: actions/download-artifact@v5
        with:
          name: "dist"
          path: "dist/"

      - name: Upload to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # the "legacy" in the URL doesn't mean it's deprecated
          repository-url: https://test.pypi.org/legacy/
          # Enable verbose mode for easy debugging
          verbose: true

  publish-pypi:
    name: "Publish to PyPI"
    if: needs.build.outputs.tagged_release == 'true' # only publish to PyPI on tagged releases
    needs: build
    runs-on: ubuntu-latest
    environment: release # requires approval
    permissions:
      # Used to authenticate to PyPI via OIDC.
      id-token: write

    steps:
      - name: Download the distribution files from build artifact
        uses: actions/download-artifact@v5
        with:
          name: "dist"
          path: "dist/"

      # This uses PyPI's trusted publishing, so no token is required
      - name: Release to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-docs:
    name: "Publish release docs"
    if: needs.build.outputs.tagged_release == 'true' # only publish release docs on tagged releases
    # To prevent unapproved runs (outside of the release github environment), this job depends
    # on the publish-pypi job succeeding. This works around not being able to specify environment: release
    # for this job (since it's a dispatch job)
    needs: publish-pypi
    uses: ./.github/workflows/mkdocs.yml
    with:
      release_type: release
      version: ${{ needs.build.outputs.version }}
