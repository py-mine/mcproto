name: Publish to PyPI / GitHub

on:
  push:
    tags:
      - "v*"

jobs:
  publish:
    name: "Build and publish to PyPI"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Setup poetry
        uses: ItsDrike/setup-poetry@v1
        with:
          python-version: 3.11
          install-args: "--only release-ci"

      - name: Set version with dynamic versioning
        run: poetry run poetry-dynamic-versioning

      - name: Build project for distribution
        run: poetry build

      - name: Check pre-release status
        id: check-version
        run: |
          [[ "$(poetry version --short)" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || echo prerelease=true >> $GITHUB_OUTPUT

      # Get content of the changelog for the latest release, so that we can use it as the body for a GitHub tag
      - name: Obtain latest changelog
        id: changelog
        uses: mathiasvr/command-output@v1
        with:
          # Our CHANGELOG.md uses `---` separators between each published version. The command below
          # obtains all content until that separator, leaving us with just the content for the latest version.
          # We then remove first 2 lines, being level 2 header with version and date, and a blank line under it,
          # and also the last 2 lines, being the separator itself, and a blank line above it.
          run: awk '1;/---/{exit}' CHANGELOG.md | tail -n +3 | head -n -2

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ steps.generate_token.outputs.token }}
          body: ${{ steps.changelog.outputs.stdout }}
          draft: false
          prerelease: steps.check-version.outputs.prerelease == 'true'

      - name: Run release script
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish
