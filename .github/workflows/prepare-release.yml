---
name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to prepare the release for"
        required: true

env:
  PYTHON_VERSION: "3.13"

jobs:
  prepare-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.PYMINE_BOT_APP_ID }}
          private-key: ${{ secrets.PYMINE_BOT_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}

      # Make the github application be the committer
      # (see: https://stackoverflow.com/a/74071223 on how to obtain the committer email)
      - name: Setup git config
        run: |
          git config --global user.name "py-mine-ci-bot"
          git config --global user.email "121461646+py-mine-ci-bot[bot]@users.noreply.github.com"

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          python-version: ${{ env.PYTHON_VERSION }}
          activate-environment: true
          enable-cache: true
          cache-suffix: "prepare-release"

      - name: Install dependencies
        run: |
          uv sync --no-default-groups --no-install-project --group release

      - name: Checkout new branch
        run: git checkout -b "prepare-release-${{ github.event.inputs.version }}"

      - name: Run towncrier
        run: towncrier build --yes --version "${{ github.event.inputs.version }}"

      - name: Commit changes
        run: git commit -am "Prepare for release of version ${{ github.event.inputs.version }}"

      - name: Push changes
        run: git push origin "prepare-release-${{ github.event.inputs.version }}"

      - name: Create pull request
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          VERSION: ${{ github.event.inputs.version }}
          SENDER: ${{ github.event.sender.login }}
        run: |
          echo "Release preparation triggered by @$SENDER." > pr-body.txt
          echo "Once the pull request is merged, you can trigger a PyPI release by pushing a \`v$VERSION\` git tag in the repository." >> pr-body.txt

          gh pr create \
            --title "Prepare for release of $VERSION" \
            --body-file pr-body.txt \
            --label "t: project" \
            --label "a: documentation" \
            --label "p: 1 - high" \
            --assignee "$SENDER"

          PR_NUMBER="$(gh pr view --json number -q .number)"
          echo "PR #$PR_NUMBER opened"
