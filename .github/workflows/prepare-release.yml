name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to prepare the release for"
        required: true

jobs:
  prepare-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}

      # Make the github application be the committer
      # (see: https://stackoverflow.com/a/74071223 on how to obtain the committer email)
      - name: Setup git config
        run: |
          git config --global user.name "py-mine-ci-bot"
          git config --global user.email "121461646+py-mine-ci-bot[bot]@users.noreply.github.com"

      - name: Setup poetry
        uses: ItsDrike/setup-poetry@v1
        with:
          python-version: 3.11
          install-args: "--no-root --only release"

      - name: Checkout new branch
        run: git checkout -b "prepare-release-${{ github.event.inputs.version }}"

      - name: Run towncrier
        run: towncrier build --yes --version "${{ github.event.inputs.version }}"

      - name: Commit changes
        run: git commit -am "Prepare for release of version ${{ github.event.inputs.version }}"

      - name: Push changes
        run: git push origin "prepare-release-${{ github.event.inputs.version }}"

      - name: Create pull request
        uses: repo-sync/pull-request@v2
        with:
          # We need to use a bot token to be able to trigger workflows that listen to pull_request calls
          github_token: ${{ steps.generate_token.outputs.token }}
          source_branch: prepare-release-${{ github.event.inputs.version }}
          destination_branch: main
          pr_assignee: ${{ github.event.sender.login }}
          pr_title: Prepare for release of ${{ github.event.inputs.version }}
          pr_label: "a: dependencies,t: release"
          pr_body: |
            Release preparation triggered by @${{ github.event.sender.login }}.
            Once the pull request is merged, you can trigger a PyPI release by pushing a \`v${{ github.event.inputs.version }}\` git tag in the repository.
