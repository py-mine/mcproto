{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"MCPROTO"},{"location":"#what-is-mcproto","title":"What is Mcproto","text":"<p>Mcproto is a python library that provides various low level interactions with the Minecraft protocol. It attempts to be a full wrapper around the Minecraft protocol, which means it could be used as a basis for Minecraft bots written in python, or even full python server implementations.</p> <p>Warning</p> <p>This library is still heavily Work-In-Progress, which means a lot of things can still change and some features may be missing or incomplete. Using the library for production applications at it's current state isn't recommended.</p>"},{"location":"community/attribution/","title":"Attribution","text":"<p>This document serves as a way to explicitly give credit to projects which made mcproto possible.</p> <p>Note that as with any other project, if there was some code that was directly utilized from these projects, it will be mentioned in <code>LICENSE-THIRD-PARTY.txt</code>, not in here. This file isn't meant to serve as a place to disclose used code and it's licenses, but rather to give proper credit where it is due, and to shout out a few amazing projects that allowed mcproto to exist in the first place.</p> <ul> <li>wiki.vg (https://wiki.vg): An absolutely amazing community driven wiki that documents how the minecraft protocol is   structured and the changes that occur between the protocol versions.</li> <li>PyMine-Net: The project that was the main inspiration to this project, being a separation of the minecraft   networking tooling used in PyMine-Server, which is an attempt at implementing a fully working minecraft server purely   in python. However, this project is no longer maintained, and so mcproto was created to be it's replacement.</li> <li>Mcstatus: A library that allows for easy fetching of status/query data from minecraft servers, including parsers and   structures that meaningfully represent the obtained data, but also the logic on how it's actually obtained, some of   which this project took heavy inspiration from.</li> <li>pyCraft: A long abandoned project similar to mcproto, which served as an inspiration for various functionalities in   the library.</li> <li>quarry: A library providing support for basic interactions with the minecraft protocol, though only up to packet reading.   Implementation for reading data from specific packets is not included.</li> </ul> <p>To all of these projects, they deserve a massive thank you, for keeping their code/information open-sourced and available as a source of information, and inspiration freely to anyone.</p>"},{"location":"community/code-of-conduct/","title":"Code of Conduct","text":"<p>This code of conduct outlines our expectations for the people involved with this project. We, as members, contributors and leaders are committed to providing a welcoming and inspiring project that anyone can easily join, expecting a harassment-free experience, as described in this code of conduct.</p> <p>This code of conduct is here to ensure we provide a welcoming and inspiring project that anyone can easily join, expecting a harassment-free experience, as described in this code of conduct.</p> <p>The goal of this document is to set the overall tone for our community. It is here to outline some of the things you can and can't do if you wish to participate in our community. However it is not here to serve as a rule-book with a complete set of things you can't do, social conduct differs from situation to situation, and person to person, but we should do our best to try and provide a good experience to everyone, in every situation.</p> <p>We value many things beyond just technical expertise, including collaboration and supporting others within our community. Providing a positive experience for others can have a much more significant impact than simply providing the correct answer.</p>"},{"location":"community/code-of-conduct/#harassment","title":"Harassment","text":"<p>We share a common understanding of what constitutes harassment as it applies to a professional setting. Although this list cannot be exhaustive, we explicitly honor diversity in age, gender, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, disability and personal appearance. We will not tolerate discrimination based on any of the protected characteristics above, including some that may not have been explicitly mentioned here. We consider discrimination of any kind to be unacceptable and immoral.</p> <p>Harassment includes, but is not limited to:</p> <ul> <li>Offensive comments (or \"jokes\") related to any of the above mentioned attributes.</li> <li>Deliberate \"outing\"/\"doxing\" of any aspect of a person's identity, such as physical or electronic address, without   their explicit consent, except as necessary to protect others from intentional abuse.</li> <li>Unwelcome comments regarding a person's lifestyle choices and practices, including those related to food, health,   parenting, drugs and employment.</li> <li>Deliberate misgendering. This includes deadnaming or persistently using a pronoun that does not correctly reflect a   person's gender identity. You must address people by the name they give you when not addressing them by their   username or handle.</li> <li>Threats of violence, both physical and psychological.</li> <li>Incitement of violence towards any individual, including encouraging a person to engage in self-harm.</li> <li>Publication of non-harassing private communication.</li> <li>Pattern of inappropriate social conduct, such as requesting/assuming inappropriate levels of intimacy with others, or   excessive teasing after a request to stop.</li> <li>Continued one-on-one communication after requests to cease.</li> <li>Sabotage of someone else's work or intentionally hindering someone else's performance.</li> </ul>"},{"location":"community/code-of-conduct/#plagiarism","title":"Plagiarism","text":"<p>Plagiarism is the re-use of someone else's work (eg: binary content such as images, textual content such as an article, but also source code, or any other copyrightable resources) without the permission or a license right from the author. Claiming someone else's work as your own is not just immoral and disrespectful to the author, but also illegal in most countries. You should always follow the authors wishes, and give credit where credit is due.</p> <p>If we found that you've intentionally attempted to add plagiarized content to our code-base, you will likely end up being permanently banned from any future contributions to this project's repository. We will of course also do our best to remove, or properly attribute this plagiarized content as quickly as possible.</p> <p>An unintentional attempt at plagiarism will not be punished as harshly, but nevertheless, it is your responsibility as a contributor to check where the code you're submitting comes from, and so repeated submission of such content, even after you were warned might still get you banned.</p> <p>Please note that an online repository that has no license is presumed to only be source-available, NOT open-source. Meaning that this work is protected by author's copyright, automatically imposed over it, and without any license extending that copyright, you have no rights to use such code. So know that you can't simply take some source-code, even though it's published publicly. This code may be available to be seen by anyone, but that does not mean it's also available to be used by anyone in other projects.</p> <p>Another important note to keep in mind is that even if some project has an open-source license, that license may have conditions which are incompatible with our codebase (such as requiring all of the code that links to this new part to also be licensed under the same license, which our code-base is not currently under). That is why it's necessary to understand a license before using code available under it. Simple attribution often isn't everything that the license requires.</p> Learn more about software licensing <p>If you are new to software licensing, you can check out this article, which does a good job at explaining the basics.</p>"},{"location":"community/code-of-conduct/#generally-inappropriate-behavior","title":"Generally inappropriate behavior","text":"<p>Outside of just harassment and plagiarism, there are countless other behaviors which we consider unacceptable, as they may be offensive, and discourage people from engaging with our community.</p> <p>Examples of generally inappropriate behavior:</p> <ul> <li>The use of sexualized language or imagery of any kind</li> <li>The use of inappropriate images, including in an account's avatar</li> <li>The use of inappropriate language, including in an account's nickname</li> <li>Any spamming, flamming, baiting or other attention-stealing behavior</li> <li>Discussing topics that are overly polarizing, sensitive, or incite arguments.</li> <li>Responding with \"RTFM\", \"just google it\" or similar response to help requests</li> <li>Other conduct which could be reasonably considered inappropriate</li> </ul> <p>Examples of generally appropriate behavior:</p> <ul> <li>Being kind and courteous to others</li> <li>Collaborating with other community members</li> <li>Gracefully accepting constructive criticism</li> <li>Using welcoming and inclusive language</li> <li>Showing empathy towards other community members</li> </ul>"},{"location":"community/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, including this repository itself, conversations on any platforms officially connected to this project (such as in GitHub issues, emails or platforms like discord). It also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official social media account, or acting as an appointed representative at an online or offline event.</p> <p>All members involved with the project are expected to follow this Code of Conduct, no matter their position in the project's hierarchy, this Code of Conduct applies equally to contributors, maintainers and people seeking help/reporting bugs, etc.</p>"},{"location":"community/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Whenever a participant has made a mistake, we expect them to take responsibility for their actions. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and to do our best to right the wrong.</p> <p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, harmful, or otherwise undesirable.</p> <p>Community leaders have the right and responsibility to remove, edit or reject comments, commits, code, wiki edits, issues and other contributions within the enforcement scope that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p> <p>If you have experienced or witnessed unacceptable behavior constituting a code of conduct violation or have any other code of conduct concerns, please let us know and we will do our best to resolve this issue.</p>"},{"location":"community/code-of-conduct/#reporting-a-code-of-conduct-violation","title":"Reporting a Code of Conduct violation","text":"<p>If you think that someone is violating the Code of Conduct, you can report it to any repository maintainer, either by email or through a Discord DM. You should avoid using public channels for reporting these violations, and instead do so in private discussion with a maintainer.</p>"},{"location":"community/code-of-conduct/#sources","title":"Sources","text":"<p>The open-source community has an incredible amount of resources that people have freely provided to others and we all depend on these projects in many ways. This code of conduct article is no exception and there were many open source projects that has helped bring this code of conduct to existence. For that reason, we'd like to thank all of these communities and projects for keeping their content open and available to everyone, but most notably we'd like to thank the projects with established codes of conduct and diversity statements that we used as our inspiration. Below is the list these projects:</p> <ul> <li>Python: https://www.python.org/community/diversity/</li> <li>Contributor Covenant: https://www.contributor-covenant.org/</li> <li>Rust-lang: https://www.rust-lang.org/policies/code-of-conduct</li> <li>Code Fellows: https://github.com/codefellows/code-of-conduct</li> <li>Python Discord: https://www.pythondiscord.com/pages/code-of-conduct/</li> </ul>"},{"location":"community/code-of-conduct/#license","title":"License","text":"<p>All content of this page is licensed under a Creative Commons Attributions license.</p> <p>For more information about this license, see: https://creativecommons.org/licenses/by/3.0/</p>"},{"location":"community/license/","title":"License","text":"<p>This project is licensed under the GNU Lesser General Public License (LGPL) version 3.</p> <p>The LGPL license allows you to use mcproto as a library pretty much in any code-base, including in proprietary code-bases. However, if you wish to make a derivative project to mcproto itself, such a project will need to be licensed under LGPL as well.</p> Full LICENSE text LICENSE.txt<pre><code>                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n</code></pre> <p>Some parts of the project follow a different license. See the <code>LICENSE-THIRD-PARTY.txt</code> file, which lists all of these parts and their respective licenses</p> Full LICENSE-THIRD-PARTY text LICENSE-THIRD-PARTY.txt<pre><code>---------------------------------------------------------------------------------------------------\n                                            MIT License\nApplies to:\n    - Copyright (c) 2021 Python Discord\n      Copyright (C) 2022 Hassan Abouelela &lt;hassan@hassanamr.com&gt;\n      Copyright (C) 2022 Chris Lovering &lt;chris.lovering.95@gmail.com&gt;\n      Copyright (C) 2022 mbaruh &lt;mbaruh@hotmail.com&gt;\n      All rights reserved.\n        - mcproto/utils/version_map.py: portions of VersionMap._walk_submodules function\n    - Copyright (c) 2020 Nekokatt\n      Copyright (c) 2021-present davfsa\n      All rights reserved.\n        - .github/ISSUE_TEMPLATE/bug_report.yml: Template heavily inspired by original\n        - .github/ISSUE_TEMPLATE/feature_request.yml: Template heavily inspired by original\n        - .github/workflows/fragment-check.yml: Entire file\n        - .github/workflows/prepare-release.yml: Workflow heavily inspired by original\n        - .github/scripts/normalize_coverage.py: Entire file\n    - Copyright (c) 2015-present Rapptz\n      All rights reserved.\n        - docs/installation/version-guarantees.rst: Entire file\n    - Copyright (c) 2016-2024 Martin Donath\n      All rights reserved\n         - docs/contributing/reporting-a-bug.md: Majority of the file\n---------------------------------------------------------------------------------------------------\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n---------------------------------------------------------------------------------------------------\n                                 GNU LESSER GENERAL PUBLIC LICENSE\nApplies to:\n    - Copyright (c) 2022, Milo Weinberg &lt;iapetus011@gmail.com&gt;\n      All rights reserved.\n        - mcproto/packets/packet.py: GameState and PacketDirection enum classes\n---------------------------------------------------------------------------------------------------\nFulltext of the license can be seen in the LICENSE.txt file, as it matches the current license of\nthis project, this file just disclaims the copyrighted sections used in our codebase.\n\n---------------------------------------------------------------------------------------------------\n                                    Apache License version 2.0\nApplies to:\n    - Copyright (c) 2012 Ammar Askar\n      All rights reserved.\n        - mcproto/connection.py: write, read methods in all classes (not _write and _read though)\n        - mcproto/encryption.py: encrypt_token_and_secret, generate_shared_secret functions\n---------------------------------------------------------------------------------------------------\n\n\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"contributing/making-a-pr/","title":"Pull Requests","text":"<p>Welcome! If you're interested in contributing to mcproto, you've come to the right place. mcproto is an open-source project, and we welcome contributions from anyone eager to help out.</p> <p>To contribute, you can create a pull request on our GitHub repository. Your pull request will then be reviewed by our maintainers, and once approved, it will be merged into the main repository. Contributions can include bug fixes, documentation updates, or new features.</p> <p>Code quality requirements</p> <p>While we encourage and appreciate contributions, maintaining high code quality is crucial to us. That means you will need to adhere to our code quality standards. Contributions may be rejected if they do not meet these guidelines.</p>"},{"location":"contributing/making-a-pr/#get-assigned-to-the-issue","title":"Get assigned to the issue","text":"<p>The very first thing you will need to do is deciding what you actually want to work on. In all likelihood, you already have something in mind if you're reading this, however, if you don't, you're always free to check the opened GitHub issues. If you find anything interesting there that you'd wish to work on, leave a comment on that issue with something like: \"I'd like to work on this\".</p> <p>Even if you do have an idea already, we heavily recommend (though not require) that you first make an issue, this can be a bug report, but also a feature request, or something else. Once you made the issue, leave a: \"I'd like to work on this\" comment on it.</p> <p>Eventually, a maintainer will get back to you and you will be assigned to the issue. By getting assigned, you reserve the right to work on that given issue and it also prevents us (or someone else) from potentially working on the same thing that you're already addressing. This is also the reason why we recommend creating an issue first. Being assigned is a soft approval from us, giving you the green light to start coding.</p> <p>Of course, you are welcome to start working on the issue even before being officially assigned. However, please be aware that sometimes, we may choose not to pursue a certain feature / bugfix. In such cases, your work might not end up being used, which would be a shame.</p> <p>Minor tasks don't need an issue</p> <p>While we generally do encourage contributors to first create an issue and get assigned to it first. If you're just fixing a typo, improving the wording, or making some minor optimizations to the code, you can safely skip this step.</p> <p>The point of encouraging issues is to prevent needlessly wasting people's time. However, with these minor tasks, it might actually take you longer to create a full issue about the problem than it would to just submit a fix.</p> <p>There's therefore no point in cluttering the issue tracker with a bunch of small issues that can often be changed in just a few minutes.</p>"},{"location":"contributing/making-a-pr/#work-in-progress-prs","title":"Work in Progress PRs","text":"<p>Whenever you open a pull request that isn't yet ready to be reviewed and merged, you can mark it as a draft. This provides both visual and functional indicator that the PR isn't yet ready to be merged.</p> <p>Methods of marking PR as a draft:</p> When creating it After creation <p>Once your work is done and you think the PR is ready to be merged, mark it as Ready for review</p> <p></p>"},{"location":"contributing/making-a-pr/#contributing-guidelines","title":"Contributing guidelines","text":"<p>In order to make a successful contribution, it is required that you get familiar with our contributing guidelines.</p>"},{"location":"contributing/making-a-pr/#automated-checks","title":"Automated checks","text":"<p>The project includes various CI workflows that will run automatically for your pull request after every push and check your changed with various tools. These tools are here to ensure that our contributing guidelines are met and ensure good code quality of your PR.</p> <p>That said, you shouldn't rely on these CI workflows to let you know if you made a mistake, instead, you should run these tools on your own machine during the development. Many of these tools can fix the violations for you automatically and it will generally be a better experience for you. Running these tools locally will also prevent a bunch of \"Fix the CI\" commits, which just clutter the git history.</p> <p>Make sure to read our contributing guidelines thoroughly, as they describe how to use these tools and even how to have them run automatically before each commit, so you won't forget.</p> <p>Passing the CI workflows is a requirement in order to get your pull request merged. If a maintainer sees a PR that's marked as ready for review, but isn't passing the CI, we'll often refrain from even reviewing it, as we consider it incomplete. If you have a technical reason why your PR can't pass the CI, let us know in the PR description or a comment.</p>"},{"location":"contributing/making-a-pr/#code-review","title":"Code Review","text":"<p>All pull requests will need to be reviewed by at least one team member before merging. The reviewer will provide feedback and suggestions for improvement.</p> <p>Once a reviewer approves your pull request, it can be merged into the <code>main</code> branch.</p> How do I request a review? <p>Request a review from a team member by assigning them as a reviewer to your pull request.</p> <p>However, you can also just wait until we get to your PR, you don't need to assign a reviewer unless you want someone specific to review. Just make sure that your PR is marked as ready for review and not draft.</p>"},{"location":"contributing/making-a-pr/#giving-feedback","title":"Giving Feedback","text":"<p>If you wish, you can also provide some feedback on other PRs. Doing so is a great way to fill the time while you're waiting for your PR to be reviewed by us and you're also speeding up the process, as it reduces the amount of time we'd have to spend reviewing those other PRs before getting to yours.</p> <p>When reviewing a pull request, aim to be constructive and specific. Highlight areas that need improvement and suggest potential solutions. If you have any questions on concerns about something in the code, don't hesitate to ask the author for clarification.</p> <p>Focus on the following aspects during a code review:</p> <ul> <li>Correctness and functionality</li> <li>Code quality and readability</li> <li>Adherence to the project guidelines</li> </ul> Good Code Review Feedback <p>Here are some examples of a good code review feedback:</p> <pre><code>- Great work on the new function! The implementation looks good overall.\n- The tests cover most of the functionality, but it's are missing a test case for edge case X. Could you add a test for that?\n- The logic in the new function is somewhat complex. Consider breaking it into smaller functions for better clarity.\n- The new feature is well-implemented, but it would be great to add more inline comments to explain the logic, as\n  it isn't trivial to understand.\n- There's a small typo in the docstring. Could you correct it?\n- The configuration settings are hard-coded. Can you move them to a configuration file to make it easier to manage?\n</code></pre> <p>Always be respectful and considerate when giving feedback. Remember that the goal is to improve the code and help the author grow as a developer.</p> <p>Be Positive</p> <p>Don't forget to acknowledge the positive aspects of the contribution as well!</p>"},{"location":"contributing/reporting-a-bug/","title":"Bug reports","text":"<p>Mcproto is an actively maintained project that we constantly strive to improve. With a project of this siez and complexity, bugs may occur. If you think you have discovered a bug, you can help us by submitting an issue to our public issue tracker, following this guide.</p>"},{"location":"contributing/reporting-a-bug/#before-creating-an-issue","title":"Before creating an issue","text":"<p>Before opening a new issue with your bug report, please do the following things:</p>"},{"location":"contributing/reporting-a-bug/#upgrade-to-latest-version","title":"Upgrade to latest version","text":"<p>Chances are that the bug you discovered was already fixed in a subsequent version. Thus, before reporting an issue, ensure that you're running the latest version of mcproto.</p> <p>Bug fixes are not backported</p> <p>Please understand that only bugs that occur in the latest version of mcproto will be addressed. Also, to reduce duplicate efforts, fixes cannot be backported to earlier versions.</p>"},{"location":"contributing/reporting-a-bug/#search-for-existing-issues","title":"Search for existing issues","text":"<p>It's possible that the issue you're having was already reported. Please take some time and search the existing issues in the GitHub repository for your problem. If you do find an existing issue that matches the problem you're having, simply leave a  reaction instead (avoid commenting \"I have this issue too\" or similar, as that ultimately just clutters the discussion in that issue, but if you do think that you have something meaningful to add, please do).</p> <p>Note</p> <p>Make sure to also check the closed issues. By default, github issue search will start with: <code>is:issue is:open</code>, remove the <code>is:open</code> part to search all issues, not just the opened ones. It's possible that we seen this issue before, but closed the issue as something that we're unable to fix.</p>"},{"location":"contributing/reporting-a-bug/#creating-a-new-issue","title":"Creating a new issue","text":"<p>At this point, when you still haven't found a solution to your problem, we encourage you to create an issue. To do so, you can click here.</p>"},{"location":"contributing/reporting-a-bug/#writing-good-bug-reports","title":"Writing good bug reports","text":"<p>We have a GitHub issue template set up, which will guide you towards telling us everything that we need to know. However, for the best results, keep reading through this section. In here, we'll explain how a well formatted issue should look like in general and what it should contain.</p>"},{"location":"contributing/reporting-a-bug/#issue-title","title":"Issue Title","text":"<p>A good title is short and descriptive. It should be a one-sentence executive summary of the issue, so the impact and severity of the bug you want to report can be inferred right from the title.</p> Example Clear Ping packet has incorrect ID Wordy The Ping packet has an incorrect packet ID of 0, when it should be 1 Unclear Ping packet is incorrect Non-english El paquete ping tiene una identificaci\u00f3n incorrecta Useless Help"},{"location":"contributing/reporting-a-bug/#bug-description","title":"Bug description","text":"<p>Now, to the bug you want to report. Provide a clear, focused, specific and concise summary of the bug you encountered. Explain why you think this is a bug that should be reported to us. Adhere to the following principles:</p> <ol> <li>Explain the what, not the how \u2013 don't explain how to reproduce the bug here,    we're getting there. Focus on articulating the problem and its impact as clearly as possible.</li> <li>Keep it short and concise - if the bug can be precisely explained in one or two sentences, perfect. Don't    inflate it - maintainers and future users will be grateful for having to read less.</li> <li>Don't under-explain - don't leave out important details just to keep things short. While keeping things short is    important, if something is relevant, mention it. It is more important for us to have enough information to be able    to understand the bug, even if it means slightly longer bug report.</li> <li>One bug at a time - if you encounter several unrelated bugs, please create separate issues for them. Don't    report them in the same issue, as this makes it difficult for others when they're searching for existing issues and    also for us, since we can't mark such an issue as complete if only one of the bugs was fixed.</li> </ol> <p> Stretch goal \u2013 if you have a link to an existing page that describes the issue, or otherwise explains some of your claims, include it. Usually, this will be a https://wiki.vg link leading to the Minecraft protocol documentation for something.</p> <p> Stretch goal #2 \u2013 if you found a workaround or a way to fix the bug, you can help other users temporarily mitigate the problem before we maintainers can fix the bug in our code base.</p>"},{"location":"contributing/reporting-a-bug/#reproduction","title":"Reproduction","text":"<p>A minimal reproducible example is at the heart of every well-written bug report, as it allows us maintainers to instantly recreate the necessary conditions to inspect the bug and quickly find its root cause from there. It's a proven fact that issues with concise and small reproductions can be fixed much faster.</p> <p>Focus on creating a simple and small code snippet that we can run to see the bug. Do your best to avoid giving us large snippets or whole files just for the purpose of the reproducible example, do your best to reduce the amount of code as much as you can and try to avoid using external dependencies in the snippet (except for mcproto of course).</p> <p>Sometimes, the bug can't be described in terms of code snippets, such as when reporting a mistake in the documentation, in that case, provide a link to the documentation or whatever other relevant that will allows us to see the bug with minimal effort.</p>"},{"location":"contributing/reporting-a-bug/#next-steps","title":"Next steps","text":"<p>Once you submit the issue, the main part of reporting a bug is done, but things aren't completely over yet. You now have 2 choices:</p>"},{"location":"contributing/reporting-a-bug/#wait-for-us-to-get-to-the-problem","title":"Wait for us to get to the problem","text":"<p>If you don't wish to solve the bug yourself, all that remains is waiting for us to handle it.</p> <p>Please understand that we are all volunteers here and we work on the project simply the fun of it. This means that we may sometimes have other priorities in life or we just want to work on some more interesting tasks first. It might therefore take a while for us to get to your bug (don't worry though, in most cases, we're pretty quick). Even if things are slower, we kindly ask you to avoid posting comments like \"Any progress on this?\" as they are not helpful and create unnecessary clutter in the discussion.</p> <p>When we do address your issue, we might need further information from you. GitHub has a notification system, so once we respond, you will be notified there. Note that, by default, these notifications might not be forwarded to your email or elsewhere, so please check GitHub periodically for updates.</p> <p>Finally, when we fix your bug, we will mark the issue as closed (GitHub will notify you of this too). Once that happens, your bug should be fixed, but we appreciate it if you take the time to verify that everything is working correctly. If the issue persists, you can reopen the issue and let us know.</p> <p>Issues are fixed on the main branch</p> <p>Do note that when we close an issue, it means that we have fixed your bug in the <code>main</code> branch of the repository.   That doesn't necessarily mean the fix has been released on PyPI yet, so you might still need to wait for the next   release. Alternatively, you can also try the git installation to   get the project right from that latest <code>main</code> branch.</p>"},{"location":"contributing/reporting-a-bug/#attempt-to-solve-it-yourself","title":"Attempt to solve it yourself","text":"<p>Quote</p> <p>The fastest way to get something done is to avoid waiting on others.</p> <p>If you wish to try and tackle the bug yourself, let us know by commenting on the issue with something like \"I'd like to work on this\". This helps us avoid duplicate efforts and ensures that we don't work on something you're already addressing.</p> <p>Once a maintainer sees your comment, they will assign the issue to you. Being assigned is a soft approval from us, giving you the green light to start working.</p> <p>Of course, you are welcome to start working on the issue even before being officially assigned. However, please be aware that sometimes we choose not to fix certain bugs for specific reasons. In such cases, your work might not end up being used.</p> <p>Before starting your work though, make sure to also read our pull request guide.</p>"},{"location":"contributing/guides/","title":"Contributing guides &amp; guidelines","text":"<p>Welcome to the contributing guides &amp; guidelines for mcproto. This documentation is intended for our contributors, interested in writing or modifying mcproto itself. If you just wish to use mcproto in your project, you can safely skip this section.</p> <p>Mcproto is a relatively large project and maintaining it is no easy task. With a project like that, consistency and good code quality becomes very important to keep the code-base readable and bug-free. To achieve this, we have put together these guidelines that will explain the code style and coding practices that we expect our contributors to follow.</p> <p>This documentation will also include various guides that tell you how to set up our project for development and explain the automated tools that we use to improve our coding experience and enforce a bunch of the code style rules quickly and without the need for human review.</p>"},{"location":"contributing/guides/#the-golden-rules-of-contributing","title":"The Golden Rules of Contributing","text":"<p>These are the general rules which you should follow when contributing. You can glance over these and then go over the individual guides one by one, or use the references in these rules to get to the specific guide page explaining the rule.</p> <p>Note</p> <p>This list serves as a quick-reference rather than a full guide. Some of our guidelines aren't directly linked in these references at all and we heavily encourage you to go over each of the guide pages in the order they're listed in the docs.</p> <ol> <li>Lint before you push. We have multiple code linting rules, which define our general style of the code-base.    These are often enforced through certain tools, which you are expected to run before every push and ideally even    before every commit. The specifics of our linting rules are mentioned in our style guide.    Running all of these tools manually before every commit would however be quite annoying, so we use    pre-commit.</li> <li>Make great commits. Great commits should be atomic (do one thing only and do it well), with a commit message    that explaining what was done, and why. More on this here.</li> <li>Make an issue before the PR. Before you start working on your PR, open an issue and let us know what you're    planning. We described this further in our making a PR guide.</li> <li>Use assets licensed for public use. Whenever you're adding a static asset (e.g. images/video files/audio or    even code) that isn't owned/written by you, make sure it has a compatible license with our projects.</li> <li>Follow our Code of Conduct</li> </ol>"},{"location":"contributing/guides/#changes-to-these-guidelines","title":"Changes to these guidelines","text":"<p>While we're confident and happy with the current code style and tooling, we acknowledge that change is inevitable. New tools are constantly being developed, and we have already made significant updates to our code style in the past.</p> <p>Every project evolves over time, and these guidelines are no exception. This documentation is open to pull requests and changes from contributors. Just ensure that any updates to this document are in sync with the codebase. If you propose a code style change, you must apply that change throughout the codebase to maintain internal consistency.</p> <p>If you believe you have something valuable to add or change, please submit a pull request. For major style changes, we strongly encourage you to open an issue first, as we may not always agree with significant alterations. For minor clarity improvements or typo fixes, opening an issue isn't necessary.</p> <p>We tried to design our specifications to be straightforward and comprehensive, but we might not always succeed, as we're doing so from our perspective of already having extensive background knowledge. Therefore, we welcome any clarity improvements to the documentation. If you think you can explain something better, please contribute.</p>"},{"location":"contributing/guides/#footnotes","title":"Footnotes","text":"<p>We understand that going through all of these guidelines can be time-consuming and a lot to remember. However, we strongly encourage you to review them, especially if you haven't worked with these tools or followed such best practices before.</p> <p>Every page in this contributing guides category has an abstract at the top, summarizing its content. This allows you to quickly determine if you are already familiar with the topic or, if you're re-reading, to quickly recall what the page covers. Feel free to skip any guide pages if you're already familiar with what they cover.</p> <p>We believe these guides will be beneficial to you beyond our codebase, as they promote good coding practices and help make your code cleaner. You will likely be able to apply much of the knowledge you gain here to your own projects.</p>"},{"location":"contributing/guides/#disclaimer","title":"Disclaimer","text":"<p>These documents were inspired by Python Discord's CONTRIBUTING agreement.</p>"},{"location":"contributing/guides/changelog/","title":"Changelog","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/deprecations/","title":"Deprecations","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/docstrings/","title":"Docstring formatting","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/docstrings/#docstring-formatting-directive","title":"Docstring formatting directive","text":""},{"location":"contributing/guides/great-commits/","title":"Great commits","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/other-tools/","title":"Other tools","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/precommit/","title":"Pre-commit","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/setup/","title":"Setting things up","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"contributing/guides/setup/#setting-up-the-project","title":"Setting up the project","text":"Abstract <p>This guide describes the very basics of setting up our project.</p> <p>It explains how to use <code>poetry</code> to install the python dependencies for the project. After which it goes over using poetry (activating the virtual environment, keeping the dependencies up to date as we update them, adding / removing dependencies and poetry dependency group).</p>"},{"location":"contributing/guides/setup/#pre-requisites","title":"Pre-requisites","text":"<p>A basic knowledge of git and GitHub, alongside working within the terminal and running commands is a requirement to work on this project.</p> <p>This guide assumes you have already forked our repository, clonned it to your computer and created your own git branch to work on.</p> <p>If you wish to work from an already forked repository, make sure to check out the main branch and do a [<code>git pull</code>] to get your fork up to date. Now create your new branch.</p>"},{"location":"contributing/guides/setup/#poetry","title":"Poetry","text":"<p>This project uses <code>poetry</code>. Poetry is a tool for managing python dependencies in a reproducible way, ensuring that everyone is using the same versions. It creates virtual environments for each project, which ensures that your global dependencies won't clash with the project.</p> More about virtual environments <p>A python virtual environment is essentially a separate mini installation of python used purely for the project you're working on (as opposed to using your system-wide python installation for everything).</p> <p>The reason we do this is to avoid dependency conflicts. Consder this: Our project needs library \"foo\" at version 2.5.2, however, you also have another unrelated project, that also needs the \"foo\" library, but this project didn't yet update this dependency, and requires an older version of this library: 1.2.0. This is a problem, because our project won't work with a version that old, we're using some of the new features of that library, similarly, your project won't work with a newer version though.</p> <p>With a virtual environment, both projects will have their own isolated python installation, that only contains the dependencies listed for that project, avoiding any conflicts completely.</p> <p>You can create virtual environments manually, with the built-in <code>venv</code> python module, but poetry makes this much simpler. If you want to find out more about virutal environments, check the official python documentation.</p> <p>This means you will need to have poetry installed on your system to run our project. To do so, just follow their official documentation.</p>"},{"location":"contributing/guides/setup/#dependency-installation","title":"Dependency installation","text":"<p>Once installed, you will want to create a new environment for our project, with all of our dependencies installed. Open a terminal in the project's directory and run the following command:</p> <pre><code>poetry install\n</code></pre> <p>After running this command, the virtual environment will be populated with all of the dependencies that you will need for running &amp; developing the project.</p>"},{"location":"contributing/guides/setup/#activating-the-environment","title":"Activating the environment","text":"<p>The virtual environment that you just created will contain a bunch of executable programs, such as <code>ruff</code> (our linter). One of those executable programs is also <code>python</code>, which is the python interpreter for this environment, capable of using all of those dependencies installed in that environment.</p> <p>By default, when you run the <code>python</code> command, your machine will use the system-wide python installation though and the executables present in this environment will not be runnable at all. In order to make your terminal use the programs from this environment, instead of the global ones, you will need to \"activate\" the environment.</p> <p>Some IDEs/editors are capable of doing this automatically when you open the project, if your editor supports that, you should configure it to do so.</p> Configuring VSCode to use the poetry environment <p>TODO</p> <p>If your IDE doesn't have that option, or you just wish to work from the terminal, you can instead run:</p> <pre><code>poetry shell\n</code></pre> <p>Now you can start the IDE from your terminal, which should make it work within the poetry python environment.</p> <p>Execute a single command inside the virtual environment</p> <p>If you just want to urn a single command from the venv, without necessarily having to activate the environment (often useful in scripts), poetry provides a quick and simple way to do so. All you need to do is prefix any such command with <code>poetry run</code> (e.g. <code>poetry run ruff</code>).</p>"},{"location":"contributing/guides/setup/#keeping-your-dependencies-up-to-date","title":"Keeping your dependencies up to date","text":"<p>We often update the dependencies of mcproto to keep them up to date. Whenever we make such an update, you will need to update your virtual environment to prevent it from going out of date. An out of date environment could mean that you're using older versions of some libraries and what will run on your machine might not match what will run on other machines with the dependencies updated.</p> <p>Thankfully, poetry makes updating the dependencies very easy as all you have to do is re-run the installation command:</p> <pre><code>poetry install\n</code></pre> <p>It can sometimes be hard to know when you need to run the install command, in most cases, even if we did update something and you're still on an older version, nothing significant will actually happen, however, the moment you start seeing some errors when you try to run the project, or inconsistencies with the continuous integration workflows from your local runs, it's a good indication that your dependencies are probably out of date.</p> <p>Ideally, you should run this command as often as possible, if there aren't any new changes, it will simply exit instantly. You should be especially careful when switching git branches, as dependencies might have been changed (most likely a new dependency was introduced, or an old one got removed), so consider running this command whenever you switch to another branch, unless you know that branch didn't make any changes to the project dependencies.</p>"},{"location":"contributing/guides/setup/#poetry-dependency-groups","title":"Poetry dependency groups","text":"<p>Poetry has a really cool way of splitting up the dependencies that projects need into multiple groups. For example, you can have a group of dependencies for linting &amp; autoformatting, another group for documentation support, unit-testing, for releasing the project, etc.</p> <p>To see which dependencies belong to which group, you can check the <code>pyproject.toml</code> file for the <code>[tool.poetry.group.GROUP_NAME.dependencies]</code> sections.</p> <p>By default, <code>poetry install</code> will install all non-optional dependency groups. That means all development dependencies you should need will get installed.</p> <p>The reason why we use groups is because in some of our automated workflows, we don't always need all of the project dependencies and we can save time by only installing the group(s) that we need. It also provides a clean way to quickly see which dependencies are being used for what.</p> <p>The most important group is the <code>main</code> group. This group contains all runtime dependencies, which means without these dependencies, the project wouldn't be runnable at all. It is these libraries that will become the dependencies of our library when we make a release on PyPI.</p>"},{"location":"contributing/guides/setup/#installing-dependencies","title":"Installing dependencies","text":"<p>During the development, you may sometimes want to introduce a new library to the project, to do this, you will first need to decide which dependency group it should belong to. To do this, identify whether this new dependency will be required to run the project, or if it's just some tool / utility that's necessary only during the development.</p> <p>If it's a runtime dependency, all you need to do is run:</p> <pre><code>poetry add [name-of-your-dependency]\n</code></pre> <p>This will add the dependency to the <code>main</code> group.</p> <p>However, if you're working with a development dependency, you will want to go over the dependency groups we have (from <code>pyproject.toml</code>) and decide where it should belong. Once you figured that out, you can run:</p> <pre><code>poetry add --group [group-name] [name-of-your-dependency]\n</code></pre> <p>Note</p> <p>Sometimes, it might make sense to include the same dependency in multiple groups. (Though this is usually quite rare.)</p>"},{"location":"contributing/guides/setup/#uninstalling-dependencies","title":"Uninstalling dependencies","text":"<p>Similarly, we sometimes stop needing a certain dependency. Uninstalling is a very similar process to installation. First, find which group you want to remove this dependency from and then run:</p> <pre><code>poetry remove --group [group-name] [name-of-your-dependency]\n</code></pre>"},{"location":"contributing/guides/style-guide/","title":"Style Guide","text":"Abstract <p>This page describes how we use <code>ruff</code> to enforce a consistent code style in our project.</p> <p>For clarity and readability, adhering to a consistent code style across the whole project is very important. It is not unusual that style adjustments will be requested in pull requests.</p> <p>It is always a good practice to review the style of the existing code-base before and to adhere to that established style before adding something new. That applies even if it isn't the code style you generally prefer. (That said, if you think a code style change of some kind would be justified, feel free to open an issue about it and tell us why.)</p> <p>Quote</p> <p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.</p> <p>However, know when to be inconsistent -- sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask!</p> <p>\u2014 PEP 8, the general Style Guide for Python Code</p> Check out the PEP8 song <p>The Python Discord community have made an amazing song about PEP8, check it out here!</p>"},{"location":"contributing/guides/style-guide/#automatic-linting","title":"Automatic linting","text":"<p>As there is a lot of various code style rules we adhere to in our code base, describing all of them here would take way too long and it would be impossible to remember anyway. For that reason, we use automated tools to help us catch any code style violations automatically.</p> <p>Currently, we use <code>ruff</code> to enforce most of our code style requirements. That said, we do have some other tools that check the correctness of the code, we will describe those later.</p>"},{"location":"contributing/guides/style-guide/#ruff-linter-formatter","title":"Ruff linter &amp; formatter","text":"<p>Ruff is an all-in-one linter &amp; formatter solution, which aims to replace three previously very popular tools into a single package:</p> <ul> <li><code>flake8</code> linter</li> <li><code>isort</code> import sorter</li> <li><code>black</code> auto-formatter</li> </ul> Why pick ruff over the combination of these tools? <p>There were multiple reasons why we chose ruff instead of using the above tools individually, here's just some of them:</p> <ul> <li>Ruff is faster (written in rust! )</li> <li>A single tool is more convenient than 3 separate ones</li> <li>Ruff includes a lot of flake8 plugins with some great lint rules</li> <li>Ruff has a great community and is slowly managing to overtake these individual projects</li> <li>If you're already used to flake8, you'll feel right at home with ruff, it even has the same error codes (mostly)!</li> </ul> <p>You can check the ruff configuration we're using in <code>pyproject.toml</code> file, under the <code>[tool.ruff]</code> category (and it's subcategories). You can find which linter rules are enabled and which we choose to exclude, some file-specific overrides where the rules apply differently and a bunch of other configuration options.</p>"},{"location":"contributing/guides/style-guide/#linter","title":"Linter","text":"<p>To run ruff linter on the code, open the terminal in the project's root directory and run:</p> <pre><code>ruff check .\n</code></pre> <p>Don't forget to activate the poetry virtual environment before running ruff.</p> <p>Ruff is really smart and it can often automatically fix some of the style violations it found. To make ruff do that, you can add the <code>--fix</code> flag to the command:</p> <pre><code>ruff check --fix .\n</code></pre> <p>If you got a rule violation in your code and you don't understand what the rule's purpose is supposed to be / why we enforce it, you can use Ruff to show you some details about that rule. The explanation that ruff will give you will often even contain code examples. To achieve this, simply run:</p> <pre><code>ruff rule [rule-id]\n</code></pre> <p>With the <code>[rule-id]</code> being the rule you're interested in, for example <code>UP038</code>.</p> Use glow to render the markdown syntax from ruff rule command <p>The <code>ruff rule</code> command will output the rule explanation in markdown, however, since you're running this comand in a terminal, there won't be any helpful syntax highlighting for that by default.</p> <p>That's why I'd recommend using a markdown render such as <code>glow</code>. With it, you can pipe the output from ruff into it and have it produce a fancy colored output, that's much easier to read: <code>ruff rule UP038 | glow</code>.</p> <p>Alternatively, you can also find the rules and their description in the ruff documentation.</p>"},{"location":"contributing/guides/style-guide/#formatter","title":"Formatter","text":"<p>On top of being an amazing linter, ruff is also an automatic code formatter. That means ruff can actually make your code follow a proper and style automatically! It will just take your original unformatted (but valid) python code and edit it to meet our configured code style for you.</p> <p>To make ruff format your code, simply run:</p> <pre><code>ruff format .\n</code></pre>"},{"location":"contributing/guides/style-guide/#other-style-guidelines","title":"Other style guidelines","text":"<p>While <code>ruff</code> can do a lot, it can't do everything. There are still some guidelines that you will need to read over and apply manually. You will find these guides on the next pages of this documentation.</p>"},{"location":"contributing/guides/type-hints/","title":"Type Hints","text":"Abstract <p>This article explains what python type-hints are, how they can be enforced with the use of type checkers and the type checker of our choice: basedpyright and it's editor integration.</p> <p>Most people only know python as a dynamically typed language, that doesn't offer any kind of type safety. In the very days of python, this was true, however today, things are a bit different. Even though Python on it's own is still a dynamically typed language, it does actually support specifying \"type hints\" which can even be enforced by external tools called \"type checkers\". With those, we can achieve a (mostly) type safe experience while using Python.</p>"},{"location":"contributing/guides/type-hints/#regular-python","title":"Regular python","text":"<p>In regular python, as most people know it, you might end up writing a function like this:</p> <pre><code>def add(x, y):\n  return x + y\n</code></pre> <p>In this code, you have no idea what the type of <code>x</code> and <code>y</code> arguments should be. So, even though you may have intended for this function to only work with numbers (ints), it's actually entirely possible to use it with something else. For example, running <code>add(\"hello\", \"world)</code> will return <code>\"helloworld\"</code> because the <code>+</code> operator works on strings too.</p> <p>The point is, there's nothing telling you what the type of these parameters should be, and that could lead to misunderstandings. Even though in some cases, you can figure out what the type should these variables have purely based on their name alongside the name of the function, in most cases, it's not that easy. It often requires looking through the docs, or going over the actual source code of such function.</p> <p>Annoyingly, python won't even prevent you from passing in types that are definitely incorrect, like: <code>add(1, \"hi\")</code>. Running this would cause a <code>TypeError</code>, but unless you have unit-tests that actually run that code, you won't find out about this bug until it actually causes an issue and at that point, it might already be too late, since your code has crashed a production app.</p> <p>Clearly then, this isn't ideal.</p>"},{"location":"contributing/guides/type-hints/#type-hints_1","title":"Type-Hints","text":"<p>While python doesn't require it, there is in fact a way to add a \"hint\" that indicates what type should a given variable have. So, when we take the function from above, adding type-hints to it would result in something like this:</p> <pre><code>def add(x: int, y: int) -&gt; int:\n  return x + y\n</code></pre> <p>We've now made the types very explicit to the programmer, which means they'll no longer need to spend a bunch of time looking through the implementation of that function, or going through the documentation just to know how to use this function. Instead, the type hints will tell just you.</p> <p>This is incredibly useful, because most editors will be able to pick up these type hints, and show them to you while calling the function, so you know what to pass right away, without even having to look at the function definition where the type-hints are defined.</p> <p>Not only that, specifying a type-hint will greatly improve the development experience in your editor / IDE, because you'll get much better auto-completion. The thing is, if you have a parameter like <code>x</code>, but your editor doesn't know what type it should have, it can't really help you if you start typing <code>x.remove</code>, looking for the <code>removeprefix</code> function. However, if you tell your editor that <code>x</code> is a string (<code>x: str</code>), it will now be able to go through all of the methods that strings have, and show you those that start with <code>remove</code> (being <code>removeprefix</code> and <code>removesuffix</code>).</p> <p>This makes type-hints great at saving you time while developing, even though you have to do some additional work when specifying them.</p>"},{"location":"contributing/guides/type-hints/#runtime-behavior","title":"Runtime behavior","text":"<p>Even though type-hints are a part of the Python language, the interpreter doesn't actually care about them. That means that the interpreter doesn't do any optimizations or checking when you're running your code, even if you have a function like <code>add</code> that we have added type-hints to, code like <code>add(1, \"hi\")</code> will not cause any immediate errors.</p> <p>Most editors are configured very loosely when it comes to type-hints. That means they will show you these hints when you're working with the function, but they won't produce warnings when you pass in the wrong thing. That's why they're called \"type hints\", they're only hints that can help you out, but they aren't actually enforced.</p>"},{"location":"contributing/guides/type-hints/#enforcing-type-hints-type-checkers","title":"Enforcing type hints - Type Checkers","text":"<p>Even though python on it's own indeed doesn't enforce the type-hints you specify, there are tools that can run \"static\" checks against your code. A static check is a check that works with your code in it's textual form. It will read the contents of your python files without actually running that file and analyze it purely based on that text content.</p> <p>Using these tools will allow you to analyze your code for typing mistakes before you ever even run your program. That means having a function call like <code>add(1, \"hi\")</code> anywhere in your code would be detected and reported as an issue.</p> <p>There is a bunch of these tools available for python, but the most common ones are <code>pyright</code> and <code>mypy</code>.</p>"},{"location":"contributing/guides/type-hints/#basedpyright","title":"BasedPyright","text":"<p>The type checker that we use in our code-base is basedpyright. It's a fork of pyright which adds some extra checks and features and focuses more on the open-source community, than the official Microsoft owned Pyright.</p>"},{"location":"contributing/guides/type-hints/#editor-integration","title":"Editor Integration","text":"VSCodeNeovim <p>On vscode, you can simply install the BasedPyright extension from the marketplace.</p> <p>Note that this extension does collide with the commonly used Pylance extension, which is installed automatically alongside the Python extension and provide intellisense for Python. The reason BasedPyright collides with this extension is that Pylance actually uses pyright as a language server in the background, and as we mentioned, basedpyright is an alternative, so using both would cause duplicate errors. This means that you will need to disable Pylance, at least within our codebase.</p> <p>If you're using Neovim, I would recommend setting up LSP (Language Server Protocol) and installing basedpyright, as it has language server support built into it. You can achieve this with the <code>lspconfig</code> plugin. You can then use <code>mason-lspconfig</code> to install <code>basedpyright</code>, or manually configure <code>lspconfig</code> and use your system-wide <code>basedpyright</code> executable.</p>"},{"location":"contributing/guides/type-hints/#great-resources","title":"Great resources","text":"<p>While type hinting might seem very simple from the examples shown above, there is actually a fair bit to it, and if you never worked within a type checked code-base, you should definitely check out some of these resources, which go over the basics.</p> <ul> <li>Getting started with type hints in Python - a   blog post / tutorial by decorator-factory.</li> <li>Basics of static typing - part of the BasedPyright documentation</li> <li>Mypy documentation - very extensive documentation on various typing   concepts. (Some things are mypy focused, but most things will cary over to basedpyright too)</li> <li>Python documentation for the <code>typing</code> module - Python's standard   library contains a <code>typing</code> module, which holds a bunch of useful structures that we often use while working with   type-hints.</li> <li>PEP 484 - formal specification of type hints for the Python langauge</li> </ul>"},{"location":"contributing/guides/unit-tests/","title":"Unit Tests","text":"<p>Work In Progress</p> <p>This page is still being written. The content below (if any) may change.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#pypi-stable-version","title":"PyPI (stable) version","text":"<p>Mcproto is available on PyPI and can be installed like any other python library with:</p> pippoetryrye <pre><code>pip install mcproto\n</code></pre> <pre><code>poetry add mcproto\n</code></pre> <pre><code>rye add mcproto\n</code></pre>"},{"location":"installation/#latest-git-version","title":"Latest (git) version","text":"<p>Alternatively, you may want to install the latest available version, which is what you currently see in the <code>main</code> git branch. Although this method will actually work for any branch with a pretty straightforward change.</p> <p>This kind of installation should only be done if you wish to test some new unreleased features and it's likely that you will encounter bugs.</p> <p>That said, since mcproto is still in development, changes can often be made quickly and it can sometimes take a while for these changes to carry over to PyPI. So if you really want to try out that latest feature, this is the method you'll want.</p> <p>To install the latest mcproto version directly from the <code>main</code> git branch, use:</p> pippoetryrye <pre><code>pip install 'mcproto@git+https://github.com/py-mine/mcproto@main'\n</code></pre> <pre><code>poetry add 'git+https://github.com/py-mine/mcproto#main'\n</code></pre> <pre><code>rye add mcproto --git='https://github.com/py-mine/mcproto' --branch main\n</code></pre>"},{"location":"installation/changelog/","title":"Changelog","text":"<p>Major and minor releases also include the changes specified in prior development releases.</p> <p>Missing unreleased changes</p> <p>This changelog doesn't contain any unreleased (pending) changes, even if they are present in this version of the project documentation already. If you are interested in knowing what these changes are, you can take a look at the <code>changes/</code> directory of the project.</p> <p>In the future, we want to display these changes properly in this documentation, however, doing so requires running a command dynamically, and showing it's output here, which we currently don't support.</p>"},{"location":"installation/changelog/#version-050-2023-08-10","title":"Version 0.5.0 (2023-08-10)","text":""},{"location":"installation/changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li> <p>#130: Renamed \"shared_key\" field to \"shared_secret\" in <code>LoginEncryptionPacket</code>, following the official terminology.</p> </li> <li> <p>This is a breaking change, <code>LoginEncryptionPacket</code>'s <code>__init__</code> method now uses \"shared_secret\" keyword only argument, not \"shared_key\".</p> </li> <li>#130: The <code>LoginStart</code> packet now contains a (required) UUID field (which can be explicitly set to <code>None</code>).</li> <li>For some reason, this field was not added when the login packets were introduced initially, and while the UUID field can indeed be omitted in some cases (it is an optional filed), in vast majority of cases, it will be present, and we should absolutely support it.</li> <li>As this is a new required field, the <code>__init__</code> function of <code>LoginStart</code> now also expects this <code>uuid</code> keyword argument to be present, making this a breaking change.</li> <li>#159: Fix packet compression handling in the interaction methods.</li> </ul> <p>This fixes a bug that didn't allow for specifying an exact compression threshold that the server specified in <code>LoginSetCompression</code> packet, and instead only allowing to toggle between compression on/off, which doesn't really work as server doesn't expect compression for packets below that threshold.</p> <ul> <li><code>sync_write_packet</code>, <code>async_write_pakcet</code>, <code>sync_read_packet</code> and <code>async_read_packet</code> functions now take <code>compression_threshold</code> instead of <code>compressed</code> bool flag</li> <li>#161: <code>LoginEncryptionRequest</code> now uses <code>cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey</code> to hold the public key, instead of just pure <code>bytes</code>. Encoding and decoding of this key happens automatically during serialize/deserialize. This is a breaking change for anyone relying on the <code>public_key</code> field from this packet being <code>bytes</code>, and for anyone initializing this packet directly with <code>__init__</code>, which now expects <code>RSAPublicKey</code> instance instead.</li> </ul>"},{"location":"installation/changelog/#features","title":"Features","text":"<ul> <li>#129: Added a system for handling Minecraft authentication</li> <li>Yggdrasil system for unmigrated i.e. non-Microsoft accounts (supportng Minecraft accounts, and the really old Mojang accounts)</li> <li>Microsoft OAuth2 system (Xbox live) for migrated i.e. Microsoft accounts</li> <li>#160: Re-export the packet classes (or any other objects) from the gamestate modules (<code>mcproto.packets.handshaking</code>/<code>mcproto.packets.login</code>/...) directly. Allowing simpler imports (<code>from mcproto.packets.login import LoginStart</code> instead of <code>from mcproto.packets.login.login import LoginStart</code>)</li> <li>#161: Add support for encryption. Connection classes now have <code>enable_encryption</code> method, and some encryption related functions were added into a new <code>mcproto.encryption</code> module.</li> <li>#168: Add multiplayer related functionalities for requesting and checking joins for original (bought) minecraft accounts. This allows us to join online servers.</li> <li>#171: Add <code>Account.check</code> function, to verify that the access token in use is valid, and the data the Account instance has matches the data minecraft API has.</li> </ul>"},{"location":"installation/changelog/#bugfixes","title":"Bugfixes","text":"<ul> <li>#130: <code>LoginEncryptionResponse</code> now includes the <code>server_id</code> field. This field was previously hard-coded to 20 spaces (blank value), which is what all minecraft clients on minecraft 1.7.x or higher do, however with older versions, this field is set to 20 random characters, which we should respect.</li> <li>This is not a breaking change, as <code>server_id</code> will default to <code>None</code> in <code>LoginEncryptionResponse</code>'s <code>__init__</code>, meaning any existing code utilizing this packet will still work. It is purely an additional option.</li> <li>#167: Fix packet reading/writing when compression is enabled (use zlib as expected, instead of gzip which we were using before)</li> <li>#170: Preserve the call parameters and overloads in the typing signature of <code>mcproto.packets.packet_map.generate_packet_map</code> function. (This wasn't the case before, since <code>functools.lru_cache</code> doesn't preserve this data). Note that this loses on the typing information about the cache itself, as now it will appear to be a regular uncached function to the type-checker. We deemed this approach better to the alternative of no typing info for call arguments or overloads, but preserving cache info.</li> </ul>"},{"location":"installation/changelog/#documentation-improvements","title":"Documentation Improvements","text":"<ul> <li>#129: Mention lack of synchronous alternatives for certain functions (see issue #128)</li> <li>#139: Add a warning in version guarantees page, explaining pre-release guarantees (breaking changes in minor versions allowed)</li> <li>#141: Move installation instructions from README to Installation docs page</li> <li> <p>#144: Add attributetable internal sphinx extension for showing all attributes and methods for specified classes.</p> </li> <li> <p>This adds <code>attributetable</code> sphinx directive, which can be used before autodoc directive. This will create the attribute table, which will get dynamically moved right below the class definition from autodoc (using javascript).</p> </li> <li>This extension was implemented by discord.py, this is just re-using that code, with some modifications to fit our code style and to fit the documentation design (furo theme).</li> <li>Updated contributing guidelines (restructure and rewrite some categories, to make it more readable)</li> </ul>"},{"location":"installation/changelog/#internal-changes","title":"Internal Changes","text":"<ul> <li>#133: Enable enforcement of some optional pyright rules</li> <li>#153: Replace flake8 linter with ruff (mostly equivalent, but much faster and configurable from pyproject.toml)</li> <li> <p>#154: Enforce various new ruff linter rules:</p> </li> <li> <p>PGH: pygrep-hooks (replaces pre-commit version)</p> </li> <li>PL: pylint (bunch of typing related linter rules)</li> <li>UP: pyupgrade (forces use of the newest possible standards, depending on target version)</li> <li>RET: flake8-return (various linter rules related to function returns)</li> <li>Q: flake8-quotes (always use double quotes)</li> <li>ASYNC: flake8-async (report blocking operations in async functions)</li> <li>INT: flake-gettext (gettext related linting rules)</li> <li>PTH: flake8-use-pathlib (always prefer pathlib alternatives to the os ones)</li> <li>RUF: ruff custom rules (various additional rules created by the ruff linter team)</li> </ul>"},{"location":"installation/changelog/#version-040-2023-06-11","title":"Version 0.4.0 (2023-06-11)","text":""},{"location":"installation/changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>#41: Rename <code>mcproto.packets.abc</code> to <code>mcproto.packets.packet</code></li> <li>#116: Restructure the project, moving to a single protocol version model</li> <li>This change does NOT have a deprecation period, and will very likely break most existing code-bases. However this change is necessary, as multi-version support was unsustainable (see issue #45 for more details)</li> <li>Any packets and types will no longer be present in versioned folders (mcproto.packets.v757.xxx), but rather be directly in the parent directory (mcproto.packets.xxx).</li> <li>This change doesn't affect manual communication with the server, connection, and basic IO writers/readers remain the same.</li> </ul>"},{"location":"installation/changelog/#version-030-2023-06-08","title":"Version 0.3.0 (2023-06-08)","text":""},{"location":"installation/changelog/#features_1","title":"Features","text":"<ul> <li>#54: Add support for LOGIN state packets</li> <li><code>LoginStart</code></li> <li><code>LoginEncryptionRequest</code></li> <li><code>LoginEncryptionResponse</code></li> <li><code>LoginSuccess</code></li> <li><code>LoginDisconnect</code></li> <li><code>LoginPluginRequest</code></li> <li><code>LoginPluginResponse</code></li> <li><code>LoginSetCompression</code></li> </ul>"},{"location":"installation/changelog/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>#75: Increase the stack level of warnings shown on protocol version fallbacks</li> <li>#113: TCP connections now properly shut down the connection gracefully (TCP FIN)</li> </ul>"},{"location":"installation/changelog/#documentation-improvements_1","title":"Documentation Improvements","text":"<ul> <li>#2: Add Sphinx and basic docs layout</li> <li>#18: Rewrite all docstrings into proper Sphinx format, instead of using markdown.</li> <li>#27: Add changelog page to docs, linking <code>CHANGELOG.md</code>, including unreleased changes from fragments.</li> <li>#28: Use furo theme for the documentation</li> <li>#34: Add version guarantees page</li> <li>#40: Move code of conduct to the docs.</li> <li>Improve readability of the changelog readme (changes/README.md)</li> <li>Mention taskipy <code>changelog-preview</code> shorthand command</li> <li>Add category headers splitting things up, for better readability</li> <li>Explain how to express multiple changes related to a single goal in a changelog fragment.</li> <li>Include <code>CHANGELOG.md</code> file in project's distribution files.</li> </ul>"},{"location":"installation/changelog/#internal-changes_1","title":"Internal Changes","text":"<ul> <li>#12: Replace HassanAbouelela setup-python action with ItsDrike/setup-python in CI workflows</li> <li>#17: Start using codeclimate to monitor code coverage and it's changes</li> <li>#35: Add more tests</li> <li>#38: Replace our implementation of <code>SemanticVersion</code> with a community-maintained <code>semantic-version</code> package.</li> <li>#53: Mark all packet classes as <code>typing.final</code>, making the type-checker enforce existence of concrete implementations for all abstract methods.</li> <li>#112: Removed <code>codespell</code> linter. This proved too annoying, especially when we already have a lot of linters here. Spelling mistakes can simply be caught in the review process.</li> <li>#114: Use latest poetry version in CI workflows (remove version lock - at 1.3.1)</li> <li>The <code>documentation</code> category of changelog was renamed to shorter <code>docs</code></li> </ul>"},{"location":"installation/changelog/#version-020-2022-12-30","title":"Version 0.2.0 (2022-12-30)","text":""},{"location":"installation/changelog/#features_2","title":"Features","text":"<ul> <li>#14: Add <code>__slots__</code> to most classes in the project</li> <li>All connection classes are now slotted</li> <li>Classes in <code>mcproto.utils.abc</code> are now slotted</li> <li>Separate packet interaction functions into <code>mcproto.packets.interactions</code>, (though they're reexported in   <code>mcproto.packets</code>, so no breaking changes)</li> </ul>"},{"location":"installation/changelog/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>#14: Add missing <code>__slots__</code> to <code>ServerBoundPacket</code> and <code>ClientBoundPacket</code> subclasses, which inherited from slotted   <code>Packet</code>, but didn't themselves define <code>__slots__</code>, causing <code>__dict__</code> to be needlessly created.</li> <li>The error message produced by <code>RequiredParamsABCMixin</code> class when a required no MRO class variable isn't present now   includes a previously missing space, making it more readable.</li> </ul>"},{"location":"installation/changelog/#documentation-improvements_2","title":"Documentation Improvements","text":"<ul> <li>#7: Add and start keeping a changelog, managed by towncrier.</li> <li>#13: Add a security policy.</li> </ul>"},{"location":"installation/changelog/#internal-changes_2","title":"Internal Changes","text":"<ul> <li>#6: Rework deprecation system</li> <li>Drop support for date-based deprecations, versions work better</li> <li>Provide <code>deprecation_warn</code> function, which emits warnings directly, no need for a decorator</li> <li>Add a <code>SemanticVersion</code> class, supporting version comparisons</li> <li>If the project's version is already higher than the specified deprecation removal version, raise a DeprecationWarning     as a full exception (rather than just a warning).</li> <li>#7: Add towncrier for managing changelog</li> <li>#14: Add slotscheck, ensuring <code>__slots__</code> are defined properly everywhere.</li> <li>#14: Make <code>typing-extensions</code> a runtime dependency and use it directly, don't rely on <code>if typing.TYPE_CHECKING</code> blocks.</li> <li>#15: Add codespell tool, to automatically find spelling mistakes.</li> <li>Add README file into the <code>tests/</code> folder, explaining how we use unit-tests and some basics of testing.</li> <li>Add <code>CustomMockMixin</code> internal class, inheriting from <code>UnpropagatingMockMixin</code>, but also allowing to use <code>spec_set</code> as   class variable, as it will automatically pass it into <code>__init__</code> of the mock class.</li> <li>Add several new flake8 extensions, and rework flake8 config file</li> <li>Add support for specifying what child mock type to propagate in <code>UnpropagatingMockMixin</code> class (for unit-tests).</li> </ul> <p>The changelog was added during development of 0.2.0, so nothing prior is documented here. Try checking the GitHub releases, or git commit history directly.</p>"},{"location":"installation/version-guarantees/","title":"Version Guarantees","text":"<p>Pre-release phase</p> <p>Mcproto is currently in the pre-release phase (pre v1.0.0). During this phase, these guarantees will NOT be followed! This means that breaking changes can occur in minor version bumps. That said, micro version bumps are still strictly for bugfixes, and will not include any features or breaking changes.</p> <p>This library follows semantic versioning model, which means the major version is updated every time there is an incompatible (breaking) change made to the public API. However due to the fairly dynamic nature of Python, it can be hard to discern what can be considered a breaking change, and what isn't.</p> <p>First thing to keep in mind is that breaking changes only apply to publicly documented functions and classes. If it's not listed in the documentation here, it's an internal feature, that isn't considered a part of the public API, and thus is bound to change. This includes documented attributes that start with an underscore and documented API that is explicitly marked as internal.</p> <p>Note</p> <p>The examples below are non-exhaustive.</p>"},{"location":"installation/version-guarantees/#examples-of-breaking-changes","title":"Examples of Breaking Changes","text":"<ul> <li>Changing the default parameter value of a function to something else.</li> <li>Renaming (or removing) a function without an alias to the old function.</li> <li>Adding or removing parameters of a function.</li> <li>Removing deprecated alias to a renamed function.</li> </ul>"},{"location":"installation/version-guarantees/#examples-of-non-breaking-changes","title":"Examples of Non-Breaking Changes","text":"<ul> <li>Changing function's name, while providing a deprecated alias.</li> <li>Renaming (or removing) private underscored attributes.</li> <li>Adding an element into <code>__slots__</code> of a data class.</li> <li>Changing the behavior of a function to fix a bug.</li> <li>Changes in the typing definitions of the public API.</li> <li>Changes in the documentation.</li> <li>Modifying the internal protocol connection handling.</li> <li>Updating the dependencies to a newer version, major or otherwise.</li> </ul>"}]}