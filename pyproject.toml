[project]
name = "mcproto"
dynamic = ["version"] # handled by uv-dynamic-versioning
description = "Library providing easy interactions with minecraft servers"
authors = [{ name = "ItsDrike", email = "itsdrike@protonmail.com" }]
maintainers = [{ name = "ItsDrike", email = "itsdrike@protonmail.com" }]
license = "LGPL-3.0-or-later"
readme = "README.md"
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Games/Entertainment",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Networking",
  "Typing :: Typed",
]
keywords = ["minecraft", "protocol"]
requires-python = ">=3.9"
dependencies = [
  "asyncio-dgram>=2.2.0",
  "attrs>=25.3.0",
  "cryptography>=45.0.5",
  "httpx>=0.28.1",
  "packaging>=25.0",
  "typing-extensions>=4.14.1",
]

[project.urls]
Documentation = "https://py-mine.github.io/mcproto"
"Source code" = "https://github.com/py-mine/mcproto"

[tool.uv]
default-groups = ["dev"]

[dependency-groups]
dev = [
  "poethepoet>=0.36.0",
  { include-group = "lint" },
  { include-group = "test" },
  { include-group = "docs" },
]
docs = [
  "markdown-exec[ansi]>=1.11.0",
  "mike>=2.1.3",
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.16",
  "mkdocstrings-python-betterrefs>=1.0.2",
  "towncrier",                             # actual version is in the release group
]
lint = [
  "basedpyright>=1.31.1",
  "pre-commit>=4.2.0",
  "ruff>=0.12.7",
  "slotscheck>=0.19.1",
]
test = [
  "pytest>=8.4.1",
  "pytest-asyncio>=1.1.0",
  "pytest-cov>=6.2.1",
  "pytest-httpx>=0.35.0",
]
release = ["towncrier>=24.8.0", "uv-dynamic-versioning>=0.8.2"]

[tool.basedpyright]
pythonPlatform = "All"
pythonVersion = "3.9"
typeCheckingMode = "all"

# Diagnostic behavior settings
strictListInference = false
strictDictionaryInference = false
strictSetInference = false
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
deprecateTypingAliases = true      # only applies for python 3.9+
enableExperimentalFeatures = false
disableBytesTypePromotions = true

# Diagnostic rules
reportAny = false
reportExplicitAny = false
reportImplicitStringConcatenation = false
reportUnreachable = "hint"
reportUnusedParameter = "hint"
reportUnannotatedClassAttribute = false
reportUnknownArgumentType = false             # consider enabling
reportUnknownVariableType = false             # consider enabling
reportUnknownMemberType = false               # consider enabling
reportUnknownParameterType = false            # consider enabling
reportUnknownLambdaType = false               # consider enabling
reportMissingTypeStubs = "information"        # consider bumping to warning/error
reportUninitializedInstanceVariable = false   # until https://github.com/DetachHead/basedpyright/issues/491
reportIncompatibleUnannotatedOverride = false # until https://github.com/DetachHead/basedpyright/issues/1349
reportMissingParameterType = false            # ruff's flake8-annotations (ANN) already covers this + gives us more control

[tool.ruff]
target-version = "py39"
line-length = 119

[tool.ruff.lint]
select = ["ALL"]

ignore = [
  "C90", # mccabe
  "FBT", # flake8-boolean-trap
  "CPY", # flake8-copyright
  "EM",  # flake8-errmsg
  "SLF", # flake8-self
  "ARG", # flake8-unused-arguments
  "TD",  # flake8-todos
  "FIX", # flake8-fixme

  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D107", # Missing docstring in __init__
  "D203", # Blank line required before class docstring
  "D213", # Multi-line summary should start at second line (incompatible with D212)
  "D301", # Use r""" if any backslashes in a docstring
  "D417", # Missing argument descrition in the docstring

  "ANN002", # Missing type annotation for *args
  "ANN003", # Missing type annotation for **kwargs
  "ANN204", # Missing return type annotation for special method
  "ANN401", # Dynamically typed expressions (typing.Any) disallowed

  "SIM102", # use a single if statement instead of nested if statements
  "SIM108", # Use ternary operator {contents} instead of if-else-block

  "TC001", # Move application imports used only for annotations into a type-checking block
  "TC002", # Move 3rd-party imports used only for annotations into a type-checking block
  "TC003", # Move standard library imports used only for annotations into a type-checking block

  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO

  "PT011",   # pytest.raises without match parameter is too broad # TODO: Unignore this
  "TRY003",  # No f-strings in raise statements
  "EM101",   # No string literals in exception init
  "EM102",   # No f-strings in exception init
  "UP024",   # Using errors that alias OSError
  "PLR2004", # Using unnamed numerical constants
  "PGH003",  # Using specific rule codes in type ignores
  "E731",    # Don't asign a lambda expression, use a def
  "A005",    # Module name shadows a stdlib module

  # Redundant rules with ruff-format:
  "E111",   # Indentation of a non-multiple of 4 spaces
  "E114",   # Comment with indentation  of a non-multiple of 4 spaces
  "E117",   # Cheks for over-indented code
  "D206",   # Checks for docstrings indented with tabs
  "D300",   # Checks for docstring that use ''' instead of """
  "Q000",   # Checks of inline strings that use wrong quotes (' instead of ")
  "Q001",   # Multiline string that use wrong quotes (''' instead of """)
  "Q002",   # Checks for docstrings that use wrong quotes (''' instead of """)
  "Q003",   # Checks for avoidable escaped quotes ("\"" -> '"')
  "COM812", # Missing trailing comma (in multi-line lists/tuples/...)
  "COM819", # Prohibited trailing comma (in single-line lists/tuples/...)
  "ISC001", # Single line implicit string concatenation ("hi" "hey" -> "hihey")
  "ISC002", # Multi line implicit string concatenation
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = [
  "ANN",  # flake8-annotations
  "S101", # Use of assert
]
"docs/scripts/*" = [
  "INP",  # allow implicit namespace (pep 420)
  "T201", # allow prints
]
".github/scripts/*" = [
  "D",   # pydocstyle
  "INP", # allow implicit namespace (pep 420)
]

[tool.ruff.lint.isort]
order-by-type = false
case-sensitive = true
combine-as-imports = true

# Redundant rules with ruff-format
force-single-line = false       # forces all imports to appear on their own line
force-wrap-aliases = false      # Split imports with multiple members and at least one alias
lines-after-imports = -1        # The number of blank lines to place after imports
lines-between-types = 0         # Number of lines to place between "direct" and import from imports
split-on-trailing-comma = false # if last member of multiline import has a comma, don't fold it to single line

[tool.ruff.lint.pylint]
max-args = 20
max-branches = 20
max-returns = 20
max-statements = 250

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
line-ending = "lf"

[tool.pytest.ini_options]
minversion = "6.0"
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "--strict-markers --cov --no-cov-on-fail"

[tool.coverage.report]
precision = 2
fail_under = 20
show_missing = true
skip_covered = false
skip_empty = false
sort = "cover"
exclude_lines = [
  "\\#\\s*pragma: no cover",
  "^\\s*if (typing\\.)?TYPE_CHECKING:",
  "^\\s*@(abc\\.)?abstractmethod",
  "^\\s*@(typing\\.)?overload",
  "^\\s*def __repr__\\(",
  "^\\s*class .*\\bProtocol\\):",
  "^\\s*raise NotImplementedError",
  "^\\s*return NotImplemented",
  "^\\s*\\.\\.\\.",
]

[tool.coverage.run]
relative_files = true
parallel = true
branch = true
timid = false
source = ["mcproto"]

[tool.towncrier]
package = "mcproto"
directory = "changes"
template = "changes/.template.rst"
ignore = [".template.rst"]
filename = "CHANGELOG.md"
issue_format = "[#{issue}](https://github.com/py-mine/mcproto/issues/{issue})"
orphan_prefix = "+" # Use '+' instead of number for fragments not connected to any PR
underlines = [2, 3] # We use this for heading levels (see template file)
type = [
  { name = "Breaking Changes", directory = "breaking", showcontent = true },
  { name = "Deprecation", directory = "deprecation", showcontent = true },
  { name = "Features", directory = "feature", showcontent = true },
  { name = "Bugfixes", directory = "bugfix", showcontent = true },
  { name = "Documentation Improvements", directory = "docs", showcontent = true },
  { name = "Internal Changes", directory = "internal", showcontent = true },
]

[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = true
exclude-modules = '''
(
  ^test  # ignore any tests
  |^.github/scripts  # Ignore any CI scripts
  |^mcproto\.utils\.version  # Dataclasses below python 3.10 don't support __slots__ due to default value fields being treated as classvars.
)
'''

[tool.poe.tasks]
basedpyright = "basedpyright --warnings ."
ruff = "ruff check --fix ."
ruff-format = "ruff format ."
slotscheck = "slotscheck -m mcproto"
pre-commit = "pre-commit run --all-files"
test = "pytest -v --failed-first"
retest = "pytest -v --last-failed"
changelog-preview = "towncrier build --draft --version next"
docs = "mkdocs serve"

[tool.poe.tasks.build]
cmd = "uv build"
help = "Builds the whl and tar.gz distributions"

[tool.poe.tasks.release]
cmd = "uv publish"
deps = ["pre-commit", "test", "build"]
help = "Requires all the checks to pass before building and publishing"

[tool.poe.tasks._pr_number]
cmd = "gh pr view --json number -q .number"
help = "Get the number of this PR (for current branch)"

[tool.poe.tasks.changelog-this]
cmd = "towncrier create ${PR_NUMBER}.${FRAGMENT_TYPE}.md"
args = [
  { name = "FRAGMENT_TYPE", positional = true, type = "string", required = true },
]
uses = { PR_NUMBER = "_pr_number" }
help = "Create a changelog fragment for this PR (uses github CLI to get PR number); use like: poe changelog-this feature -- -c \"My cool feature\""


[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"
