from __future__ import annotations

######################################################################
# This file is automatically generated by the entity generator script.
#     You can modify it by changing what you want in the script.
######################################################################
from mcproto.types.entity.enums import Direction, DragonPhase, Pose, SnifferState

__all__ = [
    "AbstractArrowEM",
    "AbstractFishEM",
    "AbstractGolemEM",
    "AbstractHorseEM",
    "AbstractIllagerEM",
    "AbstractMinecartContainerEM",
    "AbstractMinecartEM",
    "AbstractSkeletonEM",
    "AbstractVehicleEM",
    "AbstractVillagerEM",
    "AgeableMobEM",
    "AmbientCreatureEM",
    "AnimalEM",
    "AreaEffectCloudEM",
    "ArmorStandEM",
    "ArrowEM",
    "AxolotlEM",
    "BasePiglinEM",
    "BatEM",
    "BeeEM",
    "BlazeEM",
    "BlockDisplayEM",
    "BoatEM",
    "CamelEM",
    "CatEM",
    "ChestBoatEM",
    "ChestedHorseEM",
    "ChickenEM",
    "CodEM",
    "CowEM",
    "CreeperEM",
    "Direction",
    "DisplayEM",
    "DolphinEM",
    "DonkeyEM",
    "DragonFireballEM",
    "DragonPhase",
    "DrownedEM",
    "ElderGuardianEM",
    "EndCrystalEM",
    "EnderDragonEM",
    "EndermanEM",
    "EndermiteEM",
    "EntityEM",
    "EntityMetadata",
    "EvokerEM",
    "EvokerFangsEM",
    "EyeOfEnderEM",
    "FallingBlockEM",
    "FireballEM",
    "FireworkRocketEM",
    "FishingHookEM",
    "FlyingEM",
    "FoxEM",
    "FrogEM",
    "GhastEM",
    "GiantEM",
    "GlowingItemFrameEM",
    "GoatEM",
    "GuardianEM",
    "HoglinEM",
    "HorseEM",
    "HuskEM",
    "IllusionerEM",
    "InteractionEM",
    "IronGolemEM",
    "ItemDisplayEM",
    "ItemEntityEM",
    "ItemFrameEM",
    "LivingEntityEM",
    "LlamaEM",
    "LlamaSpitEM",
    "MinecartChestEM",
    "MinecartCommandBlockEM",
    "MinecartEM",
    "MinecartFurnaceEM",
    "MinecartHopperEM",
    "MinecartSpawnerEM",
    "MinecartTNTEM",
    "MobEM",
    "MonsterEM",
    "MooshroomEM",
    "MuleEM",
    "OcelotEM",
    "PaintingEM",
    "PandaEM",
    "ParrotEM",
    "PathfinderMobEM",
    "PhantomEM",
    "PigEM",
    "PiglinBruteEM",
    "PiglinEM",
    "PillagerEM",
    "PlayerEM",
    "PolarBearEM",
    "Pose",
    "PrimedTntEM",
    "PufferFishEM",
    "RabbitEM",
    "RaiderEM",
    "RavagerEM",
    "SalmonEM",
    "SheepEM",
    "ShulkerEM",
    "SilverfishEM",
    "SkeletonEM",
    "SkeletonHorseEM",
    "SlimeEM",
    "SmallFireballEM",
    "SnifferEM",
    "SnifferState",
    "SnowGolemEM",
    "SpectralArrowEM",
    "SpellcasterIllagerEM",
    "SpiderEM",
    "SquidEM",
    "StrayEM",
    "StriderEM",
    "TadpoleEM",
    "TameableAnimalEM",
    "TextDisplayEM",
    "ThrownEggEM",
    "ThrownEnderPearlEM",
    "ThrownExperienceBottleEM",
    "ThrownItemProjectileEM",
    "ThrownPotionEM",
    "ThrownSnowballEM",
    "ThrownTridentEM",
    "TraderLlamaEM",
    "TropicalFishEM",
    "TurtleEM",
    "VexEM",
    "VillagerEM",
    "VindicatorEM",
    "WanderingTraderEM",
    "WardenEM",
    "WaterAnimalEM",
    "WitchEM",
    "WitherEM",
    "WitherSkeletonEM",
    "WitherSkullEM",
    "WolfEM",
    "ZoglinEM",
    "ZombieEM",
    "ZombieHorseEM",
    "ZombieVillagerEM",
    "ZombifiedPiglinEM",
]

from typing import Any, ClassVar

from mcproto.types.chat import TextComponent
from mcproto.types.entity.metadata import EntityMetadata, entry, proxy
from mcproto.types.entity.metadata_types import (
    BlockStateEME,
    BooleanEME,
    ByteEME,
    CatVariantEME,
    DirectionEME,
    DragonPhaseEME,
    FloatEME,
    FrogVariantEME,
    Masked,
    NBTagEME,
    OptBlockStateEME,
    OptPositionEME,
    OptUUIDEME,
    OptVarIntEME,
    PaintingVariantEME,
    ParticleEME,
    PoseEME,
    PositionEME,
    QuaternionEME,
    RotationEME,
    SlotEME,
    SnifferStateEME,
    StringEME,
    TextComponentEME,
    VarIntEME,
    VarLongEME,
    Vector3EME,
    VillagerDataEME,
)
from mcproto.types.nbt import EndNBT, NBTag
from mcproto.types.quaternion import Quaternion
from mcproto.types.slot import Slot, SlotData
from mcproto.types.uuid import UUID
from mcproto.types.vec3 import Position, Vec3


class EntityEM(EntityMetadata):
    """Base for all Entity classes.

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _entity_flags: ClassVar[int] = entry(ByteEME, 0)
    is_on_fire: bool = proxy(_entity_flags, Masked, mask=0x1)
    is_crouching: bool = proxy(_entity_flags, Masked, mask=0x2)
    is_riding: bool = proxy(_entity_flags, Masked, mask=0x4)
    is_sprinting: bool = proxy(_entity_flags, Masked, mask=0x8)
    is_swimming: bool = proxy(_entity_flags, Masked, mask=0x10)
    is_invisible: bool = proxy(_entity_flags, Masked, mask=0x20)
    is_glowing: bool = proxy(_entity_flags, Masked, mask=0x40)
    is_flying: bool = proxy(_entity_flags, Masked, mask=0x80)
    air: int = entry(VarIntEME, 300)
    custom_name: str = entry(StringEME, "")
    is_custom_name_visible: bool = entry(BooleanEME, False)
    is_silent: bool = entry(BooleanEME, False)
    no_gravity: bool = entry(BooleanEME, False)
    pose: Pose = entry(PoseEME, Pose.STANDING)
    ticks_frozen: int = entry(VarIntEME, 0)

    __slots__ = ()


class InteractionEM(EntityEM):
    """Entity that can be interacted with.

    :param width: The width of the entity.
    :type width: float, optional, default: 1.0
    :param height: The height of the entity.
    :type height: float, optional, default: 1.0
    :param responsive: Whether the entity can be interacted with/attached
    :type responsive: bool, optional, default: False

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    width: float = entry(FloatEME, 1.0)
    height: float = entry(FloatEME, 1.0)
    responsive: bool = entry(BooleanEME, False)

    __slots__ = ()


class DisplayEM(EntityEM):
    """Entity that are used to render something on the client.

    https://minecraft.wiki/w/Display

    :param interpolation_delay: Delay before starting interpolation.
        If 0, interpolation starts immediately.(doesn't exist in newest snapshot)
    :type interpolation_delay: int, optional, default: 0
    :param interpolation_translation_duration: Transformation interpolation duration.
    :type interpolation_translation_duration: int, optional, default: 0
    :param interpolation_rotation_duration: Rotation interpolation duration.
    :type interpolation_rotation_duration: int, optional, default: 0
    :param translation: Translation vector
    :type translation: :class:`Vec3`, optional, default: :attr:`Vec3(0.0, 0.0, 0.0)`
    :param scale: Scaling vector
    :type scale: :class:`Vec3`, optional, default: :attr:`Vec3(1.0, 1.0, 1.0)`
    :param rotation_left: See :attr:`rotation_right`
    :type rotation_left: :class:`Quaternion`, optional, default: :attr:`Quaternion(0.0, 0.0, 0.0, 1.0)`
    :param rotation_right: Initial rotation. This tag corresponds to the right-singular vector matrix after the
        matrix singular value decomposition.
    :type rotation_right: :class:`Quaternion`, optional, default: :attr:`Quaternion(0.0, 0.0, 0.0, 1.0)`
    :param billboard_constraint: Billboard Constraints (0 = FIXED, 1 = VERTICAL, 2 = HORIZONTAL, 3 = CENTER)
        Controls if this entity should pivot to face player when rendered.
    :type billboard_constraint: int, optional, default: 0
    :param brightness_override: Brightness override (blockLight << 4 | skyLight << 20). By default the brightness
        value is calculated from the light level of the block the entity is in.
    :type brightness_override: int, optional, default: -1
    :param view_range: View range
    :type view_range: float, optional, default: 1.0
    :param shadow_radius: Shadow radius. Value is treated as 64 when higher than 64.
        If less than or equal to 0, the entity has no shadow. Interpolated
    :type shadow_radius: float, optional, default: 0.0
    :param shadow_strength: Shadow strength. Interpolated
    :type shadow_strength: float, optional, default: 0.0
    :param width: The maximum width of the entity. Rendering culling bounding box spans horizontally
        `width/2` from entity position, and the part beyond will be culled. If set to 0, no culling on
        both vertical and horizontal directions.
    :type width: float, optional, default: 0.0
    :param height: The maximum height of the entity. Rendering culling bounding box spans vertically
        `y` to `y+height`, and the part beyond will be culled. If set to 0, no culling on both
        vertical and horizontal directions.
    :type height: float, optional, default: 0.0
    :param glow_color_override: Overrides the glow border color. If 0, uses the color of the team that the display
        entity is in.
    :type glow_color_override: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    interpolation_delay: int = entry(VarIntEME, 0)
    interpolation_translation_duration: int = entry(VarIntEME, 0)
    interpolation_rotation_duration: int = entry(VarIntEME, 0)
    translation: Vec3 = entry(Vector3EME, Vec3(0.0, 0.0, 0.0))
    scale: Vec3 = entry(Vector3EME, Vec3(1.0, 1.0, 1.0))
    rotation_left: Quaternion = entry(QuaternionEME, Quaternion(0.0, 0.0, 0.0, 1.0))
    rotation_right: Quaternion = entry(QuaternionEME, Quaternion(0.0, 0.0, 0.0, 1.0))
    billboard_constraint: int = entry(ByteEME, 0)
    brightness_override: int = entry(VarIntEME, -1)
    view_range: float = entry(FloatEME, 1.0)
    shadow_radius: float = entry(FloatEME, 0.0)
    shadow_strength: float = entry(FloatEME, 0.0)
    width: float = entry(FloatEME, 0.0)
    height: float = entry(FloatEME, 0.0)
    glow_color_override: int = entry(VarIntEME, 0)

    __slots__ = ()


class BlockDisplayEM(DisplayEM):
    """Entity that are used to render a block on the client as a Display entity.

    https://minecraft.wiki/w/Display#Block_Displays

    :param block: The block state to display. Default is air.
    :type block: int, optional, default: 0

    Inherited from :class:`DisplayEM`:

    :param interpolation_delay: Delay before starting interpolation.
        If 0, interpolation starts immediately.(doesn't exist in newest snapshot)
    :type interpolation_delay: int, optional, default: 0
    :param interpolation_translation_duration: Transformation interpolation duration.
    :type interpolation_translation_duration: int, optional, default: 0
    :param interpolation_rotation_duration: Rotation interpolation duration.
    :type interpolation_rotation_duration: int, optional, default: 0
    :param translation: Translation vector
    :type translation: :class:`Vec3`, optional, default: :attr:`Vec3(0.0, 0.0, 0.0)`
    :param scale: Scaling vector
    :type scale: :class:`Vec3`, optional, default: :attr:`Vec3(1.0, 1.0, 1.0)`
    :param rotation_left: See :attr:`rotation_right`
    :type rotation_left: :class:`Quaternion`, optional, default: :attr:`Quaternion(0.0, 0.0, 0.0, 1.0)`
    :param rotation_right: Initial rotation. This tag corresponds to the right-singular vector matrix after the
        matrix singular value decomposition.
    :type rotation_right: :class:`Quaternion`, optional, default: :attr:`Quaternion(0.0, 0.0, 0.0, 1.0)`
    :param billboard_constraint: Billboard Constraints (0 = FIXED, 1 = VERTICAL, 2 = HORIZONTAL, 3 = CENTER)
        Controls if this entity should pivot to face player when rendered.
    :type billboard_constraint: int, optional, default: 0
    :param brightness_override: Brightness override (blockLight << 4 | skyLight << 20). By default the brightness
        value is calculated from the light level of the block the entity is in.
    :type brightness_override: int, optional, default: -1
    :param view_range: View range
    :type view_range: float, optional, default: 1.0
    :param shadow_radius: Shadow radius. Value is treated as 64 when higher than 64.
        If less than or equal to 0, the entity has no shadow. Interpolated
    :type shadow_radius: float, optional, default: 0.0
    :param shadow_strength: Shadow strength. Interpolated
    :type shadow_strength: float, optional, default: 0.0
    :param width: The maximum width of the entity. Rendering culling bounding box spans horizontally
        `width/2` from entity position, and the part beyond will be culled. If set to 0, no culling on
        both vertical and horizontal directions.
    :type width: float, optional, default: 0.0
    :param height: The maximum height of the entity. Rendering culling bounding box spans vertically
        `y` to `y+height`, and the part beyond will be culled. If set to 0, no culling on both
        vertical and horizontal directions.
    :type height: float, optional, default: 0.0
    :param glow_color_override: Overrides the glow border color. If 0, uses the color of the team that the display
        entity is in.
    :type glow_color_override: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    block: int = entry(BlockStateEME, 0)

    __slots__ = ()


class ItemDisplayEM(DisplayEM):
    """Entity that are used to render an item on the client as a Display entity.

    https://minecraft.wiki/w/Display#Item_Displays

    :param item: The item to display. Default is an empty slot.
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`
    :param display_type: Display type: (NONE, THIRD_PERSON_LEFT_HAND, THIRD_PERSON_RIGHT_HAND,
        FIRST_PERSON_LEFT_HAND, FIRST_PERSON_RIGHT_HAND, HEAD, GUI, GROUND, FIXED).
    :type display_type: int, optional, default: 0

    Inherited from :class:`DisplayEM`:

    :param interpolation_delay: Delay before starting interpolation.
        If 0, interpolation starts immediately.(doesn't exist in newest snapshot)
    :type interpolation_delay: int, optional, default: 0
    :param interpolation_translation_duration: Transformation interpolation duration.
    :type interpolation_translation_duration: int, optional, default: 0
    :param interpolation_rotation_duration: Rotation interpolation duration.
    :type interpolation_rotation_duration: int, optional, default: 0
    :param translation: Translation vector
    :type translation: :class:`Vec3`, optional, default: :attr:`Vec3(0.0, 0.0, 0.0)`
    :param scale: Scaling vector
    :type scale: :class:`Vec3`, optional, default: :attr:`Vec3(1.0, 1.0, 1.0)`
    :param rotation_left: See :attr:`rotation_right`
    :type rotation_left: :class:`Quaternion`, optional, default: :attr:`Quaternion(0.0, 0.0, 0.0, 1.0)`
    :param rotation_right: Initial rotation. This tag corresponds to the right-singular vector matrix after the
        matrix singular value decomposition.
    :type rotation_right: :class:`Quaternion`, optional, default: :attr:`Quaternion(0.0, 0.0, 0.0, 1.0)`
    :param billboard_constraint: Billboard Constraints (0 = FIXED, 1 = VERTICAL, 2 = HORIZONTAL, 3 = CENTER)
        Controls if this entity should pivot to face player when rendered.
    :type billboard_constraint: int, optional, default: 0
    :param brightness_override: Brightness override (blockLight << 4 | skyLight << 20). By default the brightness
        value is calculated from the light level of the block the entity is in.
    :type brightness_override: int, optional, default: -1
    :param view_range: View range
    :type view_range: float, optional, default: 1.0
    :param shadow_radius: Shadow radius. Value is treated as 64 when higher than 64.
        If less than or equal to 0, the entity has no shadow. Interpolated
    :type shadow_radius: float, optional, default: 0.0
    :param shadow_strength: Shadow strength. Interpolated
    :type shadow_strength: float, optional, default: 0.0
    :param width: The maximum width of the entity. Rendering culling bounding box spans horizontally
        `width/2` from entity position, and the part beyond will be culled. If set to 0, no culling on
        both vertical and horizontal directions.
    :type width: float, optional, default: 0.0
    :param height: The maximum height of the entity. Rendering culling bounding box spans vertically
        `y` to `y+height`, and the part beyond will be culled. If set to 0, no culling on both
        vertical and horizontal directions.
    :type height: float, optional, default: 0.0
    :param glow_color_override: Overrides the glow border color. If 0, uses the color of the team that the display
        entity is in.
    :type glow_color_override: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(None))
    display_type: int = entry(ByteEME, 0)

    __slots__ = ()


class TextDisplayEM(DisplayEM):
    """Entity that are used to render text on the client as a Display entity.

    https://minecraft.wiki/w/Display#Text_Displays

    :param text: The text to display. Default is an empty text component.
    :type text: :class:`TextComponent`, optional, default: :attr:`TextComponent("")`
    :param line_width: : Maximum line width used to split lines (note: new line can also
        be added with \\n characters).
    :type line_width: int, optional, default: 200
    :param background_color: Background color of the text. Default is 0x40000000.
    :type background_color: int, optional, default: 1073741824
    :param has_shadow: Whether the text is displayed with shadow. (this affects :attr:`_display_flags`)
    :type has_shadow: bool, optional
    :param is_see_through: Whether the text is displayed as see-through. (this affects :attr:`_display_flags`)
    :type is_see_through: bool, optional
    :param use_default_background: Whether to use the default background color for the text
        display. (this affects :attr:`_display_flags`)
    :type use_default_background: bool, optional
    :param align_left: Whether the text is aligned to the left.
        Has priority over right (see also :attr:`align_right`) (this affects :attr:`_display_flags`)
    :type align_left: bool, optional
    :param align_right: Whether the text is aligned to the right.
        Set both to false for center alignment. (this affects :attr:`_display_flags`)
    :type align_right: bool, optional

    Inherited from :class:`DisplayEM`:

    :param interpolation_delay: Delay before starting interpolation.
        If 0, interpolation starts immediately.(doesn't exist in newest snapshot)
    :type interpolation_delay: int, optional, default: 0
    :param interpolation_translation_duration: Transformation interpolation duration.
    :type interpolation_translation_duration: int, optional, default: 0
    :param interpolation_rotation_duration: Rotation interpolation duration.
    :type interpolation_rotation_duration: int, optional, default: 0
    :param translation: Translation vector
    :type translation: :class:`Vec3`, optional, default: :attr:`Vec3(0.0, 0.0, 0.0)`
    :param scale: Scaling vector
    :type scale: :class:`Vec3`, optional, default: :attr:`Vec3(1.0, 1.0, 1.0)`
    :param rotation_left: See :attr:`rotation_right`
    :type rotation_left: :class:`Quaternion`, optional, default: :attr:`Quaternion(0.0, 0.0, 0.0, 1.0)`
    :param rotation_right: Initial rotation. This tag corresponds to the right-singular vector matrix after the
        matrix singular value decomposition.
    :type rotation_right: :class:`Quaternion`, optional, default: :attr:`Quaternion(0.0, 0.0, 0.0, 1.0)`
    :param billboard_constraint: Billboard Constraints (0 = FIXED, 1 = VERTICAL, 2 = HORIZONTAL, 3 = CENTER)
        Controls if this entity should pivot to face player when rendered.
    :type billboard_constraint: int, optional, default: 0
    :param brightness_override: Brightness override (blockLight << 4 | skyLight << 20). By default the brightness
        value is calculated from the light level of the block the entity is in.
    :type brightness_override: int, optional, default: -1
    :param view_range: View range
    :type view_range: float, optional, default: 1.0
    :param shadow_radius: Shadow radius. Value is treated as 64 when higher than 64.
        If less than or equal to 0, the entity has no shadow. Interpolated
    :type shadow_radius: float, optional, default: 0.0
    :param shadow_strength: Shadow strength. Interpolated
    :type shadow_strength: float, optional, default: 0.0
    :param width: The maximum width of the entity. Rendering culling bounding box spans horizontally
        `width/2` from entity position, and the part beyond will be culled. If set to 0, no culling on
        both vertical and horizontal directions.
    :type width: float, optional, default: 0.0
    :param height: The maximum height of the entity. Rendering culling bounding box spans vertically
        `y` to `y+height`, and the part beyond will be culled. If set to 0, no culling on both
        vertical and horizontal directions.
    :type height: float, optional, default: 0.0
    :param glow_color_override: Overrides the glow border color. If 0, uses the color of the team that the display
        entity is in.
    :type glow_color_override: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    text: TextComponent = entry(TextComponentEME, TextComponent(""))
    line_width: int = entry(VarIntEME, 200)
    background_color: int = entry(VarIntEME, 1073741824)
    _display_flags: ClassVar[int] = entry(ByteEME, 0)
    has_shadow: bool = proxy(_display_flags, Masked, mask=0x1)
    is_see_through: bool = proxy(_display_flags, Masked, mask=0x2)
    use_default_background: bool = proxy(_display_flags, Masked, mask=0x4)
    align_left: bool = proxy(_display_flags, Masked, mask=0x8)
    align_right: bool = proxy(_display_flags, Masked, mask=0x10)

    __slots__ = ()


class ThrownItemProjectileEM(EntityEM):
    """Entity that represents a thrown item projectile.

    :param item: The item that the projectile represents
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(None))

    __slots__ = ()


class ThrownEggEM(ThrownItemProjectileEM):
    """Entity that represents a thrown egg projectile.

    Inherited from :class:`ThrownItemProjectileEM`:

    :param item: The item that the projectile represents
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(SlotData(NotImplemented, 1)))

    __slots__ = ()


class ThrownEnderPearlEM(ThrownItemProjectileEM):
    """Entity that represents a thrown ender pearl projectile.

    Inherited from :class:`ThrownItemProjectileEM`:

    :param item: The item that the projectile represents
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(SlotData(NotImplemented, 1)))

    __slots__ = ()


class ThrownExperienceBottleEM(ThrownItemProjectileEM):
    """Entity that represents a thrown experience bottle projectile.

    Inherited from :class:`ThrownItemProjectileEM`:

    :param item: The item that the projectile represents
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(SlotData(NotImplemented, 1)))

    __slots__ = ()


class ThrownPotionEM(ThrownItemProjectileEM):
    """Entity that represents a thrown potion projectile.

    Inherited from :class:`ThrownItemProjectileEM`:

    :param item: The item that the projectile represents
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(SlotData(NotImplemented, 1)))

    __slots__ = ()


class ThrownSnowballEM(ThrownItemProjectileEM):
    """Entity that represents a thrown snowball projectile.

    Inherited from :class:`ThrownItemProjectileEM`:

    :param item: The item that the projectile represents
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(SlotData(NotImplemented, 1)))

    __slots__ = ()


class EyeOfEnderEM(EntityEM):
    """Entity that represents an eye of ender.

    :param item: The item that the entity represents (usually an ender eye)
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(None))

    __slots__ = ()


class FallingBlockEM(EntityEM):
    """Entity that represents a falling block.

    :param position: The spawn position of the falling block
    :type position: tuple[int, int, int], optional, default: (0, 0, 0)

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    position: tuple[int, int, int] = entry(PositionEME, (0, 0, 0))

    __slots__ = ()


class AreaEffectCloudEM(EntityEM):
    """Entity that represents an area effect cloud.

    :param radius: The radius of the area effect cloud.
    :type radius: float, optional, default: 0.5
    :param color: Color of the cloud's particle effect. Only applicable for mob spell particles.
    :type color: int, optional, default: 0
    :param single_point_effect: Whether to ignore the radius and show the effect as a single point, not an area.
    :type single_point_effect: bool, optional, default: False
    :param effect: The particle effect of the area effect cloud.
    :type effect: tuple[int, Any], optional, default: (0, None)

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    radius: float = entry(FloatEME, 0.5)
    color: int = entry(VarIntEME, 0)
    single_point_effect: bool = entry(BooleanEME, False)
    effect: tuple[int, Any] = entry(ParticleEME, (0, None))

    __slots__ = ()


class FishingHookEM(EntityEM):
    """Entity that represents a fishing hook.

    :param hooked_entity_id: The ID of the hooked entity plus one, or 0 if there is no hooked entity.
    :type hooked_entity_id: int, optional, default: 0
    :param is_catchable: Whether the fishing hook is catchable.
    :type is_catchable: bool, optional, default: False

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    hooked_entity_id: int = entry(VarIntEME, 0)
    is_catchable: bool = entry(BooleanEME, False)

    __slots__ = ()


class AbstractArrowEM(EntityEM):
    """Entity that represents an abstract arrow.

    :param is_critical: Whether the arrow is critical. (this affects :attr:`_arrow_flags`)
    :type is_critical: bool, optional
    :param is_noclip: Whether the arrow is noclip (used by loyalty tridents when
     returning). (this affects :attr:`_arrow_flags`)
    :type is_noclip: bool, optional
    :param piercing_level: The piercing level of the arrow.
    :type piercing_level: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _arrow_flags: ClassVar[int] = entry(ByteEME, 0)
    is_critical: bool = proxy(_arrow_flags, Masked, mask=0x1)
    is_noclip: bool = proxy(_arrow_flags, Masked, mask=0x2)
    piercing_level: int = entry(ByteEME, 0)

    __slots__ = ()


class ArrowEM(AbstractArrowEM):
    """Entity that represents an arrow.

    :param color: Color of the arrow's particles. Set to -1 for no particles.
    :type color: int, optional, default: -1

    Inherited from :class:`AbstractArrowEM`:

    :param is_critical: Whether the arrow is critical. (this affects :attr:`_arrow_flags`)
    :type is_critical: bool, optional
    :param is_noclip: Whether the arrow is noclip (used by loyalty tridents when
     returning). (this affects :attr:`_arrow_flags`)
    :type is_noclip: bool, optional
    :param piercing_level: The piercing level of the arrow.
    :type piercing_level: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    color: int = entry(VarIntEME, -1)

    __slots__ = ()


class SpectralArrowEM(AbstractArrowEM):
    """Entity that represents a spectral arrow.

    Inherited from :class:`AbstractArrowEM`:

    :param is_critical: Whether the arrow is critical. (this affects :attr:`_arrow_flags`)
    :type is_critical: bool, optional
    :param is_noclip: Whether the arrow is noclip (used by loyalty tridents when
     returning). (this affects :attr:`_arrow_flags`)
    :type is_noclip: bool, optional
    :param piercing_level: The piercing level of the arrow.
    :type piercing_level: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class ThrownTridentEM(AbstractArrowEM):
    """Entity that represents a thrown trident.

    :param loyalty_level: The loyalty level of the thrown trident (enchantment).
    :type loyalty_level: int, optional, default: 0
    :param has_enchantment_glint: Whether the thrown trident has an enchantment glint.
    :type has_enchantment_glint: bool, optional, default: False

    Inherited from :class:`AbstractArrowEM`:

    :param is_critical: Whether the arrow is critical. (this affects :attr:`_arrow_flags`)
    :type is_critical: bool, optional
    :param is_noclip: Whether the arrow is noclip (used by loyalty tridents when
     returning). (this affects :attr:`_arrow_flags`)
    :type is_noclip: bool, optional
    :param piercing_level: The piercing level of the arrow.
    :type piercing_level: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    loyalty_level: int = entry(VarIntEME, 0)
    has_enchantment_glint: bool = entry(BooleanEME, False)

    __slots__ = ()


class AbstractVehicleEM(EntityEM):
    """Entity that represents an abstract vehicle.

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    shaking_power: int = entry(VarIntEME, 0)
    shaking_direction: int = entry(VarIntEME, 1)
    shaking_multiplier: float = entry(FloatEME, 0.0)

    __slots__ = ()


class BoatEM(AbstractVehicleEM):
    """Entity that represents a boat.

    :param boat_type: The type of the boat. (0 = oak, 1 = spruce, 2 = birch, 3 = jungle,
        4 = acacia, 5 = dark oak)
    :type boat_type: int, optional, default: 0
    :param is_left_paddle_turning: Whether the left paddle of the boat is turning.
    :type is_left_paddle_turning: bool, optional, default: False
    :param is_right_paddle_turning: Whether the right paddle of the boat is turning.
    :type is_right_paddle_turning: bool, optional, default: False
    :param splash_timer: The splash timer of the boat.
    :type splash_timer: int, optional, default: 0

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    boat_type: int = entry(VarIntEME, 0)
    is_left_paddle_turning: bool = entry(BooleanEME, False)
    is_right_paddle_turning: bool = entry(BooleanEME, False)
    splash_timer: int = entry(VarIntEME, 0)

    __slots__ = ()


class ChestBoatEM(BoatEM):
    """Entity that represents a chest boat.

    Inherited from :class:`BoatEM`:

    :param boat_type: The type of the boat. (0 = oak, 1 = spruce, 2 = birch, 3 = jungle,
        4 = acacia, 5 = dark oak)
    :type boat_type: int, optional, default: 0
    :param is_left_paddle_turning: Whether the left paddle of the boat is turning.
    :type is_left_paddle_turning: bool, optional, default: False
    :param is_right_paddle_turning: Whether the right paddle of the boat is turning.
    :type is_right_paddle_turning: bool, optional, default: False
    :param splash_timer: The splash timer of the boat.
    :type splash_timer: int, optional, default: 0

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class AbstractMinecartEM(AbstractVehicleEM):
    """Entity that represents an abstract minecart.

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    custom_block_id_and_damage: int = entry(VarIntEME, 0)
    custom_block_y_position: int = entry(VarIntEME, 6)
    show_custom_block: bool = entry(BooleanEME, False)

    __slots__ = ()


class MinecartEM(AbstractMinecartEM):
    """Entity that represents a minecart.

    Inherited from :class:`AbstractMinecartEM`:

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class AbstractMinecartContainerEM(AbstractMinecartEM):
    """Entity that represents an abstract minecart container.

    Inherited from :class:`AbstractMinecartEM`:

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class MinecartHopperEM(AbstractMinecartContainerEM):
    """Entity that represents a minecart hopper.

    Inherited from :class:`AbstractMinecartContainerEM`:

    Inherited from :class:`AbstractMinecartEM`:

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class MinecartChestEM(AbstractMinecartContainerEM):
    """Entity that represents a minecart chest.

    Inherited from :class:`AbstractMinecartContainerEM`:

    Inherited from :class:`AbstractMinecartEM`:

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class MinecartFurnaceEM(AbstractMinecartEM):
    """Entity that represents a minecart furnace.

    :param has_fuel: Whether the furnace minecart has fuel.
    :type has_fuel: bool, optional, default: False

    Inherited from :class:`AbstractMinecartEM`:

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    has_fuel: bool = entry(BooleanEME, False)

    __slots__ = ()


class MinecartTNTEM(AbstractMinecartEM):
    """Entity that represents a minecart TNT.

    Inherited from :class:`AbstractMinecartEM`:

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class MinecartSpawnerEM(AbstractMinecartEM):
    """Entity that represents a minecart spawner.

    Inherited from :class:`AbstractMinecartEM`:

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class MinecartCommandBlockEM(AbstractMinecartEM):
    """Entity that represents a minecart command block.

    :param command: The command stored in the command block.
    :type command: str, optional, default: ""
    :param last_output: The last output from the command block.
    :type last_output: :class:`TextComponent`, optional, default: :attr:`TextComponent("")`

    Inherited from :class:`AbstractMinecartEM`:

    :param custom_block_id_and_damage: The custom block ID and damage of the minecart.
    :type custom_block_id_and_damage: int, optional, default: 0
    :param custom_block_y_position: The custom block Y position (in 16ths of a block) of the minecart.
    :type custom_block_y_position: int, optional, default: 6
    :param show_custom_block: Whether to show the custom block of the minecart.
    :type show_custom_block: bool, optional, default: False

    Inherited from :class:`AbstractVehicleEM`:

    :param shaking_power: The shaking power of the vehicle.
    :type shaking_power: int, optional, default: 0
    :param shaking_direction: The shaking direction of the vehicle.
    :type shaking_direction: int, optional, default: 1
    :param shaking_multiplier: The shaking multiplier of the vehicle.
    :type shaking_multiplier: float, optional, default: 0.0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    command: str = entry(StringEME, "")
    last_output: TextComponent = entry(TextComponentEME, TextComponent(""))

    __slots__ = ()


class EndCrystalEM(EntityEM):
    """Entity that represents an end crystal.

    :param beam_target: The position of the beam target.
    :type beam_target: tuple[int, int, int]|None, optional, default: None
    :param show_bottom: Whether the bottom of the end crystal is shown.
    :type show_bottom: bool, optional, default: True

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    beam_target: tuple[int, int, int] | None = entry(OptPositionEME, None)
    show_bottom: bool = entry(BooleanEME, True)

    __slots__ = ()


class DragonFireballEM(EntityEM):
    """Entity that represents a dragon fireball.

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class SmallFireballEM(EntityEM):
    """Entity that represents a small fireball.

    :param item: The item representing the small fireball.
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(None))

    __slots__ = ()


class FireballEM(EntityEM):
    """Entity that represents a fireball.

    :param item: The item representing the fireball.
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(None))

    __slots__ = ()


class WitherSkullEM(EntityEM):
    """Entity that represents a wither skull.

    :param is_invulnerable: Whether the wither skull is invulnerable.
    :type is_invulnerable: bool, optional, default: False

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_invulnerable: bool = entry(BooleanEME, False)

    __slots__ = ()


class FireworkRocketEM(EntityEM):
    """Entity representing a firework rocket.

    :param firework_info: The information about the firework.
    :type firework_info: :class:`Slot`, optional, default: :attr:`Slot(None)`
    :param shooter_entity_id: The entity ID of the entity that used the firework (for elytra boosting).
    :type shooter_entity_id: int|None, optional, default: None
    :param shot_at_angle: Whether the firework rocket was shot at an angle (from a crossbow).
    :type shot_at_angle: bool, optional, default: False

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    firework_info: Slot = entry(SlotEME, Slot(None))
    shooter_entity_id: int | None = entry(OptVarIntEME, None)
    shot_at_angle: bool = entry(BooleanEME, False)

    __slots__ = ()


class ItemFrameEM(EntityEM):
    """Entity representing an item frame.

    :param item: The item in the item frame.
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`
    :param rotation: The rotation of the item frame.
    :type rotation: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(None))
    rotation: int = entry(VarIntEME, 0)

    __slots__ = ()


class GlowingItemFrameEM(ItemFrameEM):
    """Entity representing a glowing item frame.

    Inherited from :class:`ItemFrameEM`:

    :param item: The item in the item frame.
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`
    :param rotation: The rotation of the item frame.
    :type rotation: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class PaintingEM(EntityEM):
    """Entity representing a painting.

    :param painting_type: The type of painting variant.
    :type painting_type: int, optional, default: 0

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    painting_type: int = entry(PaintingVariantEME, 0)

    __slots__ = ()


class ItemEntityEM(EntityEM):
    """Entity representing an item.

    :param item: The item in the item entity.
    :type item: :class:`Slot`, optional, default: :attr:`Slot(None)`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    item: Slot = entry(SlotEME, Slot(None))

    __slots__ = ()


class LivingEntityEM(EntityEM):
    """Entity that represents a living entity.

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _hand_states: ClassVar[int] = entry(ByteEME, 0)
    is_hand_active: bool = proxy(_hand_states, Masked, mask=0x1)
    active_hand: int = proxy(_hand_states, Masked, mask=0x2)
    is_riptide_spin_attack: bool = proxy(_hand_states, Masked, mask=0x4)
    health: float = entry(FloatEME, 1.0)
    potion_effect_color: int = entry(VarIntEME, 0)
    is_potion_effect_ambient: bool = entry(BooleanEME, False)
    num_arrows: int = entry(VarIntEME, 0)
    num_bee_stingers: int = entry(VarIntEME, 0)
    sleeping_bed_location: Position | None = entry(OptPositionEME, None)

    __slots__ = ()


class PlayerEM(LivingEntityEM):
    """Player entity.

    :param additional_hearts: Additional hearts of the player.
    :type additional_hearts: float, optional, default: 0.0
    :param score: The score of the player.
    :type score: int, optional, default: 0
    :param cape_enabled: Whether the cape is enabled. (this affects :attr:`_displayed_skin_parts`)
    :type cape_enabled: bool, optional
    :param jacket_enabled: Whether the jacket is enabled. (this affects :attr:`_displayed_skin_parts`)
    :type jacket_enabled: bool, optional
    :param left_sleeve_enabled: Whether the left sleeve is enabled. (this affects :attr:`_displayed_skin_parts`)
    :type left_sleeve_enabled: bool, optional
    :param right_sleeve_enabled: Whether the right sleeve is enabled. (this affects :attr:`_displayed_skin_parts`)
    :type right_sleeve_enabled: bool, optional
    :param left_pants_leg_enabled: Whether the left pants leg is enabled. (this affects :attr:`_displayed_skin_parts`)
    :type left_pants_leg_enabled: bool, optional
    :param right_pants_leg_enabled: Whether the right pants leg is enabled.
       (this affects :attr:`_displayed_skin_parts`)
    :type right_pants_leg_enabled: bool, optional
    :param hat_enabled: Whether the hat is enabled. (this affects :attr:`_displayed_skin_parts`)
    :type hat_enabled: bool, optional
    :param main_hand: The main hand of the player (0: Left, 1: Right).
    :type main_hand: int, optional, default: 1
    :param left_shoulder_entity_data: Left shoulder entity data (for occupying parrot).
    :type left_shoulder_entity_data: :class:`NBTag`, optional, default: :attr:`EndNBT()`
    :param right_shoulder_entity_data: Right shoulder entity data (for occupying parrot).
    :type right_shoulder_entity_data: :class:`NBTag`, optional, default: :attr:`EndNBT()`

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    additional_hearts: float = entry(FloatEME, 0.0)
    score: int = entry(VarIntEME, 0)
    _displayed_skin_parts: ClassVar[int] = entry(ByteEME, 0)
    cape_enabled: bool = proxy(_displayed_skin_parts, Masked, mask=0x1)
    jacket_enabled: bool = proxy(_displayed_skin_parts, Masked, mask=0x2)
    left_sleeve_enabled: bool = proxy(_displayed_skin_parts, Masked, mask=0x4)
    right_sleeve_enabled: bool = proxy(_displayed_skin_parts, Masked, mask=0x8)
    left_pants_leg_enabled: bool = proxy(_displayed_skin_parts, Masked, mask=0x10)
    right_pants_leg_enabled: bool = proxy(_displayed_skin_parts, Masked, mask=0x20)
    hat_enabled: bool = proxy(_displayed_skin_parts, Masked, mask=0x40)
    main_hand: int = entry(ByteEME, 1)
    left_shoulder_entity_data: NBTag = entry(NBTagEME, EndNBT())
    right_shoulder_entity_data: NBTag = entry(NBTagEME, EndNBT())

    __slots__ = ()


class ArmorStandEM(LivingEntityEM):
    """Entity representing an armor stand.

    :param is_small: Whether the armor stand is small. (this affects :attr:`_armorstand_flags`)
    :type is_small: bool, optional
    :param has_arms: Whether the armor stand has arms. (this affects :attr:`_armorstand_flags`)
    :type has_arms: bool, optional
    :param has_no_base_plate: Whether the armor stand has no base plate. (this affects :attr:`_armorstand_flags`)
    :type has_no_base_plate: bool, optional
    :param is_marker: Whether the armor stand is a marker. (this affects :attr:`_armorstand_flags`)
    :type is_marker: bool, optional
    :param head_rotation: Rotation of the armor stand's head.
    :type head_rotation: :class:`Vec3`, optional, default: :attr:`Vec3(0.0, 0.0, 0.0)`
    :param body_rotation: Rotation of the armor stand's body.
    :type body_rotation: :class:`Vec3`, optional, default: :attr:`Vec3(0.0, 0.0, 0.0)`
    :param left_arm_rotation: Rotation of the armor stand's left arm.
    :type left_arm_rotation: :class:`Vec3`, optional, default: :attr:`Vec3(-10.0, 0.0, -10.0)`
    :param right_arm_rotation: Rotation of the armor stand's right arm.
    :type right_arm_rotation: :class:`Vec3`, optional, default: :attr:`Vec3(-15.0, 0.0, 10.0)`
    :param left_leg_rotation: Rotation of the armor stand's left leg.
    :type left_leg_rotation: :class:`Vec3`, optional, default: :attr:`Vec3(-1.0, 0.0, -1.0)`
    :param right_leg_rotation: Rotation of the armor stand's right leg.
    :type right_leg_rotation: :class:`Vec3`, optional, default: :attr:`Vec3(1.0, 0.0, 1.0)`

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _armorstand_flags: ClassVar[int] = entry(ByteEME, 0)
    is_small: bool = proxy(_armorstand_flags, Masked, mask=0x1)
    has_arms: bool = proxy(_armorstand_flags, Masked, mask=0x4)
    has_no_base_plate: bool = proxy(_armorstand_flags, Masked, mask=0x8)
    is_marker: bool = proxy(_armorstand_flags, Masked, mask=0x10)
    head_rotation: Vec3 = entry(RotationEME, Vec3(0.0, 0.0, 0.0))
    body_rotation: Vec3 = entry(RotationEME, Vec3(0.0, 0.0, 0.0))
    left_arm_rotation: Vec3 = entry(RotationEME, Vec3(-10.0, 0.0, -10.0))
    right_arm_rotation: Vec3 = entry(RotationEME, Vec3(-15.0, 0.0, 10.0))
    left_leg_rotation: Vec3 = entry(RotationEME, Vec3(-1.0, 0.0, -1.0))
    right_leg_rotation: Vec3 = entry(RotationEME, Vec3(1.0, 0.0, 1.0))

    __slots__ = ()


class MobEM(LivingEntityEM):
    """Generic mobile entity.

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _mob_flags: ClassVar[int] = entry(ByteEME, 0)
    no_ai: bool = proxy(_mob_flags, Masked, mask=0x1)
    is_left_handed: bool = proxy(_mob_flags, Masked, mask=0x2)
    is_aggressive: bool = proxy(_mob_flags, Masked, mask=0x4)

    __slots__ = ()


class AmbientCreatureEM(MobEM):
    """Entity that represents an ambient creature.

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class BatEM(AmbientCreatureEM):
    """Entity that represents a bat.

    :param is_hanging: Whether the bat is hanging upside down. (this affects :attr:`_bat_flags`)
    :type is_hanging: bool, optional

    Inherited from :class:`AmbientCreatureEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _bat_flags: ClassVar[int] = entry(ByteEME, 0)
    is_hanging: bool = proxy(_bat_flags, Masked, mask=0x1)

    __slots__ = ()


class PathfinderMobEM(MobEM):
    """Entity that represents a pathfinder mob.

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class WaterAnimalEM(PathfinderMobEM):
    """Entity that represents a water-dwelling animal.

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class SquidEM(WaterAnimalEM):
    """Entity that represents a squid.

    Inherited from :class:`WaterAnimalEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class DolphinEM(WaterAnimalEM):
    """Entity that represents a dolphin.

    :param treasure_position: The position of the dolphin's treasure.
    :type treasure_position: tuple[int, int, int], optional, default: (0, 0, 0)
    :param has_fish: Whether the dolphin has fish.
    :type has_fish: bool, optional, default: False
    :param moisture_level: The moisture level of the dolphin.
    :type moisture_level: int, optional, default: 2400

    Inherited from :class:`WaterAnimalEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    treasure_position: tuple[int, int, int] = entry(PositionEME, (0, 0, 0))
    has_fish: bool = entry(BooleanEME, False)
    moisture_level: int = entry(VarIntEME, 2400)

    __slots__ = ()


class AbstractFishEM(WaterAnimalEM):
    """Entity that represents an abstract fish.

    :param from_bucket: Whether the fish is from a bucket.
    :type from_bucket: bool, optional, default: False

    Inherited from :class:`WaterAnimalEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    from_bucket: bool = entry(BooleanEME, False)

    __slots__ = ()


class CodEM(AbstractFishEM):
    """Entity that represents a cod fish.

    Inherited from :class:`AbstractFishEM`:

    :param from_bucket: Whether the fish is from a bucket.
    :type from_bucket: bool, optional, default: False

    Inherited from :class:`WaterAnimalEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class PufferFishEM(AbstractFishEM):
    """Entity that represents a puffer fish.

    :param puff_state: The state of puffing of the puffer fish, varies from 0 to 2.
    :type puff_state: int, optional, default: 0

    Inherited from :class:`AbstractFishEM`:

    :param from_bucket: Whether the fish is from a bucket.
    :type from_bucket: bool, optional, default: False

    Inherited from :class:`WaterAnimalEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    puff_state: int = entry(VarIntEME, 0)

    __slots__ = ()


class SalmonEM(AbstractFishEM):
    """Entity that represents a salmon fish.

    Inherited from :class:`AbstractFishEM`:

    :param from_bucket: Whether the fish is from a bucket.
    :type from_bucket: bool, optional, default: False

    Inherited from :class:`WaterAnimalEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class TropicalFishEM(AbstractFishEM):
    """Entity that represents a tropical fish.

    :param variant: The variant of the tropical fish.
    :type variant: int, optional, default: 0

    Inherited from :class:`AbstractFishEM`:

    :param from_bucket: Whether the fish is from a bucket.
    :type from_bucket: bool, optional, default: False

    Inherited from :class:`WaterAnimalEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    variant: int = entry(VarIntEME, 0)

    __slots__ = ()


class TadpoleEM(AbstractFishEM):
    """Entity that represents a tadpole.

    Inherited from :class:`AbstractFishEM`:

    :param from_bucket: Whether the fish is from a bucket.
    :type from_bucket: bool, optional, default: False

    Inherited from :class:`WaterAnimalEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class AgeableMobEM(PathfinderMobEM):
    """Entity that represents an ageable mob.

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_baby: bool = entry(BooleanEME, False)

    __slots__ = ()


class AnimalEM(AgeableMobEM):
    """Entity that represents an animal.

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class SnifferEM(AnimalEM):
    """Entity that represents a sniffer.

    :param sniffer_state: The state of the sniffer.
    :type sniffer_state: :class:`SnifferState`, optional, default: :attr:`SnifferState.IDLING`
    :param drop_seed_at_tick: The tick at which the sniffer will drop seed.
    :type drop_seed_at_tick: int, optional, default: 0

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    sniffer_state: SnifferState = entry(SnifferStateEME, SnifferState.IDLING)
    drop_seed_at_tick: int = entry(VarIntEME, 0)

    __slots__ = ()


class AbstractHorseEM(AnimalEM):
    """Entity that represents an abstract horse.

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _horse_flags: ClassVar[int] = entry(ByteEME, 0)
    is_tame: bool = proxy(_horse_flags, Masked, mask=0x2)
    is_saddled: bool = proxy(_horse_flags, Masked, mask=0x4)
    has_bred: bool = proxy(_horse_flags, Masked, mask=0x8)
    is_eating: bool = proxy(_horse_flags, Masked, mask=0x10)
    is_rearing: bool = proxy(_horse_flags, Masked, mask=0x20)
    is_mouth_open: bool = proxy(_horse_flags, Masked, mask=0x40)

    __slots__ = ()


class HorseEM(AbstractHorseEM):
    """Entity that represents a horse.

    :param variant: The variant of the horse representing its color and style.
    :type variant: int, optional, default: 0

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    variant: int = entry(VarIntEME, 0)

    __slots__ = ()


class ZombieHorseEM(AbstractHorseEM):
    """Entity that represents a zombie horse.

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class SkeletonHorseEM(AbstractHorseEM):
    """Entity that represents a skeleton horse.

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class CamelEM(AbstractHorseEM):
    """Entity that represents a camel.

    :param is_dashing: Whether the camel is dashing.
    :type is_dashing: bool, optional, default: False
    :param last_pose_change_tick: The tick at which the camel's pose was last changed.
    :type last_pose_change_tick: int, optional, default: 0

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_dashing: bool = entry(BooleanEME, False)
    last_pose_change_tick: int = entry(VarLongEME, 0)

    __slots__ = ()


class ChestedHorseEM(AbstractHorseEM):
    """Entity that represents a horse with a chest.

    :param has_chest: Whether the horse has a chest.
    :type has_chest: bool, optional, default: False

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    has_chest: bool = entry(BooleanEME, False)

    __slots__ = ()


class DonkeyEM(ChestedHorseEM):
    """Entity that represents a donkey.

    Inherited from :class:`ChestedHorseEM`:

    :param has_chest: Whether the horse has a chest.
    :type has_chest: bool, optional, default: False

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class LlamaEM(ChestedHorseEM):
    """Entity that represents a llama.

    :param strength: The strength of the llama, representing the number of columns of 3 slots in its
        inventory once a chest is equipped.
    :type strength: int, optional, default: 0
    :param carpet_color: The color of the carpet equipped on the llama, represented as a dye color. -1 if no
        carpet is equipped.
    :type carpet_color: int, optional, default: -1
    :param variant: The variant of the llama.
    :type variant: int, optional, default: 0

    Inherited from :class:`ChestedHorseEM`:

    :param has_chest: Whether the horse has a chest.
    :type has_chest: bool, optional, default: False

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    strength: int = entry(VarIntEME, 0)
    carpet_color: int = entry(VarIntEME, -1)
    variant: int = entry(VarIntEME, 0)

    __slots__ = ()


class TraderLlamaEM(LlamaEM):
    """Entity that represents a trader llama.

    Inherited from :class:`LlamaEM`:

    :param strength: The strength of the llama, representing the number of columns of 3 slots in its
        inventory once a chest is equipped.
    :type strength: int, optional, default: 0
    :param carpet_color: The color of the carpet equipped on the llama, represented as a dye color. -1 if no
        carpet is equipped.
    :type carpet_color: int, optional, default: -1
    :param variant: The variant of the llama.
    :type variant: int, optional, default: 0

    Inherited from :class:`ChestedHorseEM`:

    :param has_chest: Whether the horse has a chest.
    :type has_chest: bool, optional, default: False

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class MuleEM(ChestedHorseEM):
    """Entity that represents a mule.

    Inherited from :class:`ChestedHorseEM`:

    :param has_chest: Whether the horse has a chest.
    :type has_chest: bool, optional, default: False

    Inherited from :class:`AbstractHorseEM`:

    :param is_tame: Whether the horse is tame. (this affects :attr:`_horse_flags`)
    :type is_tame: bool, optional
    :param is_saddled: Whether the horse is saddled. (this affects :attr:`_horse_flags`)
    :type is_saddled: bool, optional
    :param has_bred: Whether the horse has bred. (this affects :attr:`_horse_flags`)
    :type has_bred: bool, optional
    :param is_eating: Whether the horse is eating. (this affects :attr:`_horse_flags`)
    :type is_eating: bool, optional
    :param is_rearing: Whether the horse is rearing (on hind legs). (this affects :attr:`_horse_flags`)
    :type is_rearing: bool, optional
    :param is_mouth_open: Whether the horse's mouth is open. (this affects :attr:`_horse_flags`)
    :type is_mouth_open: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class AxolotlEM(AnimalEM):
    """Entity that represents an axolotl.

    :param variant: The variant of the axolotl.
    :type variant: int, optional, default: 0
    :param is_playing_dead: Whether the axolotl is currently playing dead.
    :type is_playing_dead: bool, optional, default: False
    :param is_spawned_from_bucket: Whether the axolotl was spawned from a bucket.
    :type is_spawned_from_bucket: bool, optional, default: False

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    variant: int = entry(VarIntEME, 0)
    is_playing_dead: bool = entry(BooleanEME, False)
    is_spawned_from_bucket: bool = entry(BooleanEME, False)

    __slots__ = ()


class BeeEM(AnimalEM):
    """Entity that represents a bee.

    :param is_angry: Whether the bee is angry. (this affects :attr:`_bee_flags`)
    :type is_angry: bool, optional
    :param has_stung: Whether the bee has stung. (this affects :attr:`_bee_flags`)
    :type has_stung: bool, optional
    :param has_nectar: Whether the bee has nectar. (this affects :attr:`_bee_flags`)
    :type has_nectar: bool, optional
    :param anger_time: The time in ticks for which the bee remains angry.
    :type anger_time: int, optional, default: 0

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _bee_flags: ClassVar[int] = entry(ByteEME, 0)
    is_angry: bool = proxy(_bee_flags, Masked, mask=0x2)
    has_stung: bool = proxy(_bee_flags, Masked, mask=0x4)
    has_nectar: bool = proxy(_bee_flags, Masked, mask=0x8)
    anger_time: int = entry(VarIntEME, 0)

    __slots__ = ()


class FoxEM(AnimalEM):
    """Entity that represents a fox.

    :param fox_type: The type of the fox.
    :type fox_type: int, optional, default: 0
    :param is_sitting: Whether the fox is sitting. (this affects :attr:`_fox_flags`)
    :type is_sitting: bool, optional
    :param is_fox_crouching: Whether the fox is crouching. (this affects :attr:`_fox_flags`)
    :type is_fox_crouching: bool, optional
    :param is_interested: Whether the fox is interested. (this affects :attr:`_fox_flags`)
    :type is_interested: bool, optional
    :param is_pouncing: Whether the fox is pouncing. (this affects :attr:`_fox_flags`)
    :type is_pouncing: bool, optional
    :param is_sleeping: Whether the fox is sleeping. (this affects :attr:`_fox_flags`)
    :type is_sleeping: bool, optional
    :param is_faceplanted: Whether the fox is faceplanted. (this affects :attr:`_fox_flags`)
    :type is_faceplanted: bool, optional
    :param is_defending: Whether the fox is defending. (this affects :attr:`_fox_flags`)
    :type is_defending: bool, optional
    :param trusted_uuid: The UUID of the player that the fox trusts.
    :type trusted_uuid: :class:`UUID|None`, optional, default: :attr:`None`
    :param trusted_uuid_2: Another player that the fox trusts.
    :type trusted_uuid_2: :class:`UUID|None`, optional, default: :attr:`None`

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    fox_type: int = entry(VarIntEME, 0)
    _fox_flags: ClassVar[int] = entry(ByteEME, 0)
    is_sitting: bool = proxy(_fox_flags, Masked, mask=0x1)
    is_fox_crouching: bool = proxy(_fox_flags, Masked, mask=0x4)
    is_interested: bool = proxy(_fox_flags, Masked, mask=0x8)
    is_pouncing: bool = proxy(_fox_flags, Masked, mask=0x10)
    is_sleeping: bool = proxy(_fox_flags, Masked, mask=0x20)
    is_faceplanted: bool = proxy(_fox_flags, Masked, mask=0x40)
    is_defending: bool = proxy(_fox_flags, Masked, mask=0x80)
    trusted_uuid: UUID | None = entry(OptUUIDEME, None)
    trusted_uuid_2: UUID | None = entry(OptUUIDEME, None)

    __slots__ = ()


class FrogEM(AnimalEM):
    """Entity that represents a frog.

    :param variant: The variant of the frog.
    :type variant: int, optional, default: 0
    :param tongue_target: The target of the frog's tongue.
    :type tongue_target: int, optional, default: 0

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    variant: int = entry(FrogVariantEME, 0)
    tongue_target: int = entry(OptVarIntEME, 0)

    __slots__ = ()


class OcelotEM(AnimalEM):
    """Entity that represents an ocelot.

    :param is_trusting: Whether the ocelot is trusting.
    :type is_trusting: bool, optional, default: False

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_trusting: bool = entry(BooleanEME, False)

    __slots__ = ()


class PandaEM(AnimalEM):
    """Entity that represents a panda.

    :param breed_timer: The breed timer of the panda.
    :type breed_timer: int, optional, default: 0
    :param sneeze_timer: The sneeze timer of the panda.
    :type sneeze_timer: int, optional, default: 0
    :param eat_timer: The eat timer of the panda.
    :type eat_timer: int, optional, default: 0
    :param main_gene: The main gene of the panda.
    :type main_gene: int, optional, default: 0
    :param hidden_gene: The hidden gene of the panda.
    :type hidden_gene: int, optional, default: 0
    :param is_sneezing: Whether the panda is sneezing. (this affects :attr:`_panda_flags`)
    :type is_sneezing: bool, optional
    :param is_rolling: Whether the panda is rolling. (this affects :attr:`_panda_flags`)
    :type is_rolling: bool, optional
    :param is_sitting: Whether the panda is sitting. (this affects :attr:`_panda_flags`)
    :type is_sitting: bool, optional
    :param is_on_back: Whether the panda is on its back. (this affects :attr:`_panda_flags`)
    :type is_on_back: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    breed_timer: int = entry(VarIntEME, 0)
    sneeze_timer: int = entry(VarIntEME, 0)
    eat_timer: int = entry(VarIntEME, 0)
    main_gene: int = entry(ByteEME, 0)
    hidden_gene: int = entry(ByteEME, 0)
    _panda_flags: ClassVar[int] = entry(ByteEME, 0)
    is_sneezing: bool = proxy(_panda_flags, Masked, mask=0x2)
    is_rolling: bool = proxy(_panda_flags, Masked, mask=0x4)
    is_sitting: bool = proxy(_panda_flags, Masked, mask=0x8)
    is_on_back: bool = proxy(_panda_flags, Masked, mask=0x10)

    __slots__ = ()


class PigEM(AnimalEM):
    """Entity that represents a pig.

    :param has_saddle: Whether the pig has a saddle.
    :type has_saddle: bool, optional, default: False
    :param boost_time: Total time to 'boost' with a carrot on a stick for.
    :type boost_time: int, optional, default: 0

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    has_saddle: bool = entry(BooleanEME, False)
    boost_time: int = entry(VarIntEME, 0)

    __slots__ = ()


class RabbitEM(AnimalEM):
    """Entity that represents a rabbit.

    :param rabbit_type: The type of the rabbit.
    :type rabbit_type: int, optional, default: 0

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    rabbit_type: int = entry(VarIntEME, 0)

    __slots__ = ()


class TurtleEM(AnimalEM):
    """Entity that represents a turtle.

    :param home_pos: The home position of the turtle.
    :type home_pos: tuple[int, int, int], optional, default: (0, 0, 0)
    :param has_egg: Whether the turtle has an egg.
    :type has_egg: bool, optional, default: False
    :param is_laying_egg: Whether the turtle is laying an egg.
    :type is_laying_egg: bool, optional, default: False
    :param travel_pos: The travel position of the turtle.
    :type travel_pos: tuple[int, int, int], optional, default: (0, 0, 0)
    :param is_going_home: Whether the turtle is going home.
    :type is_going_home: bool, optional, default: False
    :param is_traveling: Whether the turtle is traveling.
    :type is_traveling: bool, optional, default: False

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    home_pos: tuple[int, int, int] = entry(PositionEME, (0, 0, 0))
    has_egg: bool = entry(BooleanEME, False)
    is_laying_egg: bool = entry(BooleanEME, False)
    travel_pos: tuple[int, int, int] = entry(PositionEME, (0, 0, 0))
    is_going_home: bool = entry(BooleanEME, False)
    is_traveling: bool = entry(BooleanEME, False)

    __slots__ = ()


class PolarBearEM(AnimalEM):
    """Entity that represents a polar bear.

    :param is_standing_up: Whether the polar bear is standing up.
    :type is_standing_up: bool, optional, default: False

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_standing_up: bool = entry(BooleanEME, False)

    __slots__ = ()


class ChickenEM(AnimalEM):
    """Entity representing a chicken.

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class CowEM(AnimalEM):
    """Entity representing a cow.

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class MooshroomEM(CowEM):
    """Entity representing a mooshroom.

    :param variant: The variant of the mooshroom: 'red' or 'brown'.
    :type variant: str, optional, default: "red"

    Inherited from :class:`CowEM`:

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    variant: str = entry(StringEME, "red")

    __slots__ = ()


class HoglinEM(AnimalEM):
    """Entity representing a hoglin.

    :param immune_to_zombification: Whether the hoglin is immune to zombification.
    :type immune_to_zombification: bool, optional, default: False

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    immune_to_zombification: bool = entry(BooleanEME, False)

    __slots__ = ()


class SheepEM(AnimalEM):
    """Entity representing a sheep.

    :param color_id: The color of the sheep. (this affects :attr:`_sheep_data`)
    :type color_id: int, optional
    :param is_sheared: Whether the sheep is sheared. (this affects :attr:`_sheep_data`)
    :type is_sheared: bool, optional

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _sheep_data: ClassVar[int] = entry(ByteEME, 0)
    color_id: int = proxy(_sheep_data, Masked, mask=0xF)
    is_sheared: bool = proxy(_sheep_data, Masked, mask=0x10)

    __slots__ = ()


class StriderEM(AnimalEM):
    """Entity representing a strider.

    :param boost_duration: Total time to 'boost' with warped fungus on a stick.
    :type boost_duration: int, optional, default: 0
    :param is_shaking: Whether the strider is shaking. (True unless riding a vehicle or on or in a block
        tagged with strider_warm_blocks (default: lava))
    :type is_shaking: bool, optional, default: False
    :param has_saddle: Whether the strider has a saddle.
    :type has_saddle: bool, optional, default: False

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    boost_duration: int = entry(VarIntEME, 0)
    is_shaking: bool = entry(BooleanEME, False)
    has_saddle: bool = entry(BooleanEME, False)

    __slots__ = ()


class GoatEM(AnimalEM):
    """Entity representing a goat.

    :param is_screaming_goat: Whether the goat is a screaming goat.
    :type is_screaming_goat: bool, optional, default: False
    :param has_left_horn: Whether the goat has a left horn.
    :type has_left_horn: bool, optional, default: True
    :param has_right_horn: Whether the goat has a right horn.
    :type has_right_horn: bool, optional, default: True

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_screaming_goat: bool = entry(BooleanEME, False)
    has_left_horn: bool = entry(BooleanEME, True)
    has_right_horn: bool = entry(BooleanEME, True)

    __slots__ = ()


class TameableAnimalEM(AnimalEM):
    """Entity representing a tameable animal.

    :param is_sitting: Whether the animal is sitting. (this affects :attr:`_tameable_data`)
    :type is_sitting: bool, optional
    :param is_tamed: Whether the animal is tamed. (this affects :attr:`_tameable_data`)
    :type is_tamed: bool, optional
    :param owner_uuid: The UUID of the owner, if the animal is tamed.
    :type owner_uuid: :class:`UUID|None`, optional, default: :attr:`None`

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _tameable_data: ClassVar[int] = entry(ByteEME, 0)
    is_sitting: bool = proxy(_tameable_data, Masked, mask=0x1)
    is_tamed: bool = proxy(_tameable_data, Masked, mask=0x4)
    owner_uuid: UUID | None = entry(OptUUIDEME, None)

    __slots__ = ()


class CatEM(TameableAnimalEM):
    """Entity representing a cat.

    :param cat_variant: The variant of the cat.
    :type cat_variant: int, optional, default: 0
    :param is_lying: Whether the cat is lying down.
    :type is_lying: bool, optional, default: False
    :param is_relaxed: Unknown use. When true, the cat's head goes slightly upwards.
    :type is_relaxed: bool, optional, default: False
    :param collar_color: The color of the cat's collar, using dye values.
    :type collar_color: int, optional, default: 14

    Inherited from :class:`TameableAnimalEM`:

    :param is_sitting: Whether the animal is sitting. (this affects :attr:`_tameable_data`)
    :type is_sitting: bool, optional
    :param is_tamed: Whether the animal is tamed. (this affects :attr:`_tameable_data`)
    :type is_tamed: bool, optional
    :param owner_uuid: The UUID of the owner, if the animal is tamed.
    :type owner_uuid: :class:`UUID|None`, optional, default: :attr:`None`

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    cat_variant: int = entry(CatVariantEME, 0)
    is_lying: bool = entry(BooleanEME, False)
    is_relaxed: bool = entry(BooleanEME, False)
    collar_color: int = entry(VarIntEME, 14)

    __slots__ = ()


class WolfEM(TameableAnimalEM):
    """Entity representing a wolf.

    :param is_begging: Whether the wolf is begging.
    :type is_begging: bool, optional, default: False
    :param collar_color: The color of the wolf's collar, using dye values.
    :type collar_color: int, optional, default: 14
    :param anger_time: The time for which the wolf remains angry.
    :type anger_time: int, optional, default: 0

    Inherited from :class:`TameableAnimalEM`:

    :param is_sitting: Whether the animal is sitting. (this affects :attr:`_tameable_data`)
    :type is_sitting: bool, optional
    :param is_tamed: Whether the animal is tamed. (this affects :attr:`_tameable_data`)
    :type is_tamed: bool, optional
    :param owner_uuid: The UUID of the owner, if the animal is tamed.
    :type owner_uuid: :class:`UUID|None`, optional, default: :attr:`None`

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_begging: bool = entry(BooleanEME, False)
    collar_color: int = entry(VarIntEME, 14)
    anger_time: int = entry(VarIntEME, 0)

    __slots__ = ()


class ParrotEM(TameableAnimalEM):
    """Entity representing a parrot.

    :param variant: The variant of the parrot.
    :type variant: int, optional, default: 0

    Inherited from :class:`TameableAnimalEM`:

    :param is_sitting: Whether the animal is sitting. (this affects :attr:`_tameable_data`)
    :type is_sitting: bool, optional
    :param is_tamed: Whether the animal is tamed. (this affects :attr:`_tameable_data`)
    :type is_tamed: bool, optional
    :param owner_uuid: The UUID of the owner, if the animal is tamed.
    :type owner_uuid: :class:`UUID|None`, optional, default: :attr:`None`

    Inherited from :class:`AnimalEM`:

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    variant: int = entry(VarIntEME, 0)

    __slots__ = ()


class AbstractVillagerEM(AgeableMobEM):
    """Entity representing an abstract villager.

    :param head_shake_timer: The head shake timer of the villager, starting at 40 and decrementing each tick.
    :type head_shake_timer: int, optional, default: 0

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    head_shake_timer: int = entry(VarIntEME, 0)

    __slots__ = ()


class VillagerEM(AbstractVillagerEM):
    """Entity representing a villager.

    :param villager_data: The data associated with the villager.
    :type villager_data: tuple[int, int, int], optional, default: (0, 0, 0)

    Inherited from :class:`AbstractVillagerEM`:

    :param head_shake_timer: The head shake timer of the villager, starting at 40 and decrementing each tick.
    :type head_shake_timer: int, optional, default: 0

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    villager_data: tuple[int, int, int] = entry(VillagerDataEME, (0, 0, 0))

    __slots__ = ()


class WanderingTraderEM(AbstractVillagerEM):
    """Entity representing a wandering trader.

    Inherited from :class:`AbstractVillagerEM`:

    :param head_shake_timer: The head shake timer of the villager, starting at 40 and decrementing each tick.
    :type head_shake_timer: int, optional, default: 0

    Inherited from :class:`AgeableMobEM`:

    :param is_baby: Whether the mob is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class AbstractGolemEM(PathfinderMobEM):
    """Entity representing an abstract golem.

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class IronGolemEM(AbstractGolemEM):
    """Entity representing an iron golem.

    :param is_player_created: Whether the iron golem was created by a player. (this affects :attr:`_iron_golem_flags`)
    :type is_player_created: bool, optional

    Inherited from :class:`AbstractGolemEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _iron_golem_flags: ClassVar[int] = entry(ByteEME, 0)
    is_player_created: bool = proxy(_iron_golem_flags, Masked, mask=0x1)

    __slots__ = ()


class SnowGolemEM(AbstractGolemEM):
    """Entity representing a snow golem.

    :param has_pumpkin: Whether the snow golem has a pumpkin on its head. (this affects :attr:`_snow_golem_flags`)
    :type has_pumpkin: bool, optional

    Inherited from :class:`AbstractGolemEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _snow_golem_flags: ClassVar[int] = entry(ByteEME, 16)
    has_pumpkin: bool = proxy(_snow_golem_flags, Masked, mask=0x10)

    __slots__ = ()


class ShulkerEM(AbstractGolemEM):
    """Entity representing a shulker.

    :param attach_face: The face to which the shulker is attached.
    :type attach_face: :class:`Direction`, optional, default: :attr:`Direction.DOWN`
    :param shield_height: The shield height of the shulker.
    :type shield_height: int, optional, default: 0
    :param color: The color of the shulker, using dye color values.
    :type color: int, optional, default: 16

    Inherited from :class:`AbstractGolemEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    attach_face: Direction = entry(DirectionEME, Direction.DOWN)
    shield_height: int = entry(ByteEME, 0)
    color: int = entry(ByteEME, 16)

    __slots__ = ()


class MonsterEM(PathfinderMobEM):
    """Entity representing a monster.

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class BasePiglinEM(MonsterEM):
    """Entity representing a base piglin.

    :param is_immune_to_zombification: Indicates if the piglin is immune to zombification.
    :type is_immune_to_zombification: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_immune_to_zombification: bool = entry(BooleanEME, False)

    __slots__ = ()


class PiglinEM(BasePiglinEM):
    """Entity representing a piglin.

    :param is_baby: Indicates if the piglin is a baby.
    :type is_baby: bool, optional, default: False
    :param is_charging_crossbow: Indicates if the piglin is charging a crossbow.
    :type is_charging_crossbow: bool, optional, default: False
    :param is_dancing: Indicates if the piglin is dancing.
    :type is_dancing: bool, optional, default: False

    Inherited from :class:`BasePiglinEM`:

    :param is_immune_to_zombification: Indicates if the piglin is immune to zombification.
    :type is_immune_to_zombification: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_baby: bool = entry(BooleanEME, False)
    is_charging_crossbow: bool = entry(BooleanEME, False)
    is_dancing: bool = entry(BooleanEME, False)

    __slots__ = ()


class PiglinBruteEM(BasePiglinEM):
    """Entity representing a piglin brute.

    Inherited from :class:`BasePiglinEM`:

    :param is_immune_to_zombification: Indicates if the piglin is immune to zombification.
    :type is_immune_to_zombification: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class BlazeEM(MonsterEM):
    """Entity representing a blaze.

    :param is_blaze_on_fire: Whether the blaze is on fire. (this affects :attr:`_blaze_flags`)
    :type is_blaze_on_fire: bool, optional

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _blaze_flags: ClassVar[int] = entry(ByteEME, 0)
    is_blaze_on_fire: bool = proxy(_blaze_flags, Masked, mask=0x1)

    __slots__ = ()


class CreeperEM(MonsterEM):
    """Entity representing a creeper.

    :param state: The state of the creeper (-1 = idle, 1 = fuse).
    :type state: int, optional, default: -1
    :param is_charged: Indicates if the creeper is charged.
    :type is_charged: bool, optional, default: False
    :param is_ignited: Indicates if the creeper is ignited.
    :type is_ignited: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    state: int = entry(VarIntEME, -1)
    is_charged: bool = entry(BooleanEME, False)
    is_ignited: bool = entry(BooleanEME, False)

    __slots__ = ()


class EndermiteEM(MonsterEM):
    """Entity representing an endermite.

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class GiantEM(MonsterEM):
    """Entity representing a giant.

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class GuardianEM(MonsterEM):
    """Entity representing a guardian.

    :param is_retracting_spikes: Indicates if the guardian is retracting spikes.
    :type is_retracting_spikes: bool, optional, default: False
    :param target_eid: The Entity ID of the target.
    :type target_eid: int, optional, default: 0

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_retracting_spikes: bool = entry(BooleanEME, False)
    target_eid: int = entry(VarIntEME, 0)

    __slots__ = ()


class ElderGuardianEM(GuardianEM):
    """Entity representing an elder guardian.

    Inherited from :class:`GuardianEM`:

    :param is_retracting_spikes: Indicates if the guardian is retracting spikes.
    :type is_retracting_spikes: bool, optional, default: False
    :param target_eid: The Entity ID of the target.
    :type target_eid: int, optional, default: 0

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class SilverfishEM(MonsterEM):
    """Entity representing a silverfish.

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class RaiderEM(MonsterEM):
    """Entity representing a raider.

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_celebrating: bool = entry(BooleanEME, False)

    __slots__ = ()


class AbstractIllagerEM(RaiderEM):
    """Entity representing an abstract illager.

    Inherited from :class:`RaiderEM`:

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class VindicatorEM(AbstractIllagerEM):
    """Entity representing a vindicator.

    Inherited from :class:`AbstractIllagerEM`:

    Inherited from :class:`RaiderEM`:

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class PillagerEM(AbstractIllagerEM):
    """Entity representing a pillager.

    :param is_charging: Indicates if the pillager is charging.
    :type is_charging: bool, optional, default: False

    Inherited from :class:`AbstractIllagerEM`:

    Inherited from :class:`RaiderEM`:

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_charging: bool = entry(BooleanEME, False)

    __slots__ = ()


class SpellcasterIllagerEM(AbstractIllagerEM):
    """Entity representing a spellcaster illager.

    :param spell: The type of spell the illager is casting. (0: none, 1: summon vex, 2: attack,
        3: wololo, 4: disappear, 5: blindness)
    :type spell: int, optional, default: 0

    Inherited from :class:`AbstractIllagerEM`:

    Inherited from :class:`RaiderEM`:

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    spell: int = entry(ByteEME, 0)

    __slots__ = ()


class EvokerEM(SpellcasterIllagerEM):
    """Entity representing an evoker.

    Inherited from :class:`SpellcasterIllagerEM`:

    :param spell: The type of spell the illager is casting. (0: none, 1: summon vex, 2: attack,
        3: wololo, 4: disappear, 5: blindness)
    :type spell: int, optional, default: 0

    Inherited from :class:`AbstractIllagerEM`:

    Inherited from :class:`RaiderEM`:

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class IllusionerEM(SpellcasterIllagerEM):
    """Entity representing an illusioner.

    Inherited from :class:`SpellcasterIllagerEM`:

    :param spell: The type of spell the illager is casting. (0: none, 1: summon vex, 2: attack,
        3: wololo, 4: disappear, 5: blindness)
    :type spell: int, optional, default: 0

    Inherited from :class:`AbstractIllagerEM`:

    Inherited from :class:`RaiderEM`:

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class RavagerEM(RaiderEM):
    """Entity representing a ravager.

    Inherited from :class:`RaiderEM`:

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class WitchEM(RaiderEM):
    """Entity representing a witch.

    :param is_drinking_potion: Indicates if the witch is drinking a potion.
    :type is_drinking_potion: bool, optional, default: False

    Inherited from :class:`RaiderEM`:

    :param is_celebrating: Indicates if the raider is celebrating.
    :type is_celebrating: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_drinking_potion: bool = entry(BooleanEME, False)

    __slots__ = ()


class EvokerFangsEM(EntityEM):
    """Entity representing evoker fangs.

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class VexEM(MonsterEM):
    """Entity representing a vex.

    :param is_attacking: Indicates if the vex is charging. (this affects :attr:`_vex_flags`)
    :type is_attacking: bool, optional

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _vex_flags: ClassVar[int] = entry(ByteEME, 0)
    is_attacking: bool = proxy(_vex_flags, Masked, mask=0x1)

    __slots__ = ()


class AbstractSkeletonEM(MonsterEM):
    """Entity representing an abstract skeleton.

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class SkeletonEM(AbstractSkeletonEM):
    """Entity representing a skeleton.

    Inherited from :class:`AbstractSkeletonEM`:

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class WitherSkeletonEM(AbstractSkeletonEM):
    """Entity representing a wither skeleton.

    Inherited from :class:`AbstractSkeletonEM`:

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class StrayEM(AbstractSkeletonEM):
    """Entity representing a stray skeleton.

    Inherited from :class:`AbstractSkeletonEM`:

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class SpiderEM(MonsterEM):
    """Entity representing a spider.

    :param is_climbing: Whether the spider is climbing. (this affects :attr:`_spider_flags`)
    :type is_climbing: bool, optional

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    _spider_flags: ClassVar[int] = entry(ByteEME, 0)
    is_climbing: bool = proxy(_spider_flags, Masked, mask=0x1)

    __slots__ = ()


class WardenEM(MonsterEM):
    """Entity representing a warden.

    :param anger_level: The level of anger of the warden.
    :type anger_level: int, optional, default: 0

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    anger_level: int = entry(VarIntEME, 0)

    __slots__ = ()


class WitherEM(MonsterEM):
    """Entity representing a wither.

    :param center_head_target: The entity ID of the target for the center head. (0 if no target)
    :type center_head_target: int, optional, default: 0
    :param left_head_target: The entity ID of the target for the left head. (0 if no target)
    :type left_head_target: int, optional, default: 0
    :param right_head_target: The entity ID of the target for the right head. (0 if no target)
    :type right_head_target: int, optional, default: 0
    :param invulnerable_time: The amount of time the wither is invulnerable.
    :type invulnerable_time: int, optional, default: 0

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    center_head_target: int = entry(VarIntEME, 0)
    left_head_target: int = entry(VarIntEME, 0)
    right_head_target: int = entry(VarIntEME, 0)
    invulnerable_time: int = entry(VarIntEME, 0)

    __slots__ = ()


class ZoglinEM(MonsterEM):
    """Entity representing a zoglin.

    :param is_baby: Indicates whether the zoglin is a baby.
    :type is_baby: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_baby: bool = entry(BooleanEME, False)

    __slots__ = ()


class ZombieEM(MonsterEM):
    """Entity representing a zombie.

    :param is_baby: Indicates whether the zombie is a baby.
    :type is_baby: bool, optional, default: False
    :param _zombie_type: Unused metadata. (Previously used for zombie type)
    :type _zombie_type: int, optional, default: 0
    :param is_becoming_drowned: Indicates whether the zombie is in the process of becoming a drowned.
    :type is_becoming_drowned: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_baby: bool = entry(BooleanEME, False)
    _zombie_type: int = entry(VarIntEME, 0)
    is_becoming_drowned: bool = entry(BooleanEME, False)

    __slots__ = ()


class ZombieVillagerEM(ZombieEM):
    """Entity representing a zombie villager.

    :param is_converting: Indicates whether the zombie villager is currently converting.
    :type is_converting: bool, optional, default: False
    :param villager_data: The data of the villager associated with the zombie villager.
    :type villager_data: tuple[int, int, int], optional, default: (0, 0, 0)

    Inherited from :class:`ZombieEM`:

    :param is_baby: Indicates whether the zombie is a baby.
    :type is_baby: bool, optional, default: False
    :param _zombie_type: Unused metadata. (Previously used for zombie type)
    :type _zombie_type: int, optional, default: 0
    :param is_becoming_drowned: Indicates whether the zombie is in the process of becoming a drowned.
    :type is_becoming_drowned: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_converting: bool = entry(BooleanEME, False)
    villager_data: tuple[int, int, int] = entry(VillagerDataEME, (0, 0, 0))

    __slots__ = ()


class HuskEM(ZombieEM):
    """Entity representing a husk.

    Inherited from :class:`ZombieEM`:

    :param is_baby: Indicates whether the zombie is a baby.
    :type is_baby: bool, optional, default: False
    :param _zombie_type: Unused metadata. (Previously used for zombie type)
    :type _zombie_type: int, optional, default: 0
    :param is_becoming_drowned: Indicates whether the zombie is in the process of becoming a drowned.
    :type is_becoming_drowned: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class DrownedEM(ZombieEM):
    """Entity representing a drowned.

    Inherited from :class:`ZombieEM`:

    :param is_baby: Indicates whether the zombie is a baby.
    :type is_baby: bool, optional, default: False
    :param _zombie_type: Unused metadata. (Previously used for zombie type)
    :type _zombie_type: int, optional, default: 0
    :param is_becoming_drowned: Indicates whether the zombie is in the process of becoming a drowned.
    :type is_becoming_drowned: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class ZombifiedPiglinEM(ZombieEM):
    """Entity representing a zombified piglin.

    Inherited from :class:`ZombieEM`:

    :param is_baby: Indicates whether the zombie is a baby.
    :type is_baby: bool, optional, default: False
    :param _zombie_type: Unused metadata. (Previously used for zombie type)
    :type _zombie_type: int, optional, default: 0
    :param is_becoming_drowned: Indicates whether the zombie is in the process of becoming a drowned.
    :type is_becoming_drowned: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class EndermanEM(MonsterEM):
    """Entity representing an enderman.

    :param carried_block: The block the enderman is carrying.
    :type carried_block: str, optional, default: "Absent"
    :param is_screaming: Indicates if the enderman is screaming.
    :type is_screaming: bool, optional, default: False
    :param is_staring: Indicates if the enderman is staring.
    :type is_staring: bool, optional, default: False

    Inherited from :class:`MonsterEM`:

    Inherited from :class:`PathfinderMobEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    carried_block: str = entry(OptBlockStateEME, "Absent")
    is_screaming: bool = entry(BooleanEME, False)
    is_staring: bool = entry(BooleanEME, False)

    __slots__ = ()


class EnderDragonEM(MobEM):
    """Entity representing an ender dragon.

    :param dragon_phase: The current phase of the ender dragon.
    :type dragon_phase: :class:`DragonPhase`, optional, default: :attr:`DragonPhase.HOVERING_NO_AI`

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    dragon_phase: DragonPhase = entry(DragonPhaseEME, DragonPhase.HOVERING_NO_AI)

    __slots__ = ()


class FlyingEM(MobEM):
    """Base entity for flying mobs.

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class GhastEM(FlyingEM):
    """Entity representing a ghast.

    :param is_attacking: Indicates if the ghast is attacking.
    :type is_attacking: bool, optional, default: False

    Inherited from :class:`FlyingEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    is_attacking: bool = entry(BooleanEME, False)

    __slots__ = ()


class PhantomEM(FlyingEM):
    """Entity representing a phantom.

    :param size: The size of the phantom.
    :type size: int, optional, default: 0

    Inherited from :class:`FlyingEM`:

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    size: int = entry(VarIntEME, 0)

    __slots__ = ()


class SlimeEM(MobEM):
    """Entity representing a slime.

    :param size: The size of the slime.
    :type size: int, optional, default: 1

    Inherited from :class:`MobEM`:

    :param no_ai: Whether the mob has AI. (this affects :attr:`_mob_flags`)
    :type no_ai: bool, optional
    :param is_left_handed: Whether the mob is left-handed. (this affects :attr:`_mob_flags`)
    :type is_left_handed: bool, optional
    :param is_aggressive: Whether the mob is aggressive. (this affects :attr:`_mob_flags`)
    :type is_aggressive: bool, optional

    Inherited from :class:`LivingEntityEM`:

    :param is_hand_active: Whether the hand is active. (this affects :attr:`_hand_states`)
    :type is_hand_active: bool, optional
    :param active_hand: Which hand is active (0 = main hand, 1 = offhand). (this affects :attr:`_hand_states`)
    :type active_hand: int, optional
    :param is_riptide_spin_attack: Whether the entity is in riptide spin attack. (this affects :attr:`_hand_states`)
    :type is_riptide_spin_attack: bool, optional
    :param health: The health of the living entity.
    :type health: float, optional, default: 1.0
    :param potion_effect_color: Color of the potion effect (or 0 if there is no effect).
    :type potion_effect_color: int, optional, default: 0
    :param is_potion_effect_ambient: Whether the potion effect is ambient: reduces the number of particles generated by
        potions to 1/5 the normal amount.
    :type is_potion_effect_ambient: bool, optional, default: False
    :param num_arrows: Number of arrows in the entity.
    :type num_arrows: int, optional, default: 0
    :param num_bee_stingers: Number of bee stingers in the entity.
    :type num_bee_stingers: int, optional, default: 0
    :param sleeping_bed_location: Location of the bed that the entity is currently sleeping
        in (Empty if it isn't sleeping).
    :type sleeping_bed_location: :class:`Position|None`, optional, default: :attr:`None`

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    size: int = entry(VarIntEME, 1)

    __slots__ = ()


class LlamaSpitEM(EntityEM):
    """Entity representing spit from a llama.

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    __slots__ = ()


class PrimedTntEM(EntityEM):
    """Entity representing primed TNT.

    :param fuse_time: The fuse time for the primed TNT.
    :type fuse_time: int, optional, default: 80

    Inherited from :class:`EntityEM`:

    :param is_on_fire: Whether the entity is on fire. (this affects :attr:`_entity_flags`)
    :type is_on_fire: bool, optional
    :param is_crouching: Whether the entity is crouching. (this affects :attr:`_entity_flags`)
    :type is_crouching: bool, optional
    :param is_riding: [UNUSED] Whether the entity is riding something. (this affects :attr:`_entity_flags`)
    :type is_riding: bool, optional
    :param is_sprinting: Whether the entity is sprinting. (this affects :attr:`_entity_flags`)
    :type is_sprinting: bool, optional
    :param is_swimming: Whether the entity is swimming. (this affects :attr:`_entity_flags`)
    :type is_swimming: bool, optional
    :param is_invisible: Whether the entity is invisible. (this affects :attr:`_entity_flags`)
    :type is_invisible: bool, optional
    :param is_glowing: Whether the entity has a glowing effect. (this affects :attr:`_entity_flags`)
    :type is_glowing: bool, optional
    :param is_flying: Whether the entity is flying. (this affects :attr:`_entity_flags`)
    :type is_flying: bool, optional
    :param air: The amount of air the entity has.
    :type air: int, optional, default: 300
    :param custom_name: The custom name of the entity.
    :type custom_name: str, optional, default: ""
    :param is_custom_name_visible: Whether the custom name is visible.
    :type is_custom_name_visible: bool, optional, default: False
    :param is_silent: Whether the entity is silent.
    :type is_silent: bool, optional, default: False
    :param no_gravity: Whether the entity should ignore gravity.
    :type no_gravity: bool, optional, default: False
    :param pose: The pose of the entity. Can be one of the following: STANDING, FALL_FLYING,
        SLEEPING, SWIMMING, SPIN_ATTACK, SNEAKING, DYING.
    :type pose: :class:`Pose`, optional, default: :attr:`Pose.STANDING`
    :param ticks_frozen: The amount of ticks the entity has been in powdered snow for.
    :type ticks_frozen: int, optional, default: 0

    """

    fuse_time: int = entry(VarIntEME, 80)

    __slots__ = ()
